var __create = Object.create;
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __template = (cooked, raw2) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw2 || cooked.slice()) }));

// .wrangler/tmp/bundle-cVVNnv/checked-fetch.js
function checkURL(request, init) {
  const url = request instanceof URL ? request : new URL(
    (typeof request === "string" ? new Request(request, init) : request).url
  );
  if (url.port && url.port !== "443" && url.protocol === "https:") {
    if (!urls.has(url.toString())) {
      urls.add(url.toString());
      console.warn(
        `WARNING: known issue with \`fetch()\` requests to custom HTTPS ports in published Workers:
 - ${url.toString()} - the custom port will be ignored when the Worker is published using the \`wrangler deploy\` command.
`
      );
    }
  }
}
var urls;
var init_checked_fetch = __esm({
  ".wrangler/tmp/bundle-cVVNnv/checked-fetch.js"() {
    "use strict";
    urls = /* @__PURE__ */ new Set();
    globalThis.fetch = new Proxy(globalThis.fetch, {
      apply(target, thisArg, argArray) {
        const [request, init] = argArray;
        checkURL(request, init);
        return Reflect.apply(target, thisArg, argArray);
      }
    });
  }
});

// wrangler-modules-watch:wrangler:modules-watch
var init_wrangler_modules_watch = __esm({
  "wrangler-modules-watch:wrangler:modules-watch"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// ../../node_modules/wrangler/templates/modules-watch-stub.js
var init_modules_watch_stub = __esm({
  "../../node_modules/wrangler/templates/modules-watch-stub.js"() {
    init_wrangler_modules_watch();
  }
});

// ../../node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "../../node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    function bind2(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString: toString3 } = Object.prototype;
    var { getPrototypeOf: getPrototypeOf2 } = Object;
    var kindOf2 = ((cache2) => (thing) => {
      const str = toString3.call(thing);
      return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest2 = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf2(thing) === type;
    };
    var typeOfTest2 = (type) => (thing) => typeof thing === type;
    var { isArray: isArray2 } = Array;
    var isUndefined2 = typeOfTest2("undefined");
    function isBuffer2(val) {
      return val !== null && !isUndefined2(val) && val.constructor !== null && !isUndefined2(val.constructor) && isFunction2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer2 = kindOfTest2("ArrayBuffer");
    function isArrayBufferView2(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer2(val.buffer);
      }
      return result;
    }
    var isString3 = typeOfTest2("string");
    var isFunction2 = typeOfTest2("function");
    var isNumber2 = typeOfTest2("number");
    var isObject3 = (thing) => thing !== null && typeof thing === "object";
    var isBoolean2 = (thing) => thing === true || thing === false;
    var isPlainObject2 = (val) => {
      if (kindOf2(val) !== "object") {
        return false;
      }
      const prototype4 = getPrototypeOf2(val);
      return (prototype4 === null || prototype4 === Object.prototype || Object.getPrototypeOf(prototype4) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate2 = kindOfTest2("Date");
    var isFile2 = kindOfTest2("File");
    var isBlob2 = kindOfTest2("Blob");
    var isFileList2 = kindOfTest2("FileList");
    var isStream2 = (val) => isObject3(val) && isFunction2(val.pipe);
    var isFormData2 = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction2(thing.append) && ((kind = kindOf2(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction2(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams2 = kindOfTest2("URLSearchParams");
    var [isReadableStream2, isRequest2, isResponse2, isHeaders2] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest2);
    var trim2 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach2(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i2;
      let l3;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray2(obj)) {
        for (i2 = 0, l3 = obj.length; i2 < l3; i2++) {
          fn.call(null, obj[i2], i2, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i2 = 0; i2 < len; i2++) {
          key = keys[i2];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey2(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i2 = keys.length;
      let _key;
      while (i2-- > 0) {
        _key = keys[i2];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global2 = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined2 = (context) => !isUndefined2(context) && context !== _global2;
    function merge3() {
      const { caseless } = isContextDefined2(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey2(result, key) || key;
        if (isPlainObject2(result[targetKey]) && isPlainObject2(val)) {
          result[targetKey] = merge3(result[targetKey], val);
        } else if (isPlainObject2(val)) {
          result[targetKey] = merge3({}, val);
        } else if (isArray2(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i2 = 0, l3 = arguments.length; i2 < l3; i2++) {
        arguments[i2] && forEach2(arguments[i2], assignValue);
      }
      return result;
    }
    var extend2 = (a2, b2, thisArg, { allOwnKeys } = {}) => {
      forEach2(b2, (val, key) => {
        if (thisArg && isFunction2(val)) {
          a2[key] = bind2(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    var stripBOM2 = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits2 = (constructor, superConstructor, props, descriptors3) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors3);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject2 = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i2;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i2 = props.length;
        while (i2-- > 0) {
          prop = props[i2];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf2(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith2 = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray2 = (thing) => {
      if (!thing)
        return null;
      if (isArray2(thing))
        return thing;
      let i2 = thing.length;
      if (!isNumber2(i2))
        return null;
      const arr = new Array(i2);
      while (i2-- > 0) {
        arr[i2] = thing[i2];
      }
      return arr;
    };
    var isTypedArray2 = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf2(Uint8Array));
    var forEachEntry2 = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll2 = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm2 = kindOfTest2("HTMLFormElement");
    var toCamelCase2 = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty2 = (({ hasOwnProperty: hasOwnProperty3 }) => (obj, prop) => hasOwnProperty3.call(obj, prop))(Object.prototype);
    var isRegExp2 = kindOfTest2("RegExp");
    var reduceDescriptors2 = (obj, reducer) => {
      const descriptors3 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach2(descriptors3, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods2 = (obj) => {
      reduceDescriptors2(obj, (descriptor, name) => {
        if (isFunction2(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction2(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet2 = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray2(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop2 = () => {
    };
    var toFiniteNumber2 = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA2 = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT2 = "0123456789";
    var ALPHABET2 = {
      DIGIT: DIGIT2,
      ALPHA: ALPHA2,
      ALPHA_DIGIT: ALPHA2 + ALPHA2.toUpperCase() + DIGIT2
    };
    var generateString2 = (size = 16, alphabet = ALPHABET2.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm2(thing) {
      return !!(thing && isFunction2(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject2 = (obj) => {
      const stack = new Array(10);
      const visit = (source, i2) => {
        if (isObject3(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i2] = source;
            const target = isArray2(source) ? [] : {};
            forEach2(source, (value, key) => {
              const reducedValue = visit(value, i2 + 1);
              !isUndefined2(reducedValue) && (target[key] = reducedValue);
            });
            stack[i2] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn2 = kindOfTest2("AsyncFunction");
    var isThenable2 = (thing) => thing && (isObject3(thing) || isFunction2(thing)) && isFunction2(thing.then) && isFunction2(thing.catch);
    var _setImmediate2 = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global2.addEventListener("message", ({ source, data }) => {
          if (source === _global2 && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global2.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction2(_global2.postMessage)
    );
    var asap2 = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global2) : typeof process !== "undefined" && process.nextTick || _setImmediate2;
    var utils$1 = {
      isArray: isArray2,
      isArrayBuffer: isArrayBuffer2,
      isBuffer: isBuffer2,
      isFormData: isFormData2,
      isArrayBufferView: isArrayBufferView2,
      isString: isString3,
      isNumber: isNumber2,
      isBoolean: isBoolean2,
      isObject: isObject3,
      isPlainObject: isPlainObject2,
      isReadableStream: isReadableStream2,
      isRequest: isRequest2,
      isResponse: isResponse2,
      isHeaders: isHeaders2,
      isUndefined: isUndefined2,
      isDate: isDate2,
      isFile: isFile2,
      isBlob: isBlob2,
      isRegExp: isRegExp2,
      isFunction: isFunction2,
      isStream: isStream2,
      isURLSearchParams: isURLSearchParams2,
      isTypedArray: isTypedArray2,
      isFileList: isFileList2,
      forEach: forEach2,
      merge: merge3,
      extend: extend2,
      trim: trim2,
      stripBOM: stripBOM2,
      inherits: inherits2,
      toFlatObject: toFlatObject2,
      kindOf: kindOf2,
      kindOfTest: kindOfTest2,
      endsWith: endsWith2,
      toArray: toArray2,
      forEachEntry: forEachEntry2,
      matchAll: matchAll2,
      isHTMLForm: isHTMLForm2,
      hasOwnProperty: hasOwnProperty2,
      hasOwnProp: hasOwnProperty2,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors: reduceDescriptors2,
      freezeMethods: freezeMethods2,
      toObjectSet: toObjectSet2,
      toCamelCase: toCamelCase2,
      noop: noop2,
      toFiniteNumber: toFiniteNumber2,
      findKey: findKey2,
      global: _global2,
      isContextDefined: isContextDefined2,
      ALPHABET: ALPHABET2,
      generateString: generateString2,
      isSpecCompliantForm: isSpecCompliantForm2,
      toJSONObject: toJSONObject2,
      isAsyncFn: isAsyncFn2,
      isThenable: isThenable2,
      setImmediate: _setImmediate2,
      asap: asap2
    };
    function AxiosError3(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError3, Error, {
      toJSON: function toJSON2() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError3.prototype;
    var descriptors2 = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors2[code] = { value: code };
    });
    Object.defineProperties(AxiosError3, descriptors2);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError3.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError3.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable2(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets2(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey2(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i2) {
        token = removeBrackets2(token);
        return !dots && i2 ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray2(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable2);
    }
    var predicates2 = utils$1.toFlatObject(utils$1, {}, null, function filter2(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData3(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError3("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray2(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets2(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey2([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable2(value)) {
          return true;
        }
        formData.append(renderKey2(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates2, {
        defaultVisitor,
        convertValue,
        isVisitable: isVisitable2
      });
      function build(value, path) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams2(params, options) {
      this._pairs = [];
      params && toFormData3(params, this, options);
    }
    var prototype3 = AxiosURLSearchParams2.prototype;
    prototype3.append = function append2(name, value) {
      this._pairs.push([name, value]);
    };
    prototype3.toString = function toString4(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode3(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL2(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode3;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams2(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager2 = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h2) {
          if (h2 !== null) {
            fn(h2);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager2;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams2;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv2 = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator2 = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv2 = hasBrowserEnv2 && (!_navigator2 || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator2.product) < 0);
    var hasStandardBrowserWebWorkerEnv2 = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin2 = hasBrowserEnv2 && window.location.href || "http://localhost";
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv: hasBrowserEnv2,
      hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv2,
      hasStandardBrowserEnv: hasStandardBrowserEnv2,
      navigator: _navigator2,
      origin: origin2
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm2(data, options) {
      return toFormData3(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath2(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject2(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i2;
      const len = keys.length;
      let key;
      for (i2 = 0; i2 < len; i2++) {
        key = keys[i2];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON2(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject2(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath2(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely2(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e2) {
          if (e2.name !== "SyntaxError") {
            throw e2;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults2 = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest2(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData3 = utils$1.isFormData(data);
        if (isFormData3) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON2(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList3;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm2(data, this.formSerializer).toString();
          }
          if ((isFileList3 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData3(
              isFileList3 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely2(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse2(data) {
        const transitional2 = this.transitional || defaults2.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e2) {
            if (strictJSONParsing) {
              if (e2.name === "SyntaxError") {
                throw AxiosError3.from(e2, AxiosError3.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e2;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus2(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults2.headers[method] = {};
    });
    var defaults$1 = defaults2;
    var ignoreDuplicateOf2 = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i2;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i2 = line.indexOf(":");
        key = line.substring(0, i2).trim().toLowerCase();
        val = line.substring(i2 + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf2[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals2 = Symbol("internals");
    function normalizeHeader2(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue2(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue2) : String(value);
    }
    function parseTokens2(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName2 = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue2(context, value, header, filter2, isHeaderNameFilter) {
      if (utils$1.isFunction(filter2)) {
        return filter2.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter2)) {
        return value.indexOf(filter2) !== -1;
      }
      if (utils$1.isRegExp(filter2)) {
        return filter2.test(value);
      }
    }
    function formatHeader2(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors2(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders3 = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader2(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue2(_value);
          }
        }
        const setHeaders3 = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders3(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName2(header)) {
          setHeaders3(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader2(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens2(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader2(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue2(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader2(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue2(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i2 = keys.length;
        let deleted = false;
        while (i2--) {
          const key = keys[i2];
          if (!matcher || matchHeaderValue2(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue2(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader2(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue2(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals2] = this[$internals2] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype4 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader2(_header);
          if (!accessors[lHeader]) {
            buildAccessors2(prototype4, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders3.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders3.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders3);
    var AxiosHeaders$1 = AxiosHeaders3;
    function transformData2(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel3(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError3(message, config, request) {
      AxiosError3.call(this, message == null ? "canceled" : message, AxiosError3.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError3, AxiosError3, {
      __CANCEL__: true
    });
    function settle2(resolve, reject, response) {
      const validateStatus2 = response.config.validateStatus;
      if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError3(
          "Request failed with status code " + response.status,
          [AxiosError3.ERR_BAD_REQUEST, AxiosError3.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol2(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer2(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i2 = tail;
        let bytesCount = 0;
        while (i2 !== head) {
          bytesCount += bytes[i2++];
          i2 = i2 % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle2(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer2 = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer2(50, 250);
      return throttle2((e2) => {
        const loaded = e2.loaded;
        const total = e2.lengthComputable ? e2.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e2,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator2 = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator2 = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv2() {
        const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv2() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL2(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs2(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath2(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL2(requestedURL)) {
        return combineURLs2(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject2 = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig3(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a2, b2, caseless) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(a2, b2, caseless);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2, caseless);
        }
      }
      function valueFromConfig2(a2, b2) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(void 0, b2);
        }
      }
      function defaultToConfig2(a2, b2) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(void 0, b2);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2);
        }
      }
      function mergeDirectKeys(a2, b2, prop) {
        if (prop in config2) {
          return getMergedValue(a2, b2);
        } else if (prop in config1) {
          return getMergedValue(void 0, a2);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b2) => mergeDeepProperties(headersToObject2(a2), headersToObject2(b2), true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge4 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge4(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge4 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig3({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL2(buildFullPath2(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported2 = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported2 && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle2(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError3("Request aborted", AxiosError3.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError3("Network Error", AxiosError3.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional2 = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError3(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError3.ETIMEDOUT : AxiosError3.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer2(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer2(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError3(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol2(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError3("Unsupported protocol " + protocol + ":", AxiosError3.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals2 = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError3 ? err : new CanceledError3(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError3(`timeout ${timeout} of ms exceeded`, AxiosError3.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals2;
    var streamChunk2 = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes2 = async function* (iterable, chunkSize) {
      for await (const chunk of readStream2(iterable)) {
        yield* streamChunk2(chunk, chunkSize);
      }
    };
    var readStream2 = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream2 = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes2(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e2) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e2);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported2 = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported2 = isFetchSupported2 && typeof ReadableStream === "function";
    var encodeText2 = isFetchSupported2 && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test2 = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e2) {
        return false;
      }
    };
    var supportsRequestStream2 = isReadableStreamSupported2 && test2(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE2 = 64 * 1024;
    var supportsResponseStream2 = isReadableStreamSupported2 && test2(() => utils$1.isReadableStream(new Response("").body));
    var resolvers2 = {
      stream: supportsResponseStream2 && ((res) => res.body)
    };
    isFetchSupported2 && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers2[type] && (resolvers2[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError3(`Response type '${type}' is not supported`, AxiosError3.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength2 = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText2(body)).byteLength;
      }
    };
    var resolveBodyLength2 = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength2(body) : length;
    };
    var fetchAdapter = isFetchSupported2 && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream2 && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength2(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator2(
              requestContentLength,
              progressEventReducer2(asyncDecorator2(onUploadProgress))
            );
            data = trackStream2(_request.body, DEFAULT_CHUNK_SIZE2, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream2 && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream2 && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator2(
            responseContentLength,
            progressEventReducer2(asyncDecorator2(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream2(response.body, DEFAULT_CHUNK_SIZE2, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers2[utils$1.findKey(resolvers2, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle2(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError3("Network Error", AxiosError3.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError3.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters2 = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters2, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e2) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason2 = (reason) => `- ${reason}`;
    var isResolvedHandle2 = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i2 = 0; i2 < length; i2++) {
          nameOrAdapter = adapters2[i2];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle2(nameOrAdapter)) {
            adapter = knownAdapters2[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError3(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i2] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason2).join("\n") : " " + renderReason2(reasons[0]) : "as no adapter specified";
          throw new AxiosError3(
            `There is no suitable adapter to dispatch the request ` + s2,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters2
    };
    function throwIfCancellationRequested2(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError3(null, config);
      }
    }
    function dispatchRequest2(config) {
      throwIfCancellationRequested2(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData2.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested2(config);
        response.data = transformData2.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel3(reason)) {
          throwIfCancellationRequested2(config);
          if (reason && reason.response) {
            reason.response.data = transformData2.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION3 = "1.7.7";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
      validators$1[type] = function validator3(thing) {
        return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings2 = {};
    validators$1.transitional = function transitional2(validator3, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION3 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator3 === false) {
          throw new AxiosError3(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError3.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings2[opt]) {
          deprecatedWarnings2[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator3 ? validator3(value, opt, opts) : true;
      };
    };
    function assertOptions2(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError3("options must be an object", AxiosError3.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i2 = keys.length;
      while (i2-- > 0) {
        const opt = keys[i2];
        const validator3 = schema[opt];
        if (validator3) {
          const value = options[opt];
          const result = value === void 0 || validator3(value, opt, options);
          if (result !== true) {
            throw new AxiosError3("option " + opt + " must be " + result, AxiosError3.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError3("Unknown option " + opt, AxiosError3.ERR_BAD_OPTION);
        }
      }
    }
    var validator2 = {
      assertOptions: assertOptions2,
      validators: validators$1
    };
    var validators3 = validator2.validators;
    var Axios3 = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e2) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig3(this.defaults, config);
        const { transitional: transitional2, paramsSerializer, headers } = config;
        if (transitional2 !== void 0) {
          validator2.assertOptions(transitional2, {
            silentJSONParsing: validators3.transitional(validators3.boolean),
            forcedJSONParsing: validators3.transitional(validators3.boolean),
            clarifyTimeoutError: validators3.transitional(validators3.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator2.assertOptions(paramsSerializer, {
              encode: validators3.function,
              serialize: validators3.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i2 = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest2.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i2 < len) {
            promise = promise.then(chain[i2++], chain[i2++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i2 = 0;
        while (i2 < len) {
          const onFulfilled = requestInterceptorChain[i2++];
          const onRejected = requestInterceptorChain[i2++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest2.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i2 = 0;
        len = responseInterceptorChain.length;
        while (i2 < len) {
          promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig3(this.defaults, config);
        const fullPath = buildFullPath2(config.baseURL, config.url);
        return buildURL2(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
      Axios3.prototype[method] = function(url, config) {
        return this.request(mergeConfig3(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig3(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios3.prototype[method] = generateHTTPMethod();
      Axios3.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios3;
    var CancelToken3 = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i2 = token._listeners.length;
          while (i2-- > 0) {
            token._listeners[i2](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError3(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken3(function executor(c2) {
          cancel = c2;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken3;
    function spread3(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError3(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode3 = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode3).forEach(([key, value]) => {
      HttpStatusCode3[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode3;
    function createInstance2(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind2(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance2(mergeConfig3(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance2(defaults$1);
    axios2.Axios = Axios$1;
    axios2.CanceledError = CanceledError3;
    axios2.CancelToken = CancelToken$1;
    axios2.isCancel = isCancel3;
    axios2.VERSION = VERSION3;
    axios2.toFormData = toFormData3;
    axios2.AxiosError = AxiosError3;
    axios2.Cancel = axios2.CanceledError;
    axios2.all = function all3(promises) {
      return Promise.all(promises);
    };
    axios2.spread = spread3;
    axios2.isAxiosError = isAxiosError3;
    axios2.mergeConfig = mergeConfig3;
    axios2.AxiosHeaders = AxiosHeaders$1;
    axios2.formToJSON = (thing) => formDataToJSON2(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios2.getAdapter = adapters.getAdapter;
    axios2.HttpStatusCode = HttpStatusCode$1;
    axios2.default = axios2;
    module.exports = axios2;
  }
});

// ../../node_modules/plaid/dist/base.js
var require_base = __commonJS({
  "../../node_modules/plaid/dist/base.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
    var axios_1 = __importDefault(require_axios());
    exports.BASE_PATH = "https://production.plaid.com".replace(/\/+$/, "");
    exports.COLLECTION_FORMATS = {
      csv: ",",
      ssv: " ",
      tsv: "	",
      pipes: "|"
    };
    var BaseAPI = class {
      constructor(configuration, basePath = exports.BASE_PATH, axios2 = axios_1.default) {
        this.basePath = basePath;
        this.axios = axios2;
        if (configuration) {
          this.configuration = configuration;
          this.basePath = configuration.basePath || this.basePath;
        }
      }
    };
    exports.BaseAPI = BaseAPI;
    var RequiredError = class extends Error {
      constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
      }
    };
    exports.RequiredError = RequiredError;
  }
});

// ../../node_modules/plaid/dist/common.js
var require_common = __commonJS({
  "../../node_modules/plaid/dist/common.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
    var base_1 = require_base();
    exports.DUMMY_BASE_URL = "https://example.com";
    var assertParamExists = function(functionName, paramName, paramValue) {
      if (paramValue === null || paramValue === void 0) {
        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
      }
    };
    exports.assertParamExists = assertParamExists;
    var setApiKeyToObject = function(object, keyParamName, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.apiKey) {
          const localVarApiKeyValue = typeof configuration.apiKey === "function" ? yield configuration.apiKey(keyParamName) : yield configuration.apiKey;
          object[keyParamName] = localVarApiKeyValue;
        }
      });
    };
    exports.setApiKeyToObject = setApiKeyToObject;
    var setBasicAuthToObject = function(object, configuration) {
      if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
      }
    };
    exports.setBasicAuthToObject = setBasicAuthToObject;
    var setBearerAuthToObject = function(object, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
          const accessToken = typeof configuration.accessToken === "function" ? yield configuration.accessToken() : yield configuration.accessToken;
          object["Authorization"] = "Bearer " + accessToken;
        }
      });
    };
    exports.setBearerAuthToObject = setBearerAuthToObject;
    var setOAuthToObject = function(object, name, scopes, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
          const localVarAccessTokenValue = typeof configuration.accessToken === "function" ? yield configuration.accessToken(name, scopes) : yield configuration.accessToken;
          object["Authorization"] = "Bearer " + localVarAccessTokenValue;
        }
      });
    };
    exports.setOAuthToObject = setOAuthToObject;
    var setSearchParams = function(url, ...objects) {
      const searchParams = new URLSearchParams(url.search);
      for (const object of objects) {
        for (const key in object) {
          if (Array.isArray(object[key])) {
            searchParams.delete(key);
            for (const item of object[key]) {
              searchParams.append(key, item);
            }
          } else {
            searchParams.set(key, object[key]);
          }
        }
      }
      url.search = searchParams.toString();
    };
    exports.setSearchParams = setSearchParams;
    var serializeDataIfNeeded = function(value, requestOptions, configuration) {
      const nonString = typeof value !== "string";
      const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
      return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
    };
    exports.serializeDataIfNeeded = serializeDataIfNeeded;
    var toPathString = function(url) {
      return url.pathname + url.search + url.hash;
    };
    exports.toPathString = toPathString;
    var createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {
      return (axios2 = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });
        return axios2.request(axiosRequestArgs);
      };
    };
    exports.createRequestFunction = createRequestFunction;
  }
});

// ../../node_modules/plaid/dist/api.js
var require_api = __commonJS({
  "../../node_modules/plaid/dist/api.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CraLoanApplicationDecision = exports.CraCheckReportProduct = exports.CraBankIncomeWarningCode = exports.CraBankIncomeCompleteResult = exports.CraBankIncomeBonusType = exports.CountryCode = exports.CounterpartyType = exports.ConsumerReportPermissiblePurpose = exports.ConsumerDisputeCategory = exports.CashflowAttributesVersion = exports.BeaconUserStatus = exports.BeaconReportType = exports.BeaconReportCreateType = exports.BeaconMatchSummaryCode = exports.BeaconAuditTrailSource = exports.BeaconAccountRiskEvaluateEvaluationReason = exports.BaseReportWarningCode = exports.BaseReportTransactionType = exports.BankTransferType = exports.BankTransferStatus = exports.BankTransferNetwork = exports.BankTransferEventType = exports.BankTransferEventListDirection = exports.BankTransferEventListBankTransferType = exports.BankTransferDirection = exports.BankIncomeRefreshCompleteResult = exports.BankIncomeCompleteResult = exports.BalancePlusRiskLevel = exports.AuthUpdateTypes = exports.AssetType = exports.AssetTransactionType = exports.AssetTransactionCategoryType = exports.AssetReportType = exports.AssetReportTransactionType = exports.AssetReportAddOns = exports.AddressPurposeLabel = exports.ActivityType = exports.ActionState = exports.AccountVerificationInsightsAccountNumberFormat = exports.AccountType = exports.AccountSubtype = exports.AccountSelectionCardinality = exports.AccountIdentityMatchScoreVerificationStatusEnum = exports.AccountIdentityDocumentUploadVerificationStatusEnum = exports.AccountIdentityVerificationStatusEnum = exports.AccountHolderCategory = exports.AccountBaseVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum = exports.APRAprTypeEnum = exports.ACHClass = void 0;
    exports.ISOCurrencyCode = exports.IDNumberType = exports.HostedLinkDeliveryMethod = exports.HiddenMatchSummaryCode = exports.Form1099Type = exports.FDXPartyType = exports.FDXPartyRegistry = exports.FDXNotificationType = exports.FDXNotificationSeverity = exports.FDXNotificationPriority = exports.FDXNotificationPayloadIdType = exports.FDXNotificationCategory = exports.FDXHateoasLinkAction = exports.FDXContentTypes = exports.ExpirationDate = exports.EntityWatchlistCode = exports.EntityDocumentType = exports.EnrichTransactionDirection = exports.EmploymentVerificationStatus = exports.EmploymentSourceType = exports.EmailTypeEnum = exports.EarningsBreakdownCanonicalDescription = exports.DocumentStatus = exports.DocumentNameMatchCode = exports.DocumentDateOfBirthMatchCode = exports.DocumentAuthenticityMatchCode = exports.DocType = exports.DepositoryAccountSubtype = exports.DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseStateEnum = exports.DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum = exports.DashboardUserStatus = exports.CreditSessionBankIncomeStatus = exports.CreditSessionBankEmploymentStatus = exports.CreditPayStubPayBasisType = exports.CreditBankIncomeWarningType = exports.CreditBankIncomeWarningCode = exports.CreditBankIncomePayFrequency = exports.CreditBankIncomeErrorType = exports.CreditBankIncomeCategory = exports.CreditBankIncomeAccountType = exports.CreditBankEmploymentWarningType = exports.CreditAccountSubtype = exports.CreditACHClass = exports.CraPDFAddOns = exports.CraLoanType = exports.CraLoanStatus = exports.CraLoanPaymentSchedule = void 0;
    exports.PaymentInitiationConsentScope = exports.PaymentConsentPeriodicInterval = exports.PaymentConsentPeriodicAlignment = exports.PaymentChannel = exports.PaymentAmountCurrency = exports.PayPeriodDetailsPayFrequency = exports.PayFrequencyValue = exports.PartyRoleType = exports.PartnerEndCustomerStatus = exports.PartnerEndCustomerQuestionnaireStatus = exports.PartnerEndCustomerOAuthStatusUpdatedValues = exports.PartnerEndCustomerOAuthInstitutionApplicationStatus = exports.PartnerEndCustomerFlowdownStatus = exports.POBoxStatus = exports.OwnershipType = exports.OverrideAccountType = exports.OtherAccountSubtype = exports.OriginatorExpectedTransferFrequency = exports.OmittableTransferType = exports.MonitoringItemStatusCode = exports.MatchSummaryCode = exports.LoanIdentifierType = exports.LoanAccountSubtype = exports.LinkTokenCreateRequestAuthFlowTypeEnum = exports.LinkTokenCreateRequestAuthRerouteToCredentialsEnum = exports.LinkSessionSuccessMetadataTransferStatus = exports.LinkEventName = exports.LinkDeliveryWebhookDeliveryStatus = exports.LinkDeliveryWebhookCommunicationMethod = exports.LinkDeliveryWebhookCallbackType = exports.LinkDeliveryVerificationStatus = exports.LinkDeliverySessionStatus = exports.LinkDeliveryDeliveryMethod = exports.ItemUpdateTypeEnum = exports.IssuingCountry = exports.InvestmentTransactionType = exports.InvestmentTransactionSubtype = exports.InvestmentAccountSubtype = exports.IndividualWatchlistCode = exports.IncomeVerificationSourceType = exports.IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPayrollFlowType = exports.IncomeVerificationDocParsingConfig = exports.IncomeBreakdownType = exports.IncidentUpdateStatusEnum = exports.ImageQuality = exports.IdentityVerificationStepStatus = exports.IdentityVerificationStatus = exports.IdentityVerificationAutofillStatus = exports.IdentityUpdateTypes = void 0;
    exports.SignalPaymentMethod = exports.SignalDecisionOutcome = exports.ServiceProductFulfillmentIdentifier = exports.SelfieStatus = exports.SelfieCheckStatus = exports.SelfieAnalysisDocumentComparison = exports.ScopesContext = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxIncomeWebhookFireRequestWebhookCode = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.SandboxBankIncomeWebhookFireRequestWebhookCode = exports.RiskSignalFileType = exports.RiskSignalDocumentType = exports.RiskSignalDocumentStatus = exports.RiskCheckLinkedService = exports.RiskCheckEmailTopLevelDomainIsSuspicious = exports.RiskCheckEmailIsDeliverableStatus = exports.RiskCheckEmailDomainIsFreeProvider = exports.RiskCheckEmailDomainIsDisposable = exports.RiskCheckEmailDomainIsCustom = exports.RiskCheckBehaviorUserInteractionsLabel = exports.RiskCheckBehaviorFraudRingDetectedLabel = exports.RiskCheckBehaviorBotDetectedLabel = exports.ReportType = exports.RecurringTransactionFrequency = exports.RecurringFrequency = exports.ProxyType = exports.ProgramNameSensitivity = exports.ProfileNetworkStatusGetNetworkStatus = exports.Products = exports.ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusStatusEnum = exports.ProcessorTokenCreateRequestProcessorEnum = exports.PrismProduct = exports.PrismInsightsVersion = exports.PrismFirstDetectVersion = exports.PrismCashScoreVersion = exports.PlaidErrorType = exports.PhysicalDocumentCategory = exports.PhoneType = exports.PhoneNumberTypeEnum = exports.PendingDisconnectWebhookReason = exports.PaystubPayFrequency = exports.PaymentScheme = exports.PaymentScheduleInterval = exports.PaymentProfileStatus = exports.PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentCreateStatus = exports.PaymentInitiationConsentStatus = void 0;
    exports.WalletPaymentScheme = exports.WalletISOCurrencyCode = exports.VerificationStatus = exports.VerificationRefreshStatus = exports.UserStatedIncomeSourcePayType = exports.UserStatedIncomeSourceFrequency = exports.UserStatedIncomeSourceCategory = exports.TransferType = exports.TransferSweepStatus = exports.TransferStatus = exports.TransferScheduleIntervalUnit = exports.TransferRefundStatus = exports.TransferRecurringStatus = exports.TransferRecurringNetwork = exports.TransferNetwork = exports.TransferLedgerSweepSimulateEventType = exports.TransferIntentStatus = exports.TransferIntentCreateNetwork = exports.TransferIntentCreateMode = exports.TransferIntentAuthorizationDecision = exports.TransferEventType = exports.TransferEventListTransferType = exports.TransferDocumentPurpose = exports.TransferDiligenceStatus = exports.TransferCreditFundsSource = exports.TransferBalanceType = exports.TransferAuthorizationRiskLevel = exports.TransferAuthorizationGuaranteeDecisionRationaleCode = exports.TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationDecisionRationaleCode = exports.TransferAuthorizationDecision = exports.TransferACHNetwork = exports.TransactionsUpdateStatus = exports.TransactionsRuleType = exports.TransactionsRuleField = exports.TransactionStreamStatus = exports.TransactionCode = exports.TransactionBaseTransactionTypeEnum = exports.TransactionAllOfPaymentChannelEnum = exports.TransactionPaymentChannelEnum = exports.TransactionTransactionTypeEnum = exports.TotalCanonicalDescription = exports.TaxpayerIdentifierType = exports.SweepTrigger = exports.SweepStatus = exports.StudentRepaymentPlanTypeEnum = exports.StudentLoanStatusTypeEnum = exports.Strategy = exports.StatementsRefreshCompleteResult = exports.Source = void 0;
    exports.PlaidApi = exports.PlaidApiFactory = exports.PlaidApiFp = exports.PlaidApiAxiosParamCreator = exports.WebhookType = exports.WebhookEnvironmentValues = exports.WeakAliasDetermination = exports.WatchlistScreeningStatus = exports.WatchlistScreeningIndividualUpdateRequestResettableField = exports.WatchlistScreeningHitStatus = exports.WatchlistScreeningEntityUpdateRequestResettableField = exports.WatchlistScreeningDocumentType = exports.WarningWarningCodeEnum = exports.WalletTransactionStatus = exports.WalletTransactionRelationTypeEnum = exports.WalletTransactionGetResponseTypeEnum = exports.WalletTransactionFailureReason = exports.WalletTransactionTypeEnum = exports.WalletStatus = void 0;
    var axios_1 = __importDefault(require_axios());
    var common_1 = require_common();
    var base_1 = require_base();
    var ACHClass;
    (function(ACHClass2) {
      ACHClass2["Ccd"] = "ccd";
      ACHClass2["Ppd"] = "ppd";
      ACHClass2["Tel"] = "tel";
      ACHClass2["Web"] = "web";
    })(ACHClass = exports.ACHClass || (exports.ACHClass = {}));
    var APRAprTypeEnum;
    (function(APRAprTypeEnum2) {
      APRAprTypeEnum2["BalanceTransferApr"] = "balance_transfer_apr";
      APRAprTypeEnum2["CashApr"] = "cash_apr";
      APRAprTypeEnum2["PurchaseApr"] = "purchase_apr";
      APRAprTypeEnum2["Special"] = "special";
    })(APRAprTypeEnum = exports.APRAprTypeEnum || (exports.APRAprTypeEnum = {}));
    var AccountAssetsVerificationStatusEnum;
    (function(AccountAssetsVerificationStatusEnum2) {
      AccountAssetsVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountAssetsVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountAssetsVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountAssetsVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountAssetsVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountAssetsVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountAssetsVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
    })(AccountAssetsVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum || (exports.AccountAssetsVerificationStatusEnum = {}));
    var AccountBaseVerificationStatusEnum;
    (function(AccountBaseVerificationStatusEnum2) {
      AccountBaseVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountBaseVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountBaseVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountBaseVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountBaseVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountBaseVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountBaseVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountBaseVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountBaseVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountBaseVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountBaseVerificationStatusEnum = exports.AccountBaseVerificationStatusEnum || (exports.AccountBaseVerificationStatusEnum = {}));
    var AccountHolderCategory;
    (function(AccountHolderCategory2) {
      AccountHolderCategory2["Business"] = "business";
      AccountHolderCategory2["Personal"] = "personal";
      AccountHolderCategory2["Unrecognized"] = "unrecognized";
    })(AccountHolderCategory = exports.AccountHolderCategory || (exports.AccountHolderCategory = {}));
    var AccountIdentityVerificationStatusEnum;
    (function(AccountIdentityVerificationStatusEnum2) {
      AccountIdentityVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountIdentityVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountIdentityVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountIdentityVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountIdentityVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountIdentityVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountIdentityVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountIdentityVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountIdentityVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountIdentityVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountIdentityVerificationStatusEnum = exports.AccountIdentityVerificationStatusEnum || (exports.AccountIdentityVerificationStatusEnum = {}));
    var AccountIdentityDocumentUploadVerificationStatusEnum;
    (function(AccountIdentityDocumentUploadVerificationStatusEnum2) {
      AccountIdentityDocumentUploadVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountIdentityDocumentUploadVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountIdentityDocumentUploadVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountIdentityDocumentUploadVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountIdentityDocumentUploadVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountIdentityDocumentUploadVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountIdentityDocumentUploadVerificationStatusEnum = exports.AccountIdentityDocumentUploadVerificationStatusEnum || (exports.AccountIdentityDocumentUploadVerificationStatusEnum = {}));
    var AccountIdentityMatchScoreVerificationStatusEnum;
    (function(AccountIdentityMatchScoreVerificationStatusEnum2) {
      AccountIdentityMatchScoreVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountIdentityMatchScoreVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountIdentityMatchScoreVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountIdentityMatchScoreVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountIdentityMatchScoreVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountIdentityMatchScoreVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountIdentityMatchScoreVerificationStatusEnum = exports.AccountIdentityMatchScoreVerificationStatusEnum || (exports.AccountIdentityMatchScoreVerificationStatusEnum = {}));
    var AccountSelectionCardinality;
    (function(AccountSelectionCardinality2) {
      AccountSelectionCardinality2["SingleSelect"] = "SINGLE_SELECT";
      AccountSelectionCardinality2["MultiSelect"] = "MULTI_SELECT";
      AccountSelectionCardinality2["All"] = "ALL";
    })(AccountSelectionCardinality = exports.AccountSelectionCardinality || (exports.AccountSelectionCardinality = {}));
    var AccountSubtype;
    (function(AccountSubtype2) {
      AccountSubtype2["_401a"] = "401a";
      AccountSubtype2["_401k"] = "401k";
      AccountSubtype2["_403B"] = "403B";
      AccountSubtype2["_457b"] = "457b";
      AccountSubtype2["_529"] = "529";
      AccountSubtype2["Auto"] = "auto";
      AccountSubtype2["Brokerage"] = "brokerage";
      AccountSubtype2["Business"] = "business";
      AccountSubtype2["CashIsa"] = "cash isa";
      AccountSubtype2["CashManagement"] = "cash management";
      AccountSubtype2["Cd"] = "cd";
      AccountSubtype2["Checking"] = "checking";
      AccountSubtype2["Commercial"] = "commercial";
      AccountSubtype2["Construction"] = "construction";
      AccountSubtype2["Consumer"] = "consumer";
      AccountSubtype2["CreditCard"] = "credit card";
      AccountSubtype2["CryptoExchange"] = "crypto exchange";
      AccountSubtype2["Ebt"] = "ebt";
      AccountSubtype2["EducationSavingsAccount"] = "education savings account";
      AccountSubtype2["FixedAnnuity"] = "fixed annuity";
      AccountSubtype2["Gic"] = "gic";
      AccountSubtype2["HealthReimbursementArrangement"] = "health reimbursement arrangement";
      AccountSubtype2["HomeEquity"] = "home equity";
      AccountSubtype2["Hsa"] = "hsa";
      AccountSubtype2["Isa"] = "isa";
      AccountSubtype2["Ira"] = "ira";
      AccountSubtype2["Keogh"] = "keogh";
      AccountSubtype2["Lif"] = "lif";
      AccountSubtype2["LifeInsurance"] = "life insurance";
      AccountSubtype2["LineOfCredit"] = "line of credit";
      AccountSubtype2["Lira"] = "lira";
      AccountSubtype2["Loan"] = "loan";
      AccountSubtype2["Lrif"] = "lrif";
      AccountSubtype2["Lrsp"] = "lrsp";
      AccountSubtype2["MoneyMarket"] = "money market";
      AccountSubtype2["Mortgage"] = "mortgage";
      AccountSubtype2["MutualFund"] = "mutual fund";
      AccountSubtype2["NonCustodialWallet"] = "non-custodial wallet";
      AccountSubtype2["NonTaxableBrokerageAccount"] = "non-taxable brokerage account";
      AccountSubtype2["Other"] = "other";
      AccountSubtype2["OtherInsurance"] = "other insurance";
      AccountSubtype2["OtherAnnuity"] = "other annuity";
      AccountSubtype2["Overdraft"] = "overdraft";
      AccountSubtype2["Paypal"] = "paypal";
      AccountSubtype2["Payroll"] = "payroll";
      AccountSubtype2["Pension"] = "pension";
      AccountSubtype2["Prepaid"] = "prepaid";
      AccountSubtype2["Prif"] = "prif";
      AccountSubtype2["ProfitSharingPlan"] = "profit sharing plan";
      AccountSubtype2["Rdsp"] = "rdsp";
      AccountSubtype2["Resp"] = "resp";
      AccountSubtype2["Retirement"] = "retirement";
      AccountSubtype2["Rlif"] = "rlif";
      AccountSubtype2["Roth"] = "roth";
      AccountSubtype2["Roth401k"] = "roth 401k";
      AccountSubtype2["Rrif"] = "rrif";
      AccountSubtype2["Rrsp"] = "rrsp";
      AccountSubtype2["Sarsep"] = "sarsep";
      AccountSubtype2["Savings"] = "savings";
      AccountSubtype2["SepIra"] = "sep ira";
      AccountSubtype2["SimpleIra"] = "simple ira";
      AccountSubtype2["Sipp"] = "sipp";
      AccountSubtype2["StockPlan"] = "stock plan";
      AccountSubtype2["Student"] = "student";
      AccountSubtype2["ThriftSavingsPlan"] = "thrift savings plan";
      AccountSubtype2["Tfsa"] = "tfsa";
      AccountSubtype2["Trust"] = "trust";
      AccountSubtype2["Ugma"] = "ugma";
      AccountSubtype2["Utma"] = "utma";
      AccountSubtype2["VariableAnnuity"] = "variable annuity";
    })(AccountSubtype = exports.AccountSubtype || (exports.AccountSubtype = {}));
    var AccountType;
    (function(AccountType2) {
      AccountType2["Investment"] = "investment";
      AccountType2["Credit"] = "credit";
      AccountType2["Depository"] = "depository";
      AccountType2["Loan"] = "loan";
      AccountType2["Brokerage"] = "brokerage";
      AccountType2["Other"] = "other";
    })(AccountType = exports.AccountType || (exports.AccountType = {}));
    var AccountVerificationInsightsAccountNumberFormat;
    (function(AccountVerificationInsightsAccountNumberFormat2) {
      AccountVerificationInsightsAccountNumberFormat2["Valid"] = "valid";
      AccountVerificationInsightsAccountNumberFormat2["Invalid"] = "invalid";
      AccountVerificationInsightsAccountNumberFormat2["Unknown"] = "unknown";
    })(AccountVerificationInsightsAccountNumberFormat = exports.AccountVerificationInsightsAccountNumberFormat || (exports.AccountVerificationInsightsAccountNumberFormat = {}));
    var ActionState;
    (function(ActionState2) {
      ActionState2["Unknown"] = "UNKNOWN";
      ActionState2["Attempt"] = "ATTEMPT";
      ActionState2["Success"] = "SUCCESS";
      ActionState2["Failure"] = "FAILURE";
      ActionState2["Skipped"] = "SKIPPED";
    })(ActionState = exports.ActionState || (exports.ActionState = {}));
    var ActivityType;
    (function(ActivityType2) {
      ActivityType2["Unknown"] = "UNKNOWN";
      ActivityType2["ItemCreate"] = "ITEM_CREATE";
      ActivityType2["ItemImport"] = "ITEM_IMPORT";
      ActivityType2["ItemUpdate"] = "ITEM_UPDATE";
      ActivityType2["ItemUnlink"] = "ITEM_UNLINK";
      ActivityType2["PortalUnlink"] = "PORTAL_UNLINK";
      ActivityType2["PortalItemsDelete"] = "PORTAL_ITEMS_DELETE";
      ActivityType2["ItemRemove"] = "ITEM_REMOVE";
      ActivityType2["InvariantCheckerDeletion"] = "INVARIANT_CHECKER_DELETION";
      ActivityType2["ScopesUpdate"] = "SCOPES_UPDATE";
    })(ActivityType = exports.ActivityType || (exports.ActivityType = {}));
    var AddressPurposeLabel;
    (function(AddressPurposeLabel2) {
      AddressPurposeLabel2["Residential"] = "residential";
      AddressPurposeLabel2["Commercial"] = "commercial";
      AddressPurposeLabel2["NoData"] = "no_data";
    })(AddressPurposeLabel = exports.AddressPurposeLabel || (exports.AddressPurposeLabel = {}));
    var AssetReportAddOns;
    (function(AssetReportAddOns2) {
      AssetReportAddOns2["Investments"] = "investments";
      AssetReportAddOns2["FastAssets"] = "fast_assets";
    })(AssetReportAddOns = exports.AssetReportAddOns || (exports.AssetReportAddOns = {}));
    var AssetReportTransactionType;
    (function(AssetReportTransactionType2) {
      AssetReportTransactionType2["Digital"] = "digital";
      AssetReportTransactionType2["Place"] = "place";
      AssetReportTransactionType2["Special"] = "special";
      AssetReportTransactionType2["Unresolved"] = "unresolved";
    })(AssetReportTransactionType = exports.AssetReportTransactionType || (exports.AssetReportTransactionType = {}));
    var AssetReportType;
    (function(AssetReportType2) {
      AssetReportType2["Full"] = "FULL";
      AssetReportType2["Fast"] = "FAST";
    })(AssetReportType = exports.AssetReportType || (exports.AssetReportType = {}));
    var AssetTransactionCategoryType;
    (function(AssetTransactionCategoryType2) {
      AssetTransactionCategoryType2["AtmFee"] = "ATMFee";
      AssetTransactionCategoryType2["Advertising"] = "Advertising";
      AssetTransactionCategoryType2["AirTravel"] = "AirTravel";
      AssetTransactionCategoryType2["AlcoholBars"] = "AlcoholBars";
      AssetTransactionCategoryType2["Allowance"] = "Allowance";
      AssetTransactionCategoryType2["Amusement"] = "Amusement";
      AssetTransactionCategoryType2["Arts"] = "Arts";
      AssetTransactionCategoryType2["AutoTransport"] = "AutoTransport";
      AssetTransactionCategoryType2["AutoInsurance"] = "AutoInsurance";
      AssetTransactionCategoryType2["AutoPayment"] = "AutoPayment";
      AssetTransactionCategoryType2["BabySupplies"] = "BabySupplies";
      AssetTransactionCategoryType2["BabysitterDaycare"] = "BabysitterDaycare";
      AssetTransactionCategoryType2["BankFee"] = "BankFee";
      AssetTransactionCategoryType2["BillsUtilities"] = "BillsUtilities";
      AssetTransactionCategoryType2["Bonus"] = "Bonus";
      AssetTransactionCategoryType2["BooksSupplies"] = "BooksSupplies";
      AssetTransactionCategoryType2["BusinessServices"] = "Business Services";
      AssetTransactionCategoryType2["Buy"] = "Buy";
      AssetTransactionCategoryType2["CashAtm"] = "CashATM";
      AssetTransactionCategoryType2["Charity"] = "Charity";
      AssetTransactionCategoryType2["Check"] = "Check";
      AssetTransactionCategoryType2["ChildSupport"] = "ChildSupport";
      AssetTransactionCategoryType2["Clothing"] = "Clothing";
      AssetTransactionCategoryType2["CoffeeShops"] = "CoffeeShops";
      AssetTransactionCategoryType2["CreditCardPayment"] = "CreditCardPayment";
      AssetTransactionCategoryType2["Dentist"] = "Dentist";
      AssetTransactionCategoryType2["Doctor"] = "Doctor";
      AssetTransactionCategoryType2["Education"] = "Education";
      AssetTransactionCategoryType2["ElectronicsSoftware"] = "ElectronicsSoftware";
      AssetTransactionCategoryType2["Entertainment"] = "Entertainment";
      AssetTransactionCategoryType2["Eyecare"] = "Eyecare";
      AssetTransactionCategoryType2["FastFood"] = "FastFood";
      AssetTransactionCategoryType2["FederalTax"] = "FederalTax";
      AssetTransactionCategoryType2["FeesCharges"] = "FeesCharges";
      AssetTransactionCategoryType2["FinanceCharge"] = "FinanceCharge";
      AssetTransactionCategoryType2["Financial"] = "Financial";
      AssetTransactionCategoryType2["FinancialAdvisor"] = "FinancialAdvisor";
      AssetTransactionCategoryType2["FoodDining"] = "FoodDining";
      AssetTransactionCategoryType2["Furnishings"] = "Furnishings";
      AssetTransactionCategoryType2["GasFuel"] = "GasFuel";
      AssetTransactionCategoryType2["GiftsDonations"] = "GiftsDonations";
      AssetTransactionCategoryType2["Groceries"] = "Groceries";
      AssetTransactionCategoryType2["Gym"] = "Gym";
      AssetTransactionCategoryType2["Hair"] = "Hair";
      AssetTransactionCategoryType2["HealthFitness"] = "HealthFitness";
      AssetTransactionCategoryType2["HealthInsurance"] = "HealthInsurance";
      AssetTransactionCategoryType2["Hobbies"] = "Hobbies";
      AssetTransactionCategoryType2["Home"] = "Home";
      AssetTransactionCategoryType2["HomeImprovement"] = "HomeImprovement";
      AssetTransactionCategoryType2["HomeInsurance"] = "HomeInsurance";
      AssetTransactionCategoryType2["HomePhone"] = "HomePhone";
      AssetTransactionCategoryType2["HomeServices"] = "HomeServices";
      AssetTransactionCategoryType2["HomeSupplies"] = "HomeSupplies";
      AssetTransactionCategoryType2["Hotel"] = "Hotel";
      AssetTransactionCategoryType2["Income"] = "Income";
      AssetTransactionCategoryType2["InterestIncome"] = "InterestIncome";
      AssetTransactionCategoryType2["Internet"] = "Internet";
      AssetTransactionCategoryType2["Investments"] = "Investments";
      AssetTransactionCategoryType2["Kids"] = "Kids";
      AssetTransactionCategoryType2["KidsActivities"] = "KidsActivities";
      AssetTransactionCategoryType2["LateFee"] = "LateFee";
      AssetTransactionCategoryType2["Laundry"] = "Laundry";
      AssetTransactionCategoryType2["LawnGarden"] = "LawnGarden";
      AssetTransactionCategoryType2["Legal"] = "Legal";
      AssetTransactionCategoryType2["LifeInsurance"] = "LifeInsurance";
      AssetTransactionCategoryType2["LoanInsurance"] = "LoanInsurance";
      AssetTransactionCategoryType2["LoanPayment"] = "LoanPayment";
      AssetTransactionCategoryType2["Loans"] = "Loans";
      AssetTransactionCategoryType2["MobilePhone"] = "MobilePhone";
      AssetTransactionCategoryType2["MortgageRent"] = "MortgageRent";
      AssetTransactionCategoryType2["MoviesDvds"] = "MoviesDVDs";
      AssetTransactionCategoryType2["Music"] = "Music";
      AssetTransactionCategoryType2["NewspapersMagazines"] = "NewspapersMagazines";
      AssetTransactionCategoryType2["OfficeSupplies"] = "OfficeSupplies";
      AssetTransactionCategoryType2["Parking"] = "Parking";
      AssetTransactionCategoryType2["Paycheck"] = "Paycheck";
      AssetTransactionCategoryType2["PersonalCare"] = "PersonalCare";
      AssetTransactionCategoryType2["PetFoodSupplies"] = "PetFoodSupplies";
      AssetTransactionCategoryType2["PetGrooming"] = "PetGrooming";
      AssetTransactionCategoryType2["Pets"] = "Pets";
      AssetTransactionCategoryType2["Pharmacy"] = "Pharmacy";
      AssetTransactionCategoryType2["Printing"] = "Printing";
      AssetTransactionCategoryType2["PropertyTax"] = "Property Tax";
      AssetTransactionCategoryType2["PublicTransportation"] = "Public Transportation";
      AssetTransactionCategoryType2["Reimbursement"] = "Reimbursement";
      AssetTransactionCategoryType2["RentalCarTaxi"] = "RentalCarTaxi";
      AssetTransactionCategoryType2["Restaurants"] = "Restaurants";
      AssetTransactionCategoryType2["SalesTax"] = "SalesTax";
      AssetTransactionCategoryType2["ServiceParts"] = "ServiceParts";
      AssetTransactionCategoryType2["ServiceFee"] = "ServiceFee";
      AssetTransactionCategoryType2["Shipping"] = "Shipping";
      AssetTransactionCategoryType2["Shopping"] = "Shopping";
      AssetTransactionCategoryType2["SpaMassage"] = "SpaMassage";
      AssetTransactionCategoryType2["SportingGoods"] = "SportingGoods";
      AssetTransactionCategoryType2["Sports"] = "Sports";
      AssetTransactionCategoryType2["StateTax"] = "StateTax";
      AssetTransactionCategoryType2["StudentLoan"] = "Student Loan";
      AssetTransactionCategoryType2["Taxes"] = "Taxes";
      AssetTransactionCategoryType2["Television"] = "Television";
      AssetTransactionCategoryType2["Toys"] = "Toys";
      AssetTransactionCategoryType2["Transfer"] = "Transfer";
      AssetTransactionCategoryType2["Travel"] = "Travel";
      AssetTransactionCategoryType2["Tuition"] = "Tuition";
      AssetTransactionCategoryType2["Uncategorized"] = "Uncategorized";
      AssetTransactionCategoryType2["Utilities"] = "Utilities";
      AssetTransactionCategoryType2["Vacation"] = "Vacation";
      AssetTransactionCategoryType2["Veterinary"] = "Veterinary";
    })(AssetTransactionCategoryType = exports.AssetTransactionCategoryType || (exports.AssetTransactionCategoryType = {}));
    var AssetTransactionType;
    (function(AssetTransactionType2) {
      AssetTransactionType2["Credit"] = "Credit";
      AssetTransactionType2["Debit"] = "Debit";
    })(AssetTransactionType = exports.AssetTransactionType || (exports.AssetTransactionType = {}));
    var AssetType;
    (function(AssetType2) {
      AssetType2["CheckingAccount"] = "CheckingAccount";
      AssetType2["SavingsAccount"] = "SavingsAccount";
      AssetType2["Investment"] = "Investment";
      AssetType2["MoneyMarketFund"] = "MoneyMarketFund";
      AssetType2["Other"] = "Other";
    })(AssetType = exports.AssetType || (exports.AssetType = {}));
    var AuthUpdateTypes;
    (function(AuthUpdateTypes2) {
      AuthUpdateTypes2["AccountNumber"] = "ACCOUNT_NUMBER";
      AuthUpdateTypes2["RoutingNumber"] = "ROUTING_NUMBER";
    })(AuthUpdateTypes = exports.AuthUpdateTypes || (exports.AuthUpdateTypes = {}));
    var BalancePlusRiskLevel;
    (function(BalancePlusRiskLevel2) {
      BalancePlusRiskLevel2["High"] = "HIGH";
      BalancePlusRiskLevel2["MediumHigh"] = "MEDIUM_HIGH";
      BalancePlusRiskLevel2["Medium"] = "MEDIUM";
      BalancePlusRiskLevel2["MediumLow"] = "MEDIUM_LOW";
      BalancePlusRiskLevel2["Low"] = "LOW";
    })(BalancePlusRiskLevel = exports.BalancePlusRiskLevel || (exports.BalancePlusRiskLevel = {}));
    var BankIncomeCompleteResult;
    (function(BankIncomeCompleteResult2) {
      BankIncomeCompleteResult2["Success"] = "SUCCESS";
      BankIncomeCompleteResult2["Failure"] = "FAILURE";
    })(BankIncomeCompleteResult = exports.BankIncomeCompleteResult || (exports.BankIncomeCompleteResult = {}));
    var BankIncomeRefreshCompleteResult;
    (function(BankIncomeRefreshCompleteResult2) {
      BankIncomeRefreshCompleteResult2["Success"] = "SUCCESS";
      BankIncomeRefreshCompleteResult2["Failure"] = "FAILURE";
    })(BankIncomeRefreshCompleteResult = exports.BankIncomeRefreshCompleteResult || (exports.BankIncomeRefreshCompleteResult = {}));
    var BankTransferDirection;
    (function(BankTransferDirection2) {
      BankTransferDirection2["Outbound"] = "outbound";
      BankTransferDirection2["Inbound"] = "inbound";
      BankTransferDirection2["Null"] = "null";
    })(BankTransferDirection = exports.BankTransferDirection || (exports.BankTransferDirection = {}));
    var BankTransferEventListBankTransferType;
    (function(BankTransferEventListBankTransferType2) {
      BankTransferEventListBankTransferType2["Debit"] = "debit";
      BankTransferEventListBankTransferType2["Credit"] = "credit";
      BankTransferEventListBankTransferType2["Null"] = "null";
    })(BankTransferEventListBankTransferType = exports.BankTransferEventListBankTransferType || (exports.BankTransferEventListBankTransferType = {}));
    var BankTransferEventListDirection;
    (function(BankTransferEventListDirection2) {
      BankTransferEventListDirection2["Inbound"] = "inbound";
      BankTransferEventListDirection2["Outbound"] = "outbound";
      BankTransferEventListDirection2["Null"] = "null";
    })(BankTransferEventListDirection = exports.BankTransferEventListDirection || (exports.BankTransferEventListDirection = {}));
    var BankTransferEventType;
    (function(BankTransferEventType2) {
      BankTransferEventType2["Pending"] = "pending";
      BankTransferEventType2["Cancelled"] = "cancelled";
      BankTransferEventType2["Failed"] = "failed";
      BankTransferEventType2["Posted"] = "posted";
      BankTransferEventType2["Reversed"] = "reversed";
    })(BankTransferEventType = exports.BankTransferEventType || (exports.BankTransferEventType = {}));
    var BankTransferNetwork;
    (function(BankTransferNetwork2) {
      BankTransferNetwork2["Ach"] = "ach";
      BankTransferNetwork2["SameDayAch"] = "same-day-ach";
      BankTransferNetwork2["Wire"] = "wire";
    })(BankTransferNetwork = exports.BankTransferNetwork || (exports.BankTransferNetwork = {}));
    var BankTransferStatus;
    (function(BankTransferStatus2) {
      BankTransferStatus2["Pending"] = "pending";
      BankTransferStatus2["Posted"] = "posted";
      BankTransferStatus2["Cancelled"] = "cancelled";
      BankTransferStatus2["Failed"] = "failed";
      BankTransferStatus2["Reversed"] = "reversed";
    })(BankTransferStatus = exports.BankTransferStatus || (exports.BankTransferStatus = {}));
    var BankTransferType;
    (function(BankTransferType2) {
      BankTransferType2["Debit"] = "debit";
      BankTransferType2["Credit"] = "credit";
    })(BankTransferType = exports.BankTransferType || (exports.BankTransferType = {}));
    var BaseReportTransactionType;
    (function(BaseReportTransactionType2) {
      BaseReportTransactionType2["Digital"] = "digital";
      BaseReportTransactionType2["Place"] = "place";
      BaseReportTransactionType2["Special"] = "special";
      BaseReportTransactionType2["Unresolved"] = "unresolved";
    })(BaseReportTransactionType = exports.BaseReportTransactionType || (exports.BaseReportTransactionType = {}));
    var BaseReportWarningCode;
    (function(BaseReportWarningCode2) {
      BaseReportWarningCode2["OwnersUnavailable"] = "OWNERS_UNAVAILABLE";
      BaseReportWarningCode2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
    })(BaseReportWarningCode = exports.BaseReportWarningCode || (exports.BaseReportWarningCode = {}));
    var BeaconAccountRiskEvaluateEvaluationReason;
    (function(BeaconAccountRiskEvaluateEvaluationReason2) {
      BeaconAccountRiskEvaluateEvaluationReason2["Onboarding"] = "ONBOARDING";
      BeaconAccountRiskEvaluateEvaluationReason2["NewAccount"] = "NEW_ACCOUNT";
      BeaconAccountRiskEvaluateEvaluationReason2["InformationChange"] = "INFORMATION_CHANGE";
      BeaconAccountRiskEvaluateEvaluationReason2["DormantUser"] = "DORMANT_USER";
      BeaconAccountRiskEvaluateEvaluationReason2["Other"] = "OTHER";
    })(BeaconAccountRiskEvaluateEvaluationReason = exports.BeaconAccountRiskEvaluateEvaluationReason || (exports.BeaconAccountRiskEvaluateEvaluationReason = {}));
    var BeaconAuditTrailSource;
    (function(BeaconAuditTrailSource2) {
      BeaconAuditTrailSource2["Dashboard"] = "dashboard";
      BeaconAuditTrailSource2["Api"] = "api";
      BeaconAuditTrailSource2["System"] = "system";
      BeaconAuditTrailSource2["BulkImport"] = "bulk_import";
    })(BeaconAuditTrailSource = exports.BeaconAuditTrailSource || (exports.BeaconAuditTrailSource = {}));
    var BeaconMatchSummaryCode;
    (function(BeaconMatchSummaryCode2) {
      BeaconMatchSummaryCode2["Match"] = "match";
      BeaconMatchSummaryCode2["PartialMatch"] = "partial_match";
      BeaconMatchSummaryCode2["NoMatch"] = "no_match";
      BeaconMatchSummaryCode2["NoData"] = "no_data";
    })(BeaconMatchSummaryCode = exports.BeaconMatchSummaryCode || (exports.BeaconMatchSummaryCode = {}));
    var BeaconReportCreateType;
    (function(BeaconReportCreateType2) {
      BeaconReportCreateType2["FirstParty"] = "first_party";
      BeaconReportCreateType2["Stolen"] = "stolen";
      BeaconReportCreateType2["Synthetic"] = "synthetic";
      BeaconReportCreateType2["AccountTakeover"] = "account_takeover";
      BeaconReportCreateType2["DataBreach"] = "data_breach";
      BeaconReportCreateType2["Unknown"] = "unknown";
    })(BeaconReportCreateType = exports.BeaconReportCreateType || (exports.BeaconReportCreateType = {}));
    var BeaconReportType;
    (function(BeaconReportType2) {
      BeaconReportType2["FirstParty"] = "first_party";
      BeaconReportType2["Stolen"] = "stolen";
      BeaconReportType2["Synthetic"] = "synthetic";
      BeaconReportType2["AccountTakeover"] = "account_takeover";
      BeaconReportType2["DataBreach"] = "data_breach";
      BeaconReportType2["Unknown"] = "unknown";
    })(BeaconReportType = exports.BeaconReportType || (exports.BeaconReportType = {}));
    var BeaconUserStatus;
    (function(BeaconUserStatus2) {
      BeaconUserStatus2["Rejected"] = "rejected";
      BeaconUserStatus2["PendingReview"] = "pending_review";
      BeaconUserStatus2["Cleared"] = "cleared";
    })(BeaconUserStatus = exports.BeaconUserStatus || (exports.BeaconUserStatus = {}));
    var CashflowAttributesVersion;
    (function(CashflowAttributesVersion2) {
      CashflowAttributesVersion2["V10"] = "v1.0";
    })(CashflowAttributesVersion = exports.CashflowAttributesVersion || (exports.CashflowAttributesVersion = {}));
    var ConsumerDisputeCategory;
    (function(ConsumerDisputeCategory2) {
      ConsumerDisputeCategory2["Transaction"] = "TRANSACTION";
      ConsumerDisputeCategory2["Balance"] = "BALANCE";
      ConsumerDisputeCategory2["Identity"] = "IDENTITY";
      ConsumerDisputeCategory2["Other"] = "OTHER";
    })(ConsumerDisputeCategory = exports.ConsumerDisputeCategory || (exports.ConsumerDisputeCategory = {}));
    var ConsumerReportPermissiblePurpose;
    (function(ConsumerReportPermissiblePurpose2) {
      ConsumerReportPermissiblePurpose2["AccountReviewCredit"] = "ACCOUNT_REVIEW_CREDIT";
      ConsumerReportPermissiblePurpose2["AccountReviewNonCredit"] = "ACCOUNT_REVIEW_NON_CREDIT";
      ConsumerReportPermissiblePurpose2["Employment"] = "EMPLOYMENT";
      ConsumerReportPermissiblePurpose2["ExtensionOfCredit"] = "EXTENSION_OF_CREDIT";
      ConsumerReportPermissiblePurpose2["LegitimateBusinessNeedTenantScreening"] = "LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING";
      ConsumerReportPermissiblePurpose2["LegitimateBusinessNeedOther"] = "LEGITIMATE_BUSINESS_NEED_OTHER";
      ConsumerReportPermissiblePurpose2["WrittenInstructionPrequalification"] = "WRITTEN_INSTRUCTION_PREQUALIFICATION";
      ConsumerReportPermissiblePurpose2["WrittenInstructionOther"] = "WRITTEN_INSTRUCTION_OTHER";
    })(ConsumerReportPermissiblePurpose = exports.ConsumerReportPermissiblePurpose || (exports.ConsumerReportPermissiblePurpose = {}));
    var CounterpartyType;
    (function(CounterpartyType2) {
      CounterpartyType2["Merchant"] = "merchant";
      CounterpartyType2["FinancialInstitution"] = "financial_institution";
      CounterpartyType2["PaymentApp"] = "payment_app";
      CounterpartyType2["Marketplace"] = "marketplace";
      CounterpartyType2["PaymentTerminal"] = "payment_terminal";
      CounterpartyType2["IncomeSource"] = "income_source";
    })(CounterpartyType = exports.CounterpartyType || (exports.CounterpartyType = {}));
    var CountryCode;
    (function(CountryCode2) {
      CountryCode2["Us"] = "US";
      CountryCode2["Gb"] = "GB";
      CountryCode2["Es"] = "ES";
      CountryCode2["Nl"] = "NL";
      CountryCode2["Fr"] = "FR";
      CountryCode2["Ie"] = "IE";
      CountryCode2["Ca"] = "CA";
      CountryCode2["De"] = "DE";
      CountryCode2["It"] = "IT";
      CountryCode2["Pl"] = "PL";
      CountryCode2["Dk"] = "DK";
      CountryCode2["No"] = "NO";
      CountryCode2["Se"] = "SE";
      CountryCode2["Ee"] = "EE";
      CountryCode2["Lt"] = "LT";
      CountryCode2["Lv"] = "LV";
      CountryCode2["Pt"] = "PT";
      CountryCode2["Be"] = "BE";
    })(CountryCode = exports.CountryCode || (exports.CountryCode = {}));
    var CraBankIncomeBonusType;
    (function(CraBankIncomeBonusType2) {
      CraBankIncomeBonusType2["BonusIncluded"] = "BONUS_INCLUDED";
      CraBankIncomeBonusType2["BonusOnly"] = "BONUS_ONLY";
      CraBankIncomeBonusType2["Null"] = "null";
    })(CraBankIncomeBonusType = exports.CraBankIncomeBonusType || (exports.CraBankIncomeBonusType = {}));
    var CraBankIncomeCompleteResult;
    (function(CraBankIncomeCompleteResult2) {
      CraBankIncomeCompleteResult2["Success"] = "SUCCESS";
      CraBankIncomeCompleteResult2["Failure"] = "FAILURE";
    })(CraBankIncomeCompleteResult = exports.CraBankIncomeCompleteResult || (exports.CraBankIncomeCompleteResult = {}));
    var CraBankIncomeWarningCode;
    (function(CraBankIncomeWarningCode2) {
      CraBankIncomeWarningCode2["IdentityUnavailable"] = "IDENTITY_UNAVAILABLE";
      CraBankIncomeWarningCode2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
      CraBankIncomeWarningCode2["ReportDeleted"] = "REPORT_DELETED";
      CraBankIncomeWarningCode2["DataUnavailable"] = "DATA_UNAVAILABLE";
    })(CraBankIncomeWarningCode = exports.CraBankIncomeWarningCode || (exports.CraBankIncomeWarningCode = {}));
    var CraCheckReportProduct;
    (function(CraCheckReportProduct2) {
      CraCheckReportProduct2["BaseReport"] = "cra_base_report";
      CraCheckReportProduct2["IncomeInsights"] = "cra_income_insights";
      CraCheckReportProduct2["PartnerInsights"] = "cra_partner_insights";
      CraCheckReportProduct2["NetworkInsights"] = "cra_network_insights";
    })(CraCheckReportProduct = exports.CraCheckReportProduct || (exports.CraCheckReportProduct = {}));
    var CraLoanApplicationDecision;
    (function(CraLoanApplicationDecision2) {
      CraLoanApplicationDecision2["Approved"] = "APPROVED";
      CraLoanApplicationDecision2["Declined"] = "DECLINED";
      CraLoanApplicationDecision2["Other"] = "OTHER";
    })(CraLoanApplicationDecision = exports.CraLoanApplicationDecision || (exports.CraLoanApplicationDecision = {}));
    var CraLoanPaymentSchedule;
    (function(CraLoanPaymentSchedule2) {
      CraLoanPaymentSchedule2["Daily"] = "DAILY";
      CraLoanPaymentSchedule2["Weekly"] = "WEEKLY";
      CraLoanPaymentSchedule2["Biweekly"] = "BIWEEKLY";
      CraLoanPaymentSchedule2["Monthly"] = "MONTHLY";
      CraLoanPaymentSchedule2["Quarterly"] = "QUARTERLY";
      CraLoanPaymentSchedule2["Annually"] = "ANNUALLY";
      CraLoanPaymentSchedule2["Other"] = "OTHER";
    })(CraLoanPaymentSchedule = exports.CraLoanPaymentSchedule || (exports.CraLoanPaymentSchedule = {}));
    var CraLoanStatus;
    (function(CraLoanStatus2) {
      CraLoanStatus2["Approved"] = "APPROVED";
      CraLoanStatus2["Declined"] = "DECLINED";
      CraLoanStatus2["Booked"] = "BOOKED";
      CraLoanStatus2["Current"] = "CURRENT";
      CraLoanStatus2["Delinquent"] = "DELINQUENT";
      CraLoanStatus2["Default"] = "DEFAULT";
      CraLoanStatus2["ChargedOff"] = "CHARGED_OFF";
      CraLoanStatus2["Transferred"] = "TRANSFERRED";
      CraLoanStatus2["PaidOff"] = "PAID_OFF";
      CraLoanStatus2["Other"] = "OTHER";
    })(CraLoanStatus = exports.CraLoanStatus || (exports.CraLoanStatus = {}));
    var CraLoanType;
    (function(CraLoanType2) {
      CraLoanType2["Personal"] = "PERSONAL";
      CraLoanType2["CreditCard"] = "CREDIT_CARD";
      CraLoanType2["Business"] = "BUSINESS";
      CraLoanType2["Mortgage"] = "MORTGAGE";
      CraLoanType2["Auto"] = "AUTO";
      CraLoanType2["Payday"] = "PAYDAY";
      CraLoanType2["Student"] = "STUDENT";
      CraLoanType2["HomeEquity"] = "HOME_EQUITY";
      CraLoanType2["Other"] = "OTHER";
    })(CraLoanType = exports.CraLoanType || (exports.CraLoanType = {}));
    var CraPDFAddOns;
    (function(CraPDFAddOns2) {
      CraPDFAddOns2["CraIncomeInsights"] = "cra_income_insights";
    })(CraPDFAddOns = exports.CraPDFAddOns || (exports.CraPDFAddOns = {}));
    var CreditACHClass;
    (function(CreditACHClass2) {
      CreditACHClass2["Ccd"] = "ccd";
      CreditACHClass2["Ppd"] = "ppd";
      CreditACHClass2["Web"] = "web";
    })(CreditACHClass = exports.CreditACHClass || (exports.CreditACHClass = {}));
    var CreditAccountSubtype;
    (function(CreditAccountSubtype2) {
      CreditAccountSubtype2["CreditCard"] = "credit card";
      CreditAccountSubtype2["Paypal"] = "paypal";
      CreditAccountSubtype2["All"] = "all";
    })(CreditAccountSubtype = exports.CreditAccountSubtype || (exports.CreditAccountSubtype = {}));
    var CreditBankEmploymentWarningType;
    (function(CreditBankEmploymentWarningType2) {
      CreditBankEmploymentWarningType2["BankEmploymentWarning"] = "BANK_EMPLOYMENT_WARNING";
    })(CreditBankEmploymentWarningType = exports.CreditBankEmploymentWarningType || (exports.CreditBankEmploymentWarningType = {}));
    var CreditBankIncomeAccountType;
    (function(CreditBankIncomeAccountType2) {
      CreditBankIncomeAccountType2["Depository"] = "depository";
    })(CreditBankIncomeAccountType = exports.CreditBankIncomeAccountType || (exports.CreditBankIncomeAccountType = {}));
    var CreditBankIncomeCategory;
    (function(CreditBankIncomeCategory2) {
      CreditBankIncomeCategory2["Salary"] = "SALARY";
      CreditBankIncomeCategory2["Unemployment"] = "UNEMPLOYMENT";
      CreditBankIncomeCategory2["Cash"] = "CASH";
      CreditBankIncomeCategory2["GigEconomy"] = "GIG_ECONOMY";
      CreditBankIncomeCategory2["Rental"] = "RENTAL";
      CreditBankIncomeCategory2["ChildSupport"] = "CHILD_SUPPORT";
      CreditBankIncomeCategory2["Military"] = "MILITARY";
      CreditBankIncomeCategory2["Retirement"] = "RETIREMENT";
      CreditBankIncomeCategory2["LongTermDisability"] = "LONG_TERM_DISABILITY";
      CreditBankIncomeCategory2["BankInterest"] = "BANK_INTEREST";
      CreditBankIncomeCategory2["CashDeposit"] = "CASH_DEPOSIT";
      CreditBankIncomeCategory2["TransferFromApplication"] = "TRANSFER_FROM_APPLICATION";
      CreditBankIncomeCategory2["TaxRefund"] = "TAX_REFUND";
      CreditBankIncomeCategory2["BenefitOther"] = "BENEFIT_OTHER";
      CreditBankIncomeCategory2["Other"] = "OTHER";
    })(CreditBankIncomeCategory = exports.CreditBankIncomeCategory || (exports.CreditBankIncomeCategory = {}));
    var CreditBankIncomeErrorType;
    (function(CreditBankIncomeErrorType2) {
      CreditBankIncomeErrorType2["InternalServerError"] = "INTERNAL_SERVER_ERROR";
      CreditBankIncomeErrorType2["InsufficientCredentials"] = "INSUFFICIENT_CREDENTIALS";
      CreditBankIncomeErrorType2["ItemLocked"] = "ITEM_LOCKED";
      CreditBankIncomeErrorType2["UserSetupRequired"] = "USER_SETUP_REQUIRED";
      CreditBankIncomeErrorType2["CountryNotSupported"] = "COUNTRY_NOT_SUPPORTED";
      CreditBankIncomeErrorType2["InstitutionDown"] = "INSTITUTION_DOWN";
      CreditBankIncomeErrorType2["InstitutionNoLongerSupported"] = "INSTITUTION_NO_LONGER_SUPPORTED";
      CreditBankIncomeErrorType2["InstitutionNotResponding"] = "INSTITUTION_NOT_RESPONDING";
      CreditBankIncomeErrorType2["InvalidCredentials"] = "INVALID_CREDENTIALS";
      CreditBankIncomeErrorType2["InvalidMfa"] = "INVALID_MFA";
      CreditBankIncomeErrorType2["InvalidSendMethod"] = "INVALID_SEND_METHOD";
      CreditBankIncomeErrorType2["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
      CreditBankIncomeErrorType2["MfaNotSupported"] = "MFA_NOT_SUPPORTED";
      CreditBankIncomeErrorType2["NoAccounts"] = "NO_ACCOUNTS";
      CreditBankIncomeErrorType2["ItemNotSupported"] = "ITEM_NOT_SUPPORTED";
      CreditBankIncomeErrorType2["AccessNotGranted"] = "ACCESS_NOT_GRANTED";
    })(CreditBankIncomeErrorType = exports.CreditBankIncomeErrorType || (exports.CreditBankIncomeErrorType = {}));
    var CreditBankIncomePayFrequency;
    (function(CreditBankIncomePayFrequency2) {
      CreditBankIncomePayFrequency2["Weekly"] = "WEEKLY";
      CreditBankIncomePayFrequency2["Biweekly"] = "BIWEEKLY";
      CreditBankIncomePayFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      CreditBankIncomePayFrequency2["Monthly"] = "MONTHLY";
      CreditBankIncomePayFrequency2["Daily"] = "DAILY";
      CreditBankIncomePayFrequency2["Unknown"] = "UNKNOWN";
    })(CreditBankIncomePayFrequency = exports.CreditBankIncomePayFrequency || (exports.CreditBankIncomePayFrequency = {}));
    var CreditBankIncomeWarningCode;
    (function(CreditBankIncomeWarningCode2) {
      CreditBankIncomeWarningCode2["IdentityUnavailable"] = "IDENTITY_UNAVAILABLE";
      CreditBankIncomeWarningCode2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
      CreditBankIncomeWarningCode2["ItemUnapproved"] = "ITEM_UNAPPROVED";
      CreditBankIncomeWarningCode2["ReportDeleted"] = "REPORT_DELETED";
      CreditBankIncomeWarningCode2["DataUnavailable"] = "DATA_UNAVAILABLE";
    })(CreditBankIncomeWarningCode = exports.CreditBankIncomeWarningCode || (exports.CreditBankIncomeWarningCode = {}));
    var CreditBankIncomeWarningType;
    (function(CreditBankIncomeWarningType2) {
      CreditBankIncomeWarningType2["BankIncomeWarning"] = "BANK_INCOME_WARNING";
    })(CreditBankIncomeWarningType = exports.CreditBankIncomeWarningType || (exports.CreditBankIncomeWarningType = {}));
    var CreditPayStubPayBasisType;
    (function(CreditPayStubPayBasisType2) {
      CreditPayStubPayBasisType2["Salary"] = "SALARY";
      CreditPayStubPayBasisType2["Hourly"] = "HOURLY";
      CreditPayStubPayBasisType2["Commission"] = "COMMISSION";
    })(CreditPayStubPayBasisType = exports.CreditPayStubPayBasisType || (exports.CreditPayStubPayBasisType = {}));
    var CreditSessionBankEmploymentStatus;
    (function(CreditSessionBankEmploymentStatus2) {
      CreditSessionBankEmploymentStatus2["Approved"] = "APPROVED";
      CreditSessionBankEmploymentStatus2["NoEmployersFound"] = "NO_EMPLOYERS_FOUND";
      CreditSessionBankEmploymentStatus2["EmployerNotListed"] = "EMPLOYER_NOT_LISTED";
    })(CreditSessionBankEmploymentStatus = exports.CreditSessionBankEmploymentStatus || (exports.CreditSessionBankEmploymentStatus = {}));
    var CreditSessionBankIncomeStatus;
    (function(CreditSessionBankIncomeStatus2) {
      CreditSessionBankIncomeStatus2["Approved"] = "APPROVED";
      CreditSessionBankIncomeStatus2["NoDepositsFound"] = "NO_DEPOSITS_FOUND";
      CreditSessionBankIncomeStatus2["UserReportedNoIncome"] = "USER_REPORTED_NO_INCOME";
    })(CreditSessionBankIncomeStatus = exports.CreditSessionBankIncomeStatus || (exports.CreditSessionBankIncomeStatus = {}));
    var DashboardUserStatus;
    (function(DashboardUserStatus2) {
      DashboardUserStatus2["Invited"] = "invited";
      DashboardUserStatus2["Active"] = "active";
      DashboardUserStatus2["Deactivated"] = "deactivated";
    })(DashboardUserStatus = exports.DashboardUserStatus || (exports.DashboardUserStatus = {}));
    var DepositSwitchAltCreateRequestCountryCodeEnum;
    (function(DepositSwitchAltCreateRequestCountryCodeEnum2) {
      DepositSwitchAltCreateRequestCountryCodeEnum2["Us"] = "US";
      DepositSwitchAltCreateRequestCountryCodeEnum2["Ca"] = "CA";
    })(DepositSwitchAltCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum || (exports.DepositSwitchAltCreateRequestCountryCodeEnum = {}));
    var DepositSwitchCreateRequestCountryCodeEnum;
    (function(DepositSwitchCreateRequestCountryCodeEnum2) {
      DepositSwitchCreateRequestCountryCodeEnum2["Us"] = "US";
      DepositSwitchCreateRequestCountryCodeEnum2["Ca"] = "CA";
    })(DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchCreateRequestCountryCodeEnum || (exports.DepositSwitchCreateRequestCountryCodeEnum = {}));
    var DepositSwitchGetResponseStateEnum;
    (function(DepositSwitchGetResponseStateEnum2) {
      DepositSwitchGetResponseStateEnum2["Initialized"] = "initialized";
      DepositSwitchGetResponseStateEnum2["Processing"] = "processing";
      DepositSwitchGetResponseStateEnum2["Completed"] = "completed";
      DepositSwitchGetResponseStateEnum2["Error"] = "error";
    })(DepositSwitchGetResponseStateEnum = exports.DepositSwitchGetResponseStateEnum || (exports.DepositSwitchGetResponseStateEnum = {}));
    var DepositSwitchGetResponseSwitchMethodEnum;
    (function(DepositSwitchGetResponseSwitchMethodEnum2) {
      DepositSwitchGetResponseSwitchMethodEnum2["Instant"] = "instant";
      DepositSwitchGetResponseSwitchMethodEnum2["Mail"] = "mail";
      DepositSwitchGetResponseSwitchMethodEnum2["Pdf"] = "pdf";
      DepositSwitchGetResponseSwitchMethodEnum2["Null"] = "null";
    })(DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseSwitchMethodEnum || (exports.DepositSwitchGetResponseSwitchMethodEnum = {}));
    var DepositSwitchTargetAccountAccountSubtypeEnum;
    (function(DepositSwitchTargetAccountAccountSubtypeEnum2) {
      DepositSwitchTargetAccountAccountSubtypeEnum2["Checking"] = "checking";
      DepositSwitchTargetAccountAccountSubtypeEnum2["Savings"] = "savings";
    })(DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchTargetAccountAccountSubtypeEnum || (exports.DepositSwitchTargetAccountAccountSubtypeEnum = {}));
    var DepositoryAccountSubtype;
    (function(DepositoryAccountSubtype2) {
      DepositoryAccountSubtype2["Checking"] = "checking";
      DepositoryAccountSubtype2["Savings"] = "savings";
      DepositoryAccountSubtype2["Hsa"] = "hsa";
      DepositoryAccountSubtype2["Cd"] = "cd";
      DepositoryAccountSubtype2["MoneyMarket"] = "money market";
      DepositoryAccountSubtype2["Paypal"] = "paypal";
      DepositoryAccountSubtype2["Prepaid"] = "prepaid";
      DepositoryAccountSubtype2["CashManagement"] = "cash management";
      DepositoryAccountSubtype2["Ebt"] = "ebt";
      DepositoryAccountSubtype2["All"] = "all";
    })(DepositoryAccountSubtype = exports.DepositoryAccountSubtype || (exports.DepositoryAccountSubtype = {}));
    var DocType;
    (function(DocType2) {
      DocType2["Unknown"] = "UNKNOWN";
      DocType2["DocumentTypePaystub"] = "DOCUMENT_TYPE_PAYSTUB";
      DocType2["DocumentTypeBankStatement"] = "DOCUMENT_TYPE_BANK_STATEMENT";
      DocType2["DocumentTypeUsTaxW2"] = "DOCUMENT_TYPE_US_TAX_W2";
      DocType2["DocumentTypeUsMilitaryEras"] = "DOCUMENT_TYPE_US_MILITARY_ERAS";
      DocType2["DocumentTypeUsMilitaryLes"] = "DOCUMENT_TYPE_US_MILITARY_LES";
      DocType2["DocumentTypeUsMilitaryCles"] = "DOCUMENT_TYPE_US_MILITARY_CLES";
      DocType2["DocumentTypeGig"] = "DOCUMENT_TYPE_GIG";
      DocType2["DocumentTypeNone"] = "DOCUMENT_TYPE_NONE";
      DocType2["DocumentTypeUsTax1099Misc"] = "DOCUMENT_TYPE_US_TAX_1099_MISC";
      DocType2["DocumentTypeUsTax1099K"] = "DOCUMENT_TYPE_US_TAX_1099_K";
      DocType2["DocumentTypePlaidGeneratedPaystubPdf"] = "DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF";
    })(DocType = exports.DocType || (exports.DocType = {}));
    var DocumentAuthenticityMatchCode;
    (function(DocumentAuthenticityMatchCode2) {
      DocumentAuthenticityMatchCode2["Match"] = "match";
      DocumentAuthenticityMatchCode2["PartialMatch"] = "partial_match";
      DocumentAuthenticityMatchCode2["NoMatch"] = "no_match";
      DocumentAuthenticityMatchCode2["NoData"] = "no_data";
    })(DocumentAuthenticityMatchCode = exports.DocumentAuthenticityMatchCode || (exports.DocumentAuthenticityMatchCode = {}));
    var DocumentDateOfBirthMatchCode;
    (function(DocumentDateOfBirthMatchCode2) {
      DocumentDateOfBirthMatchCode2["Match"] = "match";
      DocumentDateOfBirthMatchCode2["PartialMatch"] = "partial_match";
      DocumentDateOfBirthMatchCode2["NoMatch"] = "no_match";
      DocumentDateOfBirthMatchCode2["NoData"] = "no_data";
    })(DocumentDateOfBirthMatchCode = exports.DocumentDateOfBirthMatchCode || (exports.DocumentDateOfBirthMatchCode = {}));
    var DocumentNameMatchCode;
    (function(DocumentNameMatchCode2) {
      DocumentNameMatchCode2["Match"] = "match";
      DocumentNameMatchCode2["PartialMatch"] = "partial_match";
      DocumentNameMatchCode2["NoMatch"] = "no_match";
      DocumentNameMatchCode2["NoData"] = "no_data";
    })(DocumentNameMatchCode = exports.DocumentNameMatchCode || (exports.DocumentNameMatchCode = {}));
    var DocumentStatus;
    (function(DocumentStatus2) {
      DocumentStatus2["Success"] = "success";
      DocumentStatus2["Failed"] = "failed";
      DocumentStatus2["ManuallyApproved"] = "manually_approved";
    })(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
    var EarningsBreakdownCanonicalDescription;
    (function(EarningsBreakdownCanonicalDescription2) {
      EarningsBreakdownCanonicalDescription2["Bonus"] = "BONUS";
      EarningsBreakdownCanonicalDescription2["Commission"] = "COMMISSION";
      EarningsBreakdownCanonicalDescription2["Overtime"] = "OVERTIME";
      EarningsBreakdownCanonicalDescription2["PaidTimeOff"] = "PAID TIME OFF";
      EarningsBreakdownCanonicalDescription2["RegularPay"] = "REGULAR PAY";
      EarningsBreakdownCanonicalDescription2["Vacation"] = "VACATION";
      EarningsBreakdownCanonicalDescription2["BasicAllowanceHousing"] = "BASIC ALLOWANCE HOUSING";
      EarningsBreakdownCanonicalDescription2["BasicAllowanceSubsistence"] = "BASIC ALLOWANCE SUBSISTENCE";
      EarningsBreakdownCanonicalDescription2["Other"] = "OTHER";
      EarningsBreakdownCanonicalDescription2["Null"] = "null";
    })(EarningsBreakdownCanonicalDescription = exports.EarningsBreakdownCanonicalDescription || (exports.EarningsBreakdownCanonicalDescription = {}));
    var EmailTypeEnum;
    (function(EmailTypeEnum2) {
      EmailTypeEnum2["Primary"] = "primary";
      EmailTypeEnum2["Secondary"] = "secondary";
      EmailTypeEnum2["Other"] = "other";
    })(EmailTypeEnum = exports.EmailTypeEnum || (exports.EmailTypeEnum = {}));
    var EmploymentSourceType;
    (function(EmploymentSourceType2) {
      EmploymentSourceType2["Bank"] = "bank";
      EmploymentSourceType2["Payroll"] = "payroll";
    })(EmploymentSourceType = exports.EmploymentSourceType || (exports.EmploymentSourceType = {}));
    var EmploymentVerificationStatus;
    (function(EmploymentVerificationStatus2) {
      EmploymentVerificationStatus2["EmploymentStatusActive"] = "EMPLOYMENT_STATUS_ACTIVE";
      EmploymentVerificationStatus2["EmploymentStatusInactive"] = "EMPLOYMENT_STATUS_INACTIVE";
      EmploymentVerificationStatus2["Null"] = "null";
    })(EmploymentVerificationStatus = exports.EmploymentVerificationStatus || (exports.EmploymentVerificationStatus = {}));
    var EnrichTransactionDirection;
    (function(EnrichTransactionDirection2) {
      EnrichTransactionDirection2["Inflow"] = "INFLOW";
      EnrichTransactionDirection2["Outflow"] = "OUTFLOW";
    })(EnrichTransactionDirection = exports.EnrichTransactionDirection || (exports.EnrichTransactionDirection = {}));
    var EntityDocumentType;
    (function(EntityDocumentType2) {
      EntityDocumentType2["Bik"] = "bik";
      EntityDocumentType2["BusinessNumber"] = "business_number";
      EntityDocumentType2["Imo"] = "imo";
      EntityDocumentType2["Other"] = "other";
      EntityDocumentType2["Swift"] = "swift";
      EntityDocumentType2["TaxId"] = "tax_id";
    })(EntityDocumentType = exports.EntityDocumentType || (exports.EntityDocumentType = {}));
    var EntityWatchlistCode;
    (function(EntityWatchlistCode2) {
      EntityWatchlistCode2["CaCon"] = "CA_CON";
      EntityWatchlistCode2["EuCon"] = "EU_CON";
      EntityWatchlistCode2["IzSoe"] = "IZ_SOE";
      EntityWatchlistCode2["IzUnc"] = "IZ_UNC";
      EntityWatchlistCode2["IzWbk"] = "IZ_WBK";
      EntityWatchlistCode2["UsCap"] = "US_CAP";
      EntityWatchlistCode2["UsFse"] = "US_FSE";
      EntityWatchlistCode2["UsMbs"] = "US_MBS";
      EntityWatchlistCode2["UsSdn"] = "US_SDN";
      EntityWatchlistCode2["UsSsi"] = "US_SSI";
      EntityWatchlistCode2["UsCmc"] = "US_CMC";
      EntityWatchlistCode2["UsUvl"] = "US_UVL";
      EntityWatchlistCode2["AuCon"] = "AU_CON";
      EntityWatchlistCode2["UkHmc"] = "UK_HMC";
    })(EntityWatchlistCode = exports.EntityWatchlistCode || (exports.EntityWatchlistCode = {}));
    var ExpirationDate;
    (function(ExpirationDate2) {
      ExpirationDate2["NotExpired"] = "not_expired";
      ExpirationDate2["Expired"] = "expired";
      ExpirationDate2["NoData"] = "no_data";
    })(ExpirationDate = exports.ExpirationDate || (exports.ExpirationDate = {}));
    var FDXContentTypes;
    (function(FDXContentTypes2) {
      FDXContentTypes2["ApplicationPdf"] = "application/pdf";
      FDXContentTypes2["ImageGif"] = "image/gif";
      FDXContentTypes2["ImageJpeg"] = "image/jpeg";
      FDXContentTypes2["ImageTiff"] = "image/tiff";
      FDXContentTypes2["ImagePng"] = "image/png";
      FDXContentTypes2["ApplicationJson"] = "application/json";
    })(FDXContentTypes = exports.FDXContentTypes || (exports.FDXContentTypes = {}));
    var FDXHateoasLinkAction;
    (function(FDXHateoasLinkAction2) {
      FDXHateoasLinkAction2["Get"] = "GET";
      FDXHateoasLinkAction2["Post"] = "POST";
      FDXHateoasLinkAction2["Patch"] = "PATCH";
      FDXHateoasLinkAction2["Delete"] = "DELETE";
      FDXHateoasLinkAction2["Put"] = "PUT";
    })(FDXHateoasLinkAction = exports.FDXHateoasLinkAction || (exports.FDXHateoasLinkAction = {}));
    var FDXNotificationCategory;
    (function(FDXNotificationCategory2) {
      FDXNotificationCategory2["Security"] = "SECURITY";
      FDXNotificationCategory2["Maintenance"] = "MAINTENANCE";
      FDXNotificationCategory2["Fraud"] = "FRAUD";
      FDXNotificationCategory2["Consent"] = "CONSENT";
      FDXNotificationCategory2["NewData"] = "NEW_DATA";
    })(FDXNotificationCategory = exports.FDXNotificationCategory || (exports.FDXNotificationCategory = {}));
    var FDXNotificationPayloadIdType;
    (function(FDXNotificationPayloadIdType2) {
      FDXNotificationPayloadIdType2["Account"] = "ACCOUNT";
      FDXNotificationPayloadIdType2["Customer"] = "CUSTOMER";
      FDXNotificationPayloadIdType2["Party"] = "PARTY";
      FDXNotificationPayloadIdType2["Maintenance"] = "MAINTENANCE";
      FDXNotificationPayloadIdType2["Consent"] = "CONSENT";
    })(FDXNotificationPayloadIdType = exports.FDXNotificationPayloadIdType || (exports.FDXNotificationPayloadIdType = {}));
    var FDXNotificationPriority;
    (function(FDXNotificationPriority2) {
      FDXNotificationPriority2["High"] = "HIGH";
      FDXNotificationPriority2["Medium"] = "MEDIUM";
      FDXNotificationPriority2["Low"] = "LOW";
    })(FDXNotificationPriority = exports.FDXNotificationPriority || (exports.FDXNotificationPriority = {}));
    var FDXNotificationSeverity;
    (function(FDXNotificationSeverity2) {
      FDXNotificationSeverity2["Emergency"] = "EMERGENCY";
      FDXNotificationSeverity2["Alert"] = "ALERT";
      FDXNotificationSeverity2["Warning"] = "WARNING";
      FDXNotificationSeverity2["Notice"] = "NOTICE";
      FDXNotificationSeverity2["Info"] = "INFO";
    })(FDXNotificationSeverity = exports.FDXNotificationSeverity || (exports.FDXNotificationSeverity = {}));
    var FDXNotificationType;
    (function(FDXNotificationType2) {
      FDXNotificationType2["ConsentRevoked"] = "CONSENT_REVOKED";
      FDXNotificationType2["ConsentUpdated"] = "CONSENT_UPDATED";
      FDXNotificationType2["Custom"] = "CUSTOM";
      FDXNotificationType2["Service"] = "SERVICE";
      FDXNotificationType2["Balance"] = "BALANCE";
      FDXNotificationType2["PlannedOutage"] = "PLANNED_OUTAGE";
    })(FDXNotificationType = exports.FDXNotificationType || (exports.FDXNotificationType = {}));
    var FDXPartyRegistry;
    (function(FDXPartyRegistry2) {
      FDXPartyRegistry2["Fdx"] = "FDX";
      FDXPartyRegistry2["Gleif"] = "GLEIF";
      FDXPartyRegistry2["Icann"] = "ICANN";
      FDXPartyRegistry2["Private"] = "PRIVATE";
    })(FDXPartyRegistry = exports.FDXPartyRegistry || (exports.FDXPartyRegistry = {}));
    var FDXPartyType;
    (function(FDXPartyType2) {
      FDXPartyType2["DataAccessPlatform"] = "DATA_ACCESS_PLATFORM";
      FDXPartyType2["DataProvider"] = "DATA_PROVIDER";
      FDXPartyType2["DataRecipient"] = "DATA_RECIPIENT";
      FDXPartyType2["Individual"] = "INDIVIDUAL";
      FDXPartyType2["Merchant"] = "MERCHANT";
      FDXPartyType2["Vendor"] = "VENDOR";
    })(FDXPartyType = exports.FDXPartyType || (exports.FDXPartyType = {}));
    var Form1099Type;
    (function(Form1099Type2) {
      Form1099Type2["Unknown"] = "FORM_1099_TYPE_UNKNOWN";
      Form1099Type2["Misc"] = "FORM_1099_TYPE_MISC";
      Form1099Type2["K"] = "FORM_1099_TYPE_K";
    })(Form1099Type = exports.Form1099Type || (exports.Form1099Type = {}));
    var HiddenMatchSummaryCode;
    (function(HiddenMatchSummaryCode2) {
      HiddenMatchSummaryCode2["Match"] = "match";
      HiddenMatchSummaryCode2["PartialMatch"] = "partial_match";
      HiddenMatchSummaryCode2["NoMatch"] = "no_match";
      HiddenMatchSummaryCode2["NoData"] = "no_data";
      HiddenMatchSummaryCode2["NoInput"] = "no_input";
    })(HiddenMatchSummaryCode = exports.HiddenMatchSummaryCode || (exports.HiddenMatchSummaryCode = {}));
    var HostedLinkDeliveryMethod;
    (function(HostedLinkDeliveryMethod2) {
      HostedLinkDeliveryMethod2["Sms"] = "sms";
      HostedLinkDeliveryMethod2["Email"] = "email";
    })(HostedLinkDeliveryMethod = exports.HostedLinkDeliveryMethod || (exports.HostedLinkDeliveryMethod = {}));
    var IDNumberType;
    (function(IDNumberType2) {
      IDNumberType2["ArDni"] = "ar_dni";
      IDNumberType2["AuDriversLicense"] = "au_drivers_license";
      IDNumberType2["AuPassport"] = "au_passport";
      IDNumberType2["BrCpf"] = "br_cpf";
      IDNumberType2["CaSin"] = "ca_sin";
      IDNumberType2["ClRun"] = "cl_run";
      IDNumberType2["CnResidentCard"] = "cn_resident_card";
      IDNumberType2["CoNit"] = "co_nit";
      IDNumberType2["DkCpr"] = "dk_cpr";
      IDNumberType2["EgNationalId"] = "eg_national_id";
      IDNumberType2["EsDni"] = "es_dni";
      IDNumberType2["EsNie"] = "es_nie";
      IDNumberType2["HkHkid"] = "hk_hkid";
      IDNumberType2["InPan"] = "in_pan";
      IDNumberType2["ItCf"] = "it_cf";
      IDNumberType2["JoCivilId"] = "jo_civil_id";
      IDNumberType2["JpMyNumber"] = "jp_my_number";
      IDNumberType2["KeHudumaNamba"] = "ke_huduma_namba";
      IDNumberType2["KwCivilId"] = "kw_civil_id";
      IDNumberType2["MxCurp"] = "mx_curp";
      IDNumberType2["MxRfc"] = "mx_rfc";
      IDNumberType2["MyNric"] = "my_nric";
      IDNumberType2["NgNin"] = "ng_nin";
      IDNumberType2["NzDriversLicense"] = "nz_drivers_license";
      IDNumberType2["OmCivilId"] = "om_civil_id";
      IDNumberType2["PhPsn"] = "ph_psn";
      IDNumberType2["PlPesel"] = "pl_pesel";
      IDNumberType2["RoCnp"] = "ro_cnp";
      IDNumberType2["SaNationalId"] = "sa_national_id";
      IDNumberType2["SePin"] = "se_pin";
      IDNumberType2["SgNric"] = "sg_nric";
      IDNumberType2["TrTcKimlik"] = "tr_tc_kimlik";
      IDNumberType2["UsSsn"] = "us_ssn";
      IDNumberType2["UsSsnLast4"] = "us_ssn_last_4";
      IDNumberType2["ZaSmartId"] = "za_smart_id";
    })(IDNumberType = exports.IDNumberType || (exports.IDNumberType = {}));
    var ISOCurrencyCode;
    (function(ISOCurrencyCode2) {
      ISOCurrencyCode2["Usd"] = "USD";
    })(ISOCurrencyCode = exports.ISOCurrencyCode || (exports.ISOCurrencyCode = {}));
    var IdentityUpdateTypes;
    (function(IdentityUpdateTypes2) {
      IdentityUpdateTypes2["Phones"] = "PHONES";
      IdentityUpdateTypes2["Addresses"] = "ADDRESSES";
      IdentityUpdateTypes2["Emails"] = "EMAILS";
      IdentityUpdateTypes2["Names"] = "NAMES";
    })(IdentityUpdateTypes = exports.IdentityUpdateTypes || (exports.IdentityUpdateTypes = {}));
    var IdentityVerificationAutofillStatus;
    (function(IdentityVerificationAutofillStatus2) {
      IdentityVerificationAutofillStatus2["Success"] = "success";
      IdentityVerificationAutofillStatus2["Failed"] = "failed";
    })(IdentityVerificationAutofillStatus = exports.IdentityVerificationAutofillStatus || (exports.IdentityVerificationAutofillStatus = {}));
    var IdentityVerificationStatus;
    (function(IdentityVerificationStatus2) {
      IdentityVerificationStatus2["Active"] = "active";
      IdentityVerificationStatus2["Success"] = "success";
      IdentityVerificationStatus2["Failed"] = "failed";
      IdentityVerificationStatus2["Expired"] = "expired";
      IdentityVerificationStatus2["Canceled"] = "canceled";
      IdentityVerificationStatus2["PendingReview"] = "pending_review";
    })(IdentityVerificationStatus = exports.IdentityVerificationStatus || (exports.IdentityVerificationStatus = {}));
    var IdentityVerificationStepStatus;
    (function(IdentityVerificationStepStatus2) {
      IdentityVerificationStepStatus2["Success"] = "success";
      IdentityVerificationStepStatus2["Active"] = "active";
      IdentityVerificationStepStatus2["Failed"] = "failed";
      IdentityVerificationStepStatus2["WaitingForPrerequisite"] = "waiting_for_prerequisite";
      IdentityVerificationStepStatus2["NotApplicable"] = "not_applicable";
      IdentityVerificationStepStatus2["Skipped"] = "skipped";
      IdentityVerificationStepStatus2["Expired"] = "expired";
      IdentityVerificationStepStatus2["Canceled"] = "canceled";
      IdentityVerificationStepStatus2["PendingReview"] = "pending_review";
      IdentityVerificationStepStatus2["ManuallyApproved"] = "manually_approved";
      IdentityVerificationStepStatus2["ManuallyRejected"] = "manually_rejected";
    })(IdentityVerificationStepStatus = exports.IdentityVerificationStepStatus || (exports.IdentityVerificationStepStatus = {}));
    var ImageQuality;
    (function(ImageQuality2) {
      ImageQuality2["High"] = "high";
      ImageQuality2["Medium"] = "medium";
      ImageQuality2["Low"] = "low";
    })(ImageQuality = exports.ImageQuality || (exports.ImageQuality = {}));
    var IncidentUpdateStatusEnum;
    (function(IncidentUpdateStatusEnum2) {
      IncidentUpdateStatusEnum2["Investigating"] = "INVESTIGATING";
      IncidentUpdateStatusEnum2["Identified"] = "IDENTIFIED";
      IncidentUpdateStatusEnum2["Scheduled"] = "SCHEDULED";
      IncidentUpdateStatusEnum2["Resolved"] = "RESOLVED";
      IncidentUpdateStatusEnum2["Unknown"] = "UNKNOWN";
    })(IncidentUpdateStatusEnum = exports.IncidentUpdateStatusEnum || (exports.IncidentUpdateStatusEnum = {}));
    var IncomeBreakdownType;
    (function(IncomeBreakdownType2) {
      IncomeBreakdownType2["Bonus"] = "bonus";
      IncomeBreakdownType2["Overtime"] = "overtime";
      IncomeBreakdownType2["Regular"] = "regular";
      IncomeBreakdownType2["Null"] = "null";
    })(IncomeBreakdownType = exports.IncomeBreakdownType || (exports.IncomeBreakdownType = {}));
    var IncomeVerificationDocParsingConfig;
    (function(IncomeVerificationDocParsingConfig2) {
      IncomeVerificationDocParsingConfig2["Ocr"] = "ocr";
      IncomeVerificationDocParsingConfig2["RiskSignals"] = "risk_signals";
    })(IncomeVerificationDocParsingConfig = exports.IncomeVerificationDocParsingConfig || (exports.IncomeVerificationDocParsingConfig = {}));
    var IncomeVerificationPayrollFlowType;
    (function(IncomeVerificationPayrollFlowType2) {
      IncomeVerificationPayrollFlowType2["DigitalIncome"] = "payroll_digital_income";
      IncomeVerificationPayrollFlowType2["DocumentIncome"] = "payroll_document_income";
    })(IncomeVerificationPayrollFlowType = exports.IncomeVerificationPayrollFlowType || (exports.IncomeVerificationPayrollFlowType = {}));
    var IncomeVerificationPrecheckConfidence;
    (function(IncomeVerificationPrecheckConfidence2) {
      IncomeVerificationPrecheckConfidence2["High"] = "HIGH";
      IncomeVerificationPrecheckConfidence2["Low"] = "LOW";
      IncomeVerificationPrecheckConfidence2["Unknown"] = "UNKNOWN";
    })(IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPrecheckConfidence || (exports.IncomeVerificationPrecheckConfidence = {}));
    var IncomeVerificationSourceType;
    (function(IncomeVerificationSourceType2) {
      IncomeVerificationSourceType2["Bank"] = "bank";
      IncomeVerificationSourceType2["Payroll"] = "payroll";
    })(IncomeVerificationSourceType = exports.IncomeVerificationSourceType || (exports.IncomeVerificationSourceType = {}));
    var IndividualWatchlistCode;
    (function(IndividualWatchlistCode2) {
      IndividualWatchlistCode2["AuCon"] = "AU_CON";
      IndividualWatchlistCode2["CaCon"] = "CA_CON";
      IndividualWatchlistCode2["EuCon"] = "EU_CON";
      IndividualWatchlistCode2["IzCia"] = "IZ_CIA";
      IndividualWatchlistCode2["IzIpl"] = "IZ_IPL";
      IndividualWatchlistCode2["IzPep"] = "IZ_PEP";
      IndividualWatchlistCode2["IzUnc"] = "IZ_UNC";
      IndividualWatchlistCode2["IzWbk"] = "IZ_WBK";
      IndividualWatchlistCode2["UkHmc"] = "UK_HMC";
      IndividualWatchlistCode2["UsDpl"] = "US_DPL";
      IndividualWatchlistCode2["UsDtc"] = "US_DTC";
      IndividualWatchlistCode2["UsFbi"] = "US_FBI";
      IndividualWatchlistCode2["UsFse"] = "US_FSE";
      IndividualWatchlistCode2["UsIsn"] = "US_ISN";
      IndividualWatchlistCode2["UsMbs"] = "US_MBS";
      IndividualWatchlistCode2["UsPlc"] = "US_PLC";
      IndividualWatchlistCode2["UsSdn"] = "US_SDN";
      IndividualWatchlistCode2["UsSsi"] = "US_SSI";
      IndividualWatchlistCode2["SgSof"] = "SG_SOF";
      IndividualWatchlistCode2["TrTwl"] = "TR_TWL";
      IndividualWatchlistCode2["TrDfd"] = "TR_DFD";
      IndividualWatchlistCode2["TrFor"] = "TR_FOR";
      IndividualWatchlistCode2["TrWmd"] = "TR_WMD";
      IndividualWatchlistCode2["TrCmb"] = "TR_CMB";
    })(IndividualWatchlistCode = exports.IndividualWatchlistCode || (exports.IndividualWatchlistCode = {}));
    var InvestmentAccountSubtype;
    (function(InvestmentAccountSubtype2) {
      InvestmentAccountSubtype2["_529"] = "529";
      InvestmentAccountSubtype2["_401a"] = "401a";
      InvestmentAccountSubtype2["_401k"] = "401k";
      InvestmentAccountSubtype2["_403B"] = "403B";
      InvestmentAccountSubtype2["_457b"] = "457b";
      InvestmentAccountSubtype2["Brokerage"] = "brokerage";
      InvestmentAccountSubtype2["CashIsa"] = "cash isa";
      InvestmentAccountSubtype2["CryptoExchange"] = "crypto exchange";
      InvestmentAccountSubtype2["EducationSavingsAccount"] = "education savings account";
      InvestmentAccountSubtype2["FixedAnnuity"] = "fixed annuity";
      InvestmentAccountSubtype2["Gic"] = "gic";
      InvestmentAccountSubtype2["HealthReimbursementArrangement"] = "health reimbursement arrangement";
      InvestmentAccountSubtype2["Hsa"] = "hsa";
      InvestmentAccountSubtype2["Ira"] = "ira";
      InvestmentAccountSubtype2["Isa"] = "isa";
      InvestmentAccountSubtype2["Keogh"] = "keogh";
      InvestmentAccountSubtype2["Lif"] = "lif";
      InvestmentAccountSubtype2["LifeInsurance"] = "life insurance";
      InvestmentAccountSubtype2["Lira"] = "lira";
      InvestmentAccountSubtype2["Lrif"] = "lrif";
      InvestmentAccountSubtype2["Lrsp"] = "lrsp";
      InvestmentAccountSubtype2["MutualFund"] = "mutual fund";
      InvestmentAccountSubtype2["NonCustodialWallet"] = "non-custodial wallet";
      InvestmentAccountSubtype2["NonTaxableBrokerageAccount"] = "non-taxable brokerage account";
      InvestmentAccountSubtype2["Other"] = "other";
      InvestmentAccountSubtype2["OtherAnnuity"] = "other annuity";
      InvestmentAccountSubtype2["OtherInsurance"] = "other insurance";
      InvestmentAccountSubtype2["Pension"] = "pension";
      InvestmentAccountSubtype2["Prif"] = "prif";
      InvestmentAccountSubtype2["ProfitSharingPlan"] = "profit sharing plan";
      InvestmentAccountSubtype2["Qshr"] = "qshr";
      InvestmentAccountSubtype2["Rdsp"] = "rdsp";
      InvestmentAccountSubtype2["Resp"] = "resp";
      InvestmentAccountSubtype2["Retirement"] = "retirement";
      InvestmentAccountSubtype2["Rlif"] = "rlif";
      InvestmentAccountSubtype2["Roth"] = "roth";
      InvestmentAccountSubtype2["Roth401k"] = "roth 401k";
      InvestmentAccountSubtype2["Rrif"] = "rrif";
      InvestmentAccountSubtype2["Rrsp"] = "rrsp";
      InvestmentAccountSubtype2["Sarsep"] = "sarsep";
      InvestmentAccountSubtype2["SepIra"] = "sep ira";
      InvestmentAccountSubtype2["SimpleIra"] = "simple ira";
      InvestmentAccountSubtype2["Sipp"] = "sipp";
      InvestmentAccountSubtype2["StockPlan"] = "stock plan";
      InvestmentAccountSubtype2["Tfsa"] = "tfsa";
      InvestmentAccountSubtype2["Trust"] = "trust";
      InvestmentAccountSubtype2["Ugma"] = "ugma";
      InvestmentAccountSubtype2["Utma"] = "utma";
      InvestmentAccountSubtype2["VariableAnnuity"] = "variable annuity";
      InvestmentAccountSubtype2["All"] = "all";
    })(InvestmentAccountSubtype = exports.InvestmentAccountSubtype || (exports.InvestmentAccountSubtype = {}));
    var InvestmentTransactionSubtype;
    (function(InvestmentTransactionSubtype2) {
      InvestmentTransactionSubtype2["AccountFee"] = "account fee";
      InvestmentTransactionSubtype2["Adjustment"] = "adjustment";
      InvestmentTransactionSubtype2["Assignment"] = "assignment";
      InvestmentTransactionSubtype2["Buy"] = "buy";
      InvestmentTransactionSubtype2["BuyToCover"] = "buy to cover";
      InvestmentTransactionSubtype2["Contribution"] = "contribution";
      InvestmentTransactionSubtype2["Deposit"] = "deposit";
      InvestmentTransactionSubtype2["Distribution"] = "distribution";
      InvestmentTransactionSubtype2["Dividend"] = "dividend";
      InvestmentTransactionSubtype2["DividendReinvestment"] = "dividend reinvestment";
      InvestmentTransactionSubtype2["Exercise"] = "exercise";
      InvestmentTransactionSubtype2["Expire"] = "expire";
      InvestmentTransactionSubtype2["FundFee"] = "fund fee";
      InvestmentTransactionSubtype2["Interest"] = "interest";
      InvestmentTransactionSubtype2["InterestReceivable"] = "interest receivable";
      InvestmentTransactionSubtype2["InterestReinvestment"] = "interest reinvestment";
      InvestmentTransactionSubtype2["LegalFee"] = "legal fee";
      InvestmentTransactionSubtype2["LoanPayment"] = "loan payment";
      InvestmentTransactionSubtype2["LongTermCapitalGain"] = "long-term capital gain";
      InvestmentTransactionSubtype2["LongTermCapitalGainReinvestment"] = "long-term capital gain reinvestment";
      InvestmentTransactionSubtype2["ManagementFee"] = "management fee";
      InvestmentTransactionSubtype2["MarginExpense"] = "margin expense";
      InvestmentTransactionSubtype2["Merger"] = "merger";
      InvestmentTransactionSubtype2["MiscellaneousFee"] = "miscellaneous fee";
      InvestmentTransactionSubtype2["NonQualifiedDividend"] = "non-qualified dividend";
      InvestmentTransactionSubtype2["NonResidentTax"] = "non-resident tax";
      InvestmentTransactionSubtype2["PendingCredit"] = "pending credit";
      InvestmentTransactionSubtype2["PendingDebit"] = "pending debit";
      InvestmentTransactionSubtype2["QualifiedDividend"] = "qualified dividend";
      InvestmentTransactionSubtype2["Rebalance"] = "rebalance";
      InvestmentTransactionSubtype2["ReturnOfPrincipal"] = "return of principal";
      InvestmentTransactionSubtype2["Request"] = "request";
      InvestmentTransactionSubtype2["Sell"] = "sell";
      InvestmentTransactionSubtype2["SellShort"] = "sell short";
      InvestmentTransactionSubtype2["Send"] = "send";
      InvestmentTransactionSubtype2["ShortTermCapitalGain"] = "short-term capital gain";
      InvestmentTransactionSubtype2["ShortTermCapitalGainReinvestment"] = "short-term capital gain reinvestment";
      InvestmentTransactionSubtype2["SpinOff"] = "spin off";
      InvestmentTransactionSubtype2["Split"] = "split";
      InvestmentTransactionSubtype2["StockDistribution"] = "stock distribution";
      InvestmentTransactionSubtype2["Tax"] = "tax";
      InvestmentTransactionSubtype2["TaxWithheld"] = "tax withheld";
      InvestmentTransactionSubtype2["Trade"] = "trade";
      InvestmentTransactionSubtype2["Transfer"] = "transfer";
      InvestmentTransactionSubtype2["TransferFee"] = "transfer fee";
      InvestmentTransactionSubtype2["TrustFee"] = "trust fee";
      InvestmentTransactionSubtype2["UnqualifiedGain"] = "unqualified gain";
      InvestmentTransactionSubtype2["Withdrawal"] = "withdrawal";
    })(InvestmentTransactionSubtype = exports.InvestmentTransactionSubtype || (exports.InvestmentTransactionSubtype = {}));
    var InvestmentTransactionType;
    (function(InvestmentTransactionType2) {
      InvestmentTransactionType2["Buy"] = "buy";
      InvestmentTransactionType2["Sell"] = "sell";
      InvestmentTransactionType2["Cancel"] = "cancel";
      InvestmentTransactionType2["Cash"] = "cash";
      InvestmentTransactionType2["Fee"] = "fee";
      InvestmentTransactionType2["Transfer"] = "transfer";
    })(InvestmentTransactionType = exports.InvestmentTransactionType || (exports.InvestmentTransactionType = {}));
    var IssuingCountry;
    (function(IssuingCountry2) {
      IssuingCountry2["Match"] = "match";
      IssuingCountry2["NoMatch"] = "no_match";
    })(IssuingCountry = exports.IssuingCountry || (exports.IssuingCountry = {}));
    var ItemUpdateTypeEnum;
    (function(ItemUpdateTypeEnum2) {
      ItemUpdateTypeEnum2["Background"] = "background";
      ItemUpdateTypeEnum2["UserPresentRequired"] = "user_present_required";
    })(ItemUpdateTypeEnum = exports.ItemUpdateTypeEnum || (exports.ItemUpdateTypeEnum = {}));
    var LinkDeliveryDeliveryMethod;
    (function(LinkDeliveryDeliveryMethod2) {
      LinkDeliveryDeliveryMethod2["Sms"] = "SMS";
      LinkDeliveryDeliveryMethod2["Email"] = "EMAIL";
    })(LinkDeliveryDeliveryMethod = exports.LinkDeliveryDeliveryMethod || (exports.LinkDeliveryDeliveryMethod = {}));
    var LinkDeliverySessionStatus;
    (function(LinkDeliverySessionStatus2) {
      LinkDeliverySessionStatus2["Created"] = "CREATED";
      LinkDeliverySessionStatus2["Opened"] = "OPENED";
      LinkDeliverySessionStatus2["Exited"] = "EXITED";
      LinkDeliverySessionStatus2["Completed"] = "COMPLETED";
      LinkDeliverySessionStatus2["Expired"] = "EXPIRED";
    })(LinkDeliverySessionStatus = exports.LinkDeliverySessionStatus || (exports.LinkDeliverySessionStatus = {}));
    var LinkDeliveryVerificationStatus;
    (function(LinkDeliveryVerificationStatus2) {
      LinkDeliveryVerificationStatus2["AutomaticallyVerified"] = "automatically_verified";
      LinkDeliveryVerificationStatus2["PendingAutomaticVerification"] = "pending_automatic_verification";
      LinkDeliveryVerificationStatus2["PendingManualVerification"] = "pending_manual_verification";
      LinkDeliveryVerificationStatus2["ManuallyVerified"] = "manually_verified";
      LinkDeliveryVerificationStatus2["VerificationExpired"] = "verification_expired";
      LinkDeliveryVerificationStatus2["VerificationFailed"] = "verification_failed";
      LinkDeliveryVerificationStatus2["DatabaseMatched"] = "database_matched";
      LinkDeliveryVerificationStatus2["DatabaseInsightsPending"] = "database_insights_pending";
    })(LinkDeliveryVerificationStatus = exports.LinkDeliveryVerificationStatus || (exports.LinkDeliveryVerificationStatus = {}));
    var LinkDeliveryWebhookCallbackType;
    (function(LinkDeliveryWebhookCallbackType2) {
      LinkDeliveryWebhookCallbackType2["Success"] = "ON_SUCCESS";
      LinkDeliveryWebhookCallbackType2["Event"] = "ON_EVENT";
      LinkDeliveryWebhookCallbackType2["Exit"] = "ON_EXIT";
    })(LinkDeliveryWebhookCallbackType = exports.LinkDeliveryWebhookCallbackType || (exports.LinkDeliveryWebhookCallbackType = {}));
    var LinkDeliveryWebhookCommunicationMethod;
    (function(LinkDeliveryWebhookCommunicationMethod2) {
      LinkDeliveryWebhookCommunicationMethod2["Sms"] = "SMS";
      LinkDeliveryWebhookCommunicationMethod2["Email"] = "EMAIL";
    })(LinkDeliveryWebhookCommunicationMethod = exports.LinkDeliveryWebhookCommunicationMethod || (exports.LinkDeliveryWebhookCommunicationMethod = {}));
    var LinkDeliveryWebhookDeliveryStatus;
    (function(LinkDeliveryWebhookDeliveryStatus2) {
      LinkDeliveryWebhookDeliveryStatus2["Success"] = "SUCCESS";
      LinkDeliveryWebhookDeliveryStatus2["Failure"] = "FAILURE";
    })(LinkDeliveryWebhookDeliveryStatus = exports.LinkDeliveryWebhookDeliveryStatus || (exports.LinkDeliveryWebhookDeliveryStatus = {}));
    var LinkEventName;
    (function(LinkEventName2) {
      LinkEventName2["BankIncomeInsightsCompleted"] = "BANK_INCOME_INSIGHTS_COMPLETED";
      LinkEventName2["CloseOauth"] = "CLOSE_OAUTH";
      LinkEventName2["Error"] = "ERROR";
      LinkEventName2["Exit"] = "EXIT";
      LinkEventName2["FailOauth"] = "FAIL_OAUTH";
      LinkEventName2["Handoff"] = "HANDOFF";
      LinkEventName2["IssueFollowed"] = "ISSUE_FOLLOWED";
      LinkEventName2["Open"] = "OPEN";
      LinkEventName2["OpenMyPlaid"] = "OPEN_MY_PLAID";
      LinkEventName2["OpenOauth"] = "OPEN_OAUTH";
      LinkEventName2["SearchInstitution"] = "SEARCH_INSTITUTION";
      LinkEventName2["SelectAuthType"] = "SELECT_AUTH_TYPE";
      LinkEventName2["SelectBrand"] = "SELECT_BRAND";
      LinkEventName2["SelectDegradedInstitution"] = "SELECT_DEGRADED_INSTITUTION";
      LinkEventName2["SelectDownInstitution"] = "SELECT_DOWN_INSTITUTION";
      LinkEventName2["SelectFilteredInstitution"] = "SELECT_FILTERED_INSTITUTION";
      LinkEventName2["SelectInstitution"] = "SELECT_INSTITUTION";
      LinkEventName2["SubmitAccountNumber"] = "SUBMIT_ACCOUNT_NUMBER";
      LinkEventName2["SubmitCredentials"] = "SUBMIT_CREDENTIALS";
      LinkEventName2["SubmitDocuments"] = "SUBMIT_DOCUMENTS";
      LinkEventName2["SubmitDocumentsError"] = "SUBMIT_DOCUMENTS_ERROR";
      LinkEventName2["SubmitDocumentsSuccess"] = "SUBMIT_DOCUMENTS_SUCCESS";
      LinkEventName2["SubmitMfa"] = "SUBMIT_MFA";
      LinkEventName2["SubmitRoutingNumber"] = "SUBMIT_ROUTING_NUMBER";
      LinkEventName2["TransitionView"] = "TRANSITION_VIEW";
      LinkEventName2["ViewDataTypes"] = "VIEW_DATA_TYPES";
    })(LinkEventName = exports.LinkEventName || (exports.LinkEventName = {}));
    var LinkSessionSuccessMetadataTransferStatus;
    (function(LinkSessionSuccessMetadataTransferStatus2) {
      LinkSessionSuccessMetadataTransferStatus2["Complete"] = "COMPLETE";
      LinkSessionSuccessMetadataTransferStatus2["Incomplete"] = "INCOMPLETE";
      LinkSessionSuccessMetadataTransferStatus2["Null"] = "null";
    })(LinkSessionSuccessMetadataTransferStatus = exports.LinkSessionSuccessMetadataTransferStatus || (exports.LinkSessionSuccessMetadataTransferStatus = {}));
    var LinkTokenCreateRequestAuthRerouteToCredentialsEnum;
    (function(LinkTokenCreateRequestAuthRerouteToCredentialsEnum2) {
      LinkTokenCreateRequestAuthRerouteToCredentialsEnum2["Off"] = "OFF";
      LinkTokenCreateRequestAuthRerouteToCredentialsEnum2["Optional"] = "OPTIONAL";
      LinkTokenCreateRequestAuthRerouteToCredentialsEnum2["Forced"] = "FORCED";
    })(LinkTokenCreateRequestAuthRerouteToCredentialsEnum = exports.LinkTokenCreateRequestAuthRerouteToCredentialsEnum || (exports.LinkTokenCreateRequestAuthRerouteToCredentialsEnum = {}));
    var LinkTokenCreateRequestAuthFlowTypeEnum;
    (function(LinkTokenCreateRequestAuthFlowTypeEnum2) {
      LinkTokenCreateRequestAuthFlowTypeEnum2["FlexibleAuth"] = "FLEXIBLE_AUTH";
    })(LinkTokenCreateRequestAuthFlowTypeEnum = exports.LinkTokenCreateRequestAuthFlowTypeEnum || (exports.LinkTokenCreateRequestAuthFlowTypeEnum = {}));
    var LoanAccountSubtype;
    (function(LoanAccountSubtype2) {
      LoanAccountSubtype2["Auto"] = "auto";
      LoanAccountSubtype2["Business"] = "business";
      LoanAccountSubtype2["Commercial"] = "commercial";
      LoanAccountSubtype2["Construction"] = "construction";
      LoanAccountSubtype2["Consumer"] = "consumer";
      LoanAccountSubtype2["HomeEquity"] = "home equity";
      LoanAccountSubtype2["Loan"] = "loan";
      LoanAccountSubtype2["Mortgage"] = "mortgage";
      LoanAccountSubtype2["LineOfCredit"] = "line of credit";
      LoanAccountSubtype2["Student"] = "student";
      LoanAccountSubtype2["Other"] = "other";
      LoanAccountSubtype2["All"] = "all";
    })(LoanAccountSubtype = exports.LoanAccountSubtype || (exports.LoanAccountSubtype = {}));
    var LoanIdentifierType;
    (function(LoanIdentifierType2) {
      LoanIdentifierType2["LenderLoan"] = "LenderLoan";
      LoanIdentifierType2["UniversalLoan"] = "UniversalLoan";
    })(LoanIdentifierType = exports.LoanIdentifierType || (exports.LoanIdentifierType = {}));
    var MatchSummaryCode;
    (function(MatchSummaryCode2) {
      MatchSummaryCode2["Match"] = "match";
      MatchSummaryCode2["PartialMatch"] = "partial_match";
      MatchSummaryCode2["NoMatch"] = "no_match";
      MatchSummaryCode2["NoData"] = "no_data";
      MatchSummaryCode2["NoInput"] = "no_input";
    })(MatchSummaryCode = exports.MatchSummaryCode || (exports.MatchSummaryCode = {}));
    var MonitoringItemStatusCode;
    (function(MonitoringItemStatusCode2) {
      MonitoringItemStatusCode2["Available"] = "AVAILABLE";
      MonitoringItemStatusCode2["Pending"] = "PENDING";
      MonitoringItemStatusCode2["ItemNotSupported"] = "ITEM_NOT_SUPPORTED";
      MonitoringItemStatusCode2["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
    })(MonitoringItemStatusCode = exports.MonitoringItemStatusCode || (exports.MonitoringItemStatusCode = {}));
    var OmittableTransferType;
    (function(OmittableTransferType2) {
      OmittableTransferType2["Debit"] = "debit";
      OmittableTransferType2["Credit"] = "credit";
    })(OmittableTransferType = exports.OmittableTransferType || (exports.OmittableTransferType = {}));
    var OriginatorExpectedTransferFrequency;
    (function(OriginatorExpectedTransferFrequency2) {
      OriginatorExpectedTransferFrequency2["OncePerMonth"] = "once_per_month";
      OriginatorExpectedTransferFrequency2["TwicePerMonth"] = "twice_per_month";
      OriginatorExpectedTransferFrequency2["OncePerWeek"] = "once_per_week";
      OriginatorExpectedTransferFrequency2["Daily"] = "daily";
    })(OriginatorExpectedTransferFrequency = exports.OriginatorExpectedTransferFrequency || (exports.OriginatorExpectedTransferFrequency = {}));
    var OtherAccountSubtype;
    (function(OtherAccountSubtype2) {
      OtherAccountSubtype2["Other"] = "other";
      OtherAccountSubtype2["All"] = "all";
    })(OtherAccountSubtype = exports.OtherAccountSubtype || (exports.OtherAccountSubtype = {}));
    var OverrideAccountType;
    (function(OverrideAccountType2) {
      OverrideAccountType2["Investment"] = "investment";
      OverrideAccountType2["Credit"] = "credit";
      OverrideAccountType2["Depository"] = "depository";
      OverrideAccountType2["Loan"] = "loan";
      OverrideAccountType2["Payroll"] = "payroll";
      OverrideAccountType2["Other"] = "other";
    })(OverrideAccountType = exports.OverrideAccountType || (exports.OverrideAccountType = {}));
    var OwnershipType;
    (function(OwnershipType2) {
      OwnershipType2["Null"] = "null";
      OwnershipType2["Individual"] = "individual";
      OwnershipType2["Joint"] = "joint";
      OwnershipType2["Association"] = "association";
      OwnershipType2["Trust"] = "trust";
    })(OwnershipType = exports.OwnershipType || (exports.OwnershipType = {}));
    var POBoxStatus;
    (function(POBoxStatus2) {
      POBoxStatus2["Yes"] = "yes";
      POBoxStatus2["No"] = "no";
      POBoxStatus2["NoData"] = "no_data";
    })(POBoxStatus = exports.POBoxStatus || (exports.POBoxStatus = {}));
    var PartnerEndCustomerFlowdownStatus;
    (function(PartnerEndCustomerFlowdownStatus2) {
      PartnerEndCustomerFlowdownStatus2["NotStarted"] = "NOT_STARTED";
      PartnerEndCustomerFlowdownStatus2["InReview"] = "IN_REVIEW";
      PartnerEndCustomerFlowdownStatus2["Negotiation"] = "NEGOTIATION";
      PartnerEndCustomerFlowdownStatus2["Complete"] = "COMPLETE";
    })(PartnerEndCustomerFlowdownStatus = exports.PartnerEndCustomerFlowdownStatus || (exports.PartnerEndCustomerFlowdownStatus = {}));
    var PartnerEndCustomerOAuthInstitutionApplicationStatus;
    (function(PartnerEndCustomerOAuthInstitutionApplicationStatus2) {
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["NotStarted"] = "NOT_STARTED";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["Processing"] = "PROCESSING";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["Approved"] = "APPROVED";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["Enabled"] = "ENABLED";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["AttentionRequired"] = "ATTENTION_REQUIRED";
    })(PartnerEndCustomerOAuthInstitutionApplicationStatus = exports.PartnerEndCustomerOAuthInstitutionApplicationStatus || (exports.PartnerEndCustomerOAuthInstitutionApplicationStatus = {}));
    var PartnerEndCustomerOAuthStatusUpdatedValues;
    (function(PartnerEndCustomerOAuthStatusUpdatedValues2) {
      PartnerEndCustomerOAuthStatusUpdatedValues2["NotStarted"] = "not-started";
      PartnerEndCustomerOAuthStatusUpdatedValues2["Processing"] = "processing";
      PartnerEndCustomerOAuthStatusUpdatedValues2["Approved"] = "approved";
      PartnerEndCustomerOAuthStatusUpdatedValues2["Enabled"] = "enabled";
      PartnerEndCustomerOAuthStatusUpdatedValues2["AttentionRequired"] = "attention-required";
    })(PartnerEndCustomerOAuthStatusUpdatedValues = exports.PartnerEndCustomerOAuthStatusUpdatedValues || (exports.PartnerEndCustomerOAuthStatusUpdatedValues = {}));
    var PartnerEndCustomerQuestionnaireStatus;
    (function(PartnerEndCustomerQuestionnaireStatus2) {
      PartnerEndCustomerQuestionnaireStatus2["NotStarted"] = "NOT_STARTED";
      PartnerEndCustomerQuestionnaireStatus2["Received"] = "RECEIVED";
      PartnerEndCustomerQuestionnaireStatus2["Complete"] = "COMPLETE";
    })(PartnerEndCustomerQuestionnaireStatus = exports.PartnerEndCustomerQuestionnaireStatus || (exports.PartnerEndCustomerQuestionnaireStatus = {}));
    var PartnerEndCustomerStatus;
    (function(PartnerEndCustomerStatus2) {
      PartnerEndCustomerStatus2["UnderReview"] = "UNDER_REVIEW";
      PartnerEndCustomerStatus2["PendingEnablement"] = "PENDING_ENABLEMENT";
      PartnerEndCustomerStatus2["Active"] = "ACTIVE";
      PartnerEndCustomerStatus2["Denied"] = "DENIED";
    })(PartnerEndCustomerStatus = exports.PartnerEndCustomerStatus || (exports.PartnerEndCustomerStatus = {}));
    var PartyRoleType;
    (function(PartyRoleType2) {
      PartyRoleType2["Borrower"] = "Borrower";
    })(PartyRoleType = exports.PartyRoleType || (exports.PartyRoleType = {}));
    var PayFrequencyValue;
    (function(PayFrequencyValue2) {
      PayFrequencyValue2["Monthly"] = "monthly";
      PayFrequencyValue2["Semimonthly"] = "semimonthly";
      PayFrequencyValue2["Weekly"] = "weekly";
      PayFrequencyValue2["Biweekly"] = "biweekly";
      PayFrequencyValue2["Unknown"] = "unknown";
      PayFrequencyValue2["Null"] = "null";
    })(PayFrequencyValue = exports.PayFrequencyValue || (exports.PayFrequencyValue = {}));
    var PayPeriodDetailsPayFrequency;
    (function(PayPeriodDetailsPayFrequency2) {
      PayPeriodDetailsPayFrequency2["PayFrequencyUnknown"] = "PAY_FREQUENCY_UNKNOWN";
      PayPeriodDetailsPayFrequency2["PayFrequencyWeekly"] = "PAY_FREQUENCY_WEEKLY";
      PayPeriodDetailsPayFrequency2["PayFrequencyBiweekly"] = "PAY_FREQUENCY_BIWEEKLY";
      PayPeriodDetailsPayFrequency2["PayFrequencySemimonthly"] = "PAY_FREQUENCY_SEMIMONTHLY";
      PayPeriodDetailsPayFrequency2["PayFrequencyMonthly"] = "PAY_FREQUENCY_MONTHLY";
      PayPeriodDetailsPayFrequency2["Null"] = "null";
    })(PayPeriodDetailsPayFrequency = exports.PayPeriodDetailsPayFrequency || (exports.PayPeriodDetailsPayFrequency = {}));
    var PaymentAmountCurrency;
    (function(PaymentAmountCurrency2) {
      PaymentAmountCurrency2["Gbp"] = "GBP";
      PaymentAmountCurrency2["Eur"] = "EUR";
      PaymentAmountCurrency2["Pln"] = "PLN";
      PaymentAmountCurrency2["Sek"] = "SEK";
      PaymentAmountCurrency2["Dkk"] = "DKK";
      PaymentAmountCurrency2["Nok"] = "NOK";
    })(PaymentAmountCurrency = exports.PaymentAmountCurrency || (exports.PaymentAmountCurrency = {}));
    var PaymentChannel;
    (function(PaymentChannel2) {
      PaymentChannel2["Online"] = "online";
      PaymentChannel2["InStore"] = "in store";
      PaymentChannel2["Other"] = "other";
    })(PaymentChannel = exports.PaymentChannel || (exports.PaymentChannel = {}));
    var PaymentConsentPeriodicAlignment;
    (function(PaymentConsentPeriodicAlignment2) {
      PaymentConsentPeriodicAlignment2["Calendar"] = "CALENDAR";
      PaymentConsentPeriodicAlignment2["Consent"] = "CONSENT";
    })(PaymentConsentPeriodicAlignment = exports.PaymentConsentPeriodicAlignment || (exports.PaymentConsentPeriodicAlignment = {}));
    var PaymentConsentPeriodicInterval;
    (function(PaymentConsentPeriodicInterval2) {
      PaymentConsentPeriodicInterval2["Day"] = "DAY";
      PaymentConsentPeriodicInterval2["Week"] = "WEEK";
      PaymentConsentPeriodicInterval2["Month"] = "MONTH";
      PaymentConsentPeriodicInterval2["Year"] = "YEAR";
    })(PaymentConsentPeriodicInterval = exports.PaymentConsentPeriodicInterval || (exports.PaymentConsentPeriodicInterval = {}));
    var PaymentInitiationConsentScope;
    (function(PaymentInitiationConsentScope2) {
      PaymentInitiationConsentScope2["MeToMe"] = "ME_TO_ME";
      PaymentInitiationConsentScope2["External"] = "EXTERNAL";
    })(PaymentInitiationConsentScope = exports.PaymentInitiationConsentScope || (exports.PaymentInitiationConsentScope = {}));
    var PaymentInitiationConsentStatus;
    (function(PaymentInitiationConsentStatus2) {
      PaymentInitiationConsentStatus2["Unauthorised"] = "UNAUTHORISED";
      PaymentInitiationConsentStatus2["Authorised"] = "AUTHORISED";
      PaymentInitiationConsentStatus2["Revoked"] = "REVOKED";
      PaymentInitiationConsentStatus2["Rejected"] = "REJECTED";
      PaymentInitiationConsentStatus2["Expired"] = "EXPIRED";
    })(PaymentInitiationConsentStatus = exports.PaymentInitiationConsentStatus || (exports.PaymentInitiationConsentStatus = {}));
    var PaymentInitiationPaymentCreateStatus;
    (function(PaymentInitiationPaymentCreateStatus2) {
      PaymentInitiationPaymentCreateStatus2["PaymentStatusInputNeeded"] = "PAYMENT_STATUS_INPUT_NEEDED";
    })(PaymentInitiationPaymentCreateStatus = exports.PaymentInitiationPaymentCreateStatus || (exports.PaymentInitiationPaymentCreateStatus = {}));
    var PaymentInitiationPaymentStatus;
    (function(PaymentInitiationPaymentStatus2) {
      PaymentInitiationPaymentStatus2["InputNeeded"] = "PAYMENT_STATUS_INPUT_NEEDED";
      PaymentInitiationPaymentStatus2["Processing"] = "PAYMENT_STATUS_PROCESSING";
      PaymentInitiationPaymentStatus2["Initiated"] = "PAYMENT_STATUS_INITIATED";
      PaymentInitiationPaymentStatus2["Completed"] = "PAYMENT_STATUS_COMPLETED";
      PaymentInitiationPaymentStatus2["InsufficientFunds"] = "PAYMENT_STATUS_INSUFFICIENT_FUNDS";
      PaymentInitiationPaymentStatus2["Failed"] = "PAYMENT_STATUS_FAILED";
      PaymentInitiationPaymentStatus2["Blocked"] = "PAYMENT_STATUS_BLOCKED";
      PaymentInitiationPaymentStatus2["Unknown"] = "PAYMENT_STATUS_UNKNOWN";
      PaymentInitiationPaymentStatus2["Executed"] = "PAYMENT_STATUS_EXECUTED";
      PaymentInitiationPaymentStatus2["Settled"] = "PAYMENT_STATUS_SETTLED";
      PaymentInitiationPaymentStatus2["Authorising"] = "PAYMENT_STATUS_AUTHORISING";
      PaymentInitiationPaymentStatus2["Cancelled"] = "PAYMENT_STATUS_CANCELLED";
      PaymentInitiationPaymentStatus2["Established"] = "PAYMENT_STATUS_ESTABLISHED";
      PaymentInitiationPaymentStatus2["Rejected"] = "PAYMENT_STATUS_REJECTED";
    })(PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentStatus || (exports.PaymentInitiationPaymentStatus = {}));
    var PaymentProfileStatus;
    (function(PaymentProfileStatus2) {
      PaymentProfileStatus2["Pending"] = "PENDING";
      PaymentProfileStatus2["Ready"] = "READY";
      PaymentProfileStatus2["Removed"] = "REMOVED";
    })(PaymentProfileStatus = exports.PaymentProfileStatus || (exports.PaymentProfileStatus = {}));
    var PaymentScheduleInterval;
    (function(PaymentScheduleInterval2) {
      PaymentScheduleInterval2["Weekly"] = "WEEKLY";
      PaymentScheduleInterval2["Monthly"] = "MONTHLY";
    })(PaymentScheduleInterval = exports.PaymentScheduleInterval || (exports.PaymentScheduleInterval = {}));
    var PaymentScheme;
    (function(PaymentScheme2) {
      PaymentScheme2["Null"] = "null";
      PaymentScheme2["LocalDefault"] = "LOCAL_DEFAULT";
      PaymentScheme2["LocalInstant"] = "LOCAL_INSTANT";
      PaymentScheme2["SepaCreditTransfer"] = "SEPA_CREDIT_TRANSFER";
      PaymentScheme2["SepaCreditTransferInstant"] = "SEPA_CREDIT_TRANSFER_INSTANT";
    })(PaymentScheme = exports.PaymentScheme || (exports.PaymentScheme = {}));
    var PaystubPayFrequency;
    (function(PaystubPayFrequency2) {
      PaystubPayFrequency2["Monthly"] = "MONTHLY";
      PaystubPayFrequency2["BiWeekly"] = "BI-WEEKLY";
      PaystubPayFrequency2["Weekly"] = "WEEKLY";
      PaystubPayFrequency2["SemiMonthly"] = "SEMI-MONTHLY";
      PaystubPayFrequency2["Null"] = "null";
    })(PaystubPayFrequency = exports.PaystubPayFrequency || (exports.PaystubPayFrequency = {}));
    var PendingDisconnectWebhookReason;
    (function(PendingDisconnectWebhookReason2) {
      PendingDisconnectWebhookReason2["InstitutionMigration"] = "INSTITUTION_MIGRATION";
    })(PendingDisconnectWebhookReason = exports.PendingDisconnectWebhookReason || (exports.PendingDisconnectWebhookReason = {}));
    var PhoneNumberTypeEnum;
    (function(PhoneNumberTypeEnum2) {
      PhoneNumberTypeEnum2["Home"] = "home";
      PhoneNumberTypeEnum2["Work"] = "work";
      PhoneNumberTypeEnum2["Office"] = "office";
      PhoneNumberTypeEnum2["Mobile"] = "mobile";
      PhoneNumberTypeEnum2["Mobile1"] = "mobile1";
      PhoneNumberTypeEnum2["Other"] = "other";
    })(PhoneNumberTypeEnum = exports.PhoneNumberTypeEnum || (exports.PhoneNumberTypeEnum = {}));
    var PhoneType;
    (function(PhoneType2) {
      PhoneType2["Phone"] = "phone";
      PhoneType2["Fax"] = "fax";
    })(PhoneType = exports.PhoneType || (exports.PhoneType = {}));
    var PhysicalDocumentCategory;
    (function(PhysicalDocumentCategory2) {
      PhysicalDocumentCategory2["DriversLicense"] = "drivers_license";
      PhysicalDocumentCategory2["IdCard"] = "id_card";
      PhysicalDocumentCategory2["Passport"] = "passport";
      PhysicalDocumentCategory2["ResidencePermitCard"] = "residence_permit_card";
      PhysicalDocumentCategory2["ResidentCard"] = "resident_card";
      PhysicalDocumentCategory2["Visa"] = "visa";
    })(PhysicalDocumentCategory = exports.PhysicalDocumentCategory || (exports.PhysicalDocumentCategory = {}));
    var PlaidErrorType;
    (function(PlaidErrorType2) {
      PlaidErrorType2["InvalidRequest"] = "INVALID_REQUEST";
      PlaidErrorType2["InvalidResult"] = "INVALID_RESULT";
      PlaidErrorType2["InvalidInput"] = "INVALID_INPUT";
      PlaidErrorType2["InstitutionError"] = "INSTITUTION_ERROR";
      PlaidErrorType2["RateLimitExceeded"] = "RATE_LIMIT_EXCEEDED";
      PlaidErrorType2["ApiError"] = "API_ERROR";
      PlaidErrorType2["ItemError"] = "ITEM_ERROR";
      PlaidErrorType2["AssetReportError"] = "ASSET_REPORT_ERROR";
      PlaidErrorType2["RecaptchaError"] = "RECAPTCHA_ERROR";
      PlaidErrorType2["OauthError"] = "OAUTH_ERROR";
      PlaidErrorType2["PaymentError"] = "PAYMENT_ERROR";
      PlaidErrorType2["BankTransferError"] = "BANK_TRANSFER_ERROR";
      PlaidErrorType2["IncomeVerificationError"] = "INCOME_VERIFICATION_ERROR";
      PlaidErrorType2["MicrodepositsError"] = "MICRODEPOSITS_ERROR";
      PlaidErrorType2["SandboxError"] = "SANDBOX_ERROR";
      PlaidErrorType2["PartnerError"] = "PARTNER_ERROR";
      PlaidErrorType2["TransactionsError"] = "TRANSACTIONS_ERROR";
      PlaidErrorType2["TransactionError"] = "TRANSACTION_ERROR";
      PlaidErrorType2["TransferError"] = "TRANSFER_ERROR";
    })(PlaidErrorType = exports.PlaidErrorType || (exports.PlaidErrorType = {}));
    var PrismCashScoreVersion;
    (function(PrismCashScoreVersion2) {
      PrismCashScoreVersion2["_3"] = "3";
      PrismCashScoreVersion2["Null"] = "null";
    })(PrismCashScoreVersion = exports.PrismCashScoreVersion || (exports.PrismCashScoreVersion = {}));
    var PrismFirstDetectVersion;
    (function(PrismFirstDetectVersion2) {
      PrismFirstDetectVersion2["_3"] = "3";
      PrismFirstDetectVersion2["Null"] = "null";
    })(PrismFirstDetectVersion = exports.PrismFirstDetectVersion || (exports.PrismFirstDetectVersion = {}));
    var PrismInsightsVersion;
    (function(PrismInsightsVersion2) {
      PrismInsightsVersion2["_3"] = "3";
      PrismInsightsVersion2["Null"] = "null";
    })(PrismInsightsVersion = exports.PrismInsightsVersion || (exports.PrismInsightsVersion = {}));
    var PrismProduct;
    (function(PrismProduct2) {
      PrismProduct2["Insights"] = "insights";
      PrismProduct2["Scores"] = "scores";
    })(PrismProduct = exports.PrismProduct || (exports.PrismProduct = {}));
    var ProcessorTokenCreateRequestProcessorEnum;
    (function(ProcessorTokenCreateRequestProcessorEnum2) {
      ProcessorTokenCreateRequestProcessorEnum2["Dwolla"] = "dwolla";
      ProcessorTokenCreateRequestProcessorEnum2["Galileo"] = "galileo";
      ProcessorTokenCreateRequestProcessorEnum2["ModernTreasury"] = "modern_treasury";
      ProcessorTokenCreateRequestProcessorEnum2["Ocrolus"] = "ocrolus";
      ProcessorTokenCreateRequestProcessorEnum2["Vesta"] = "vesta";
      ProcessorTokenCreateRequestProcessorEnum2["Drivewealth"] = "drivewealth";
      ProcessorTokenCreateRequestProcessorEnum2["Vopay"] = "vopay";
      ProcessorTokenCreateRequestProcessorEnum2["Achq"] = "achq";
      ProcessorTokenCreateRequestProcessorEnum2["Check"] = "check";
      ProcessorTokenCreateRequestProcessorEnum2["Checkbook"] = "checkbook";
      ProcessorTokenCreateRequestProcessorEnum2["Circle"] = "circle";
      ProcessorTokenCreateRequestProcessorEnum2["SilaMoney"] = "sila_money";
      ProcessorTokenCreateRequestProcessorEnum2["Rize"] = "rize";
      ProcessorTokenCreateRequestProcessorEnum2["SvbApi"] = "svb_api";
      ProcessorTokenCreateRequestProcessorEnum2["Unit"] = "unit";
      ProcessorTokenCreateRequestProcessorEnum2["Wyre"] = "wyre";
      ProcessorTokenCreateRequestProcessorEnum2["Lithic"] = "lithic";
      ProcessorTokenCreateRequestProcessorEnum2["Alpaca"] = "alpaca";
      ProcessorTokenCreateRequestProcessorEnum2["Astra"] = "astra";
      ProcessorTokenCreateRequestProcessorEnum2["Moov"] = "moov";
      ProcessorTokenCreateRequestProcessorEnum2["TreasuryPrime"] = "treasury_prime";
      ProcessorTokenCreateRequestProcessorEnum2["Marqeta"] = "marqeta";
      ProcessorTokenCreateRequestProcessorEnum2["Checkout"] = "checkout";
      ProcessorTokenCreateRequestProcessorEnum2["Solid"] = "solid";
      ProcessorTokenCreateRequestProcessorEnum2["Highnote"] = "highnote";
      ProcessorTokenCreateRequestProcessorEnum2["Gemini"] = "gemini";
      ProcessorTokenCreateRequestProcessorEnum2["ApexClearing"] = "apex_clearing";
      ProcessorTokenCreateRequestProcessorEnum2["Gusto"] = "gusto";
      ProcessorTokenCreateRequestProcessorEnum2["Adyen"] = "adyen";
      ProcessorTokenCreateRequestProcessorEnum2["Atomic"] = "atomic";
      ProcessorTokenCreateRequestProcessorEnum2["I2c"] = "i2c";
      ProcessorTokenCreateRequestProcessorEnum2["Wepay"] = "wepay";
      ProcessorTokenCreateRequestProcessorEnum2["Riskified"] = "riskified";
      ProcessorTokenCreateRequestProcessorEnum2["Utb"] = "utb";
      ProcessorTokenCreateRequestProcessorEnum2["AdpRoll"] = "adp_roll";
      ProcessorTokenCreateRequestProcessorEnum2["FortressTrust"] = "fortress_trust";
      ProcessorTokenCreateRequestProcessorEnum2["Bond"] = "bond";
      ProcessorTokenCreateRequestProcessorEnum2["Bakkt"] = "bakkt";
      ProcessorTokenCreateRequestProcessorEnum2["Teal"] = "teal";
      ProcessorTokenCreateRequestProcessorEnum2["ZeroHash"] = "zero_hash";
      ProcessorTokenCreateRequestProcessorEnum2["TabaPay"] = "taba_pay";
      ProcessorTokenCreateRequestProcessorEnum2["Knot"] = "knot";
      ProcessorTokenCreateRequestProcessorEnum2["Sardine"] = "sardine";
      ProcessorTokenCreateRequestProcessorEnum2["Alloy"] = "alloy";
      ProcessorTokenCreateRequestProcessorEnum2["Finix"] = "finix";
      ProcessorTokenCreateRequestProcessorEnum2["Nuvei"] = "nuvei";
      ProcessorTokenCreateRequestProcessorEnum2["Layer"] = "layer";
      ProcessorTokenCreateRequestProcessorEnum2["Boom"] = "boom";
      ProcessorTokenCreateRequestProcessorEnum2["Paynote"] = "paynote";
      ProcessorTokenCreateRequestProcessorEnum2["Stake"] = "stake";
      ProcessorTokenCreateRequestProcessorEnum2["Wedbush"] = "wedbush";
      ProcessorTokenCreateRequestProcessorEnum2["Esusu"] = "esusu";
    })(ProcessorTokenCreateRequestProcessorEnum = exports.ProcessorTokenCreateRequestProcessorEnum || (exports.ProcessorTokenCreateRequestProcessorEnum = {}));
    var ProductStatusStatusEnum;
    (function(ProductStatusStatusEnum2) {
      ProductStatusStatusEnum2["Healthy"] = "HEALTHY";
      ProductStatusStatusEnum2["Degraded"] = "DEGRADED";
      ProductStatusStatusEnum2["Down"] = "DOWN";
    })(ProductStatusStatusEnum = exports.ProductStatusStatusEnum || (exports.ProductStatusStatusEnum = {}));
    var ProductStatusBreakdownRefreshIntervalEnum;
    (function(ProductStatusBreakdownRefreshIntervalEnum2) {
      ProductStatusBreakdownRefreshIntervalEnum2["Normal"] = "NORMAL";
      ProductStatusBreakdownRefreshIntervalEnum2["Delayed"] = "DELAYED";
      ProductStatusBreakdownRefreshIntervalEnum2["Stopped"] = "STOPPED";
    })(ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusBreakdownRefreshIntervalEnum || (exports.ProductStatusBreakdownRefreshIntervalEnum = {}));
    var Products2;
    (function(Products3) {
      Products3["Assets"] = "assets";
      Products3["Auth"] = "auth";
      Products3["Balance"] = "balance";
      Products3["BalancePlus"] = "balance_plus";
      Products3["Beacon"] = "beacon";
      Products3["Identity"] = "identity";
      Products3["IdentityMatch"] = "identity_match";
      Products3["Investments"] = "investments";
      Products3["InvestmentsAuth"] = "investments_auth";
      Products3["Liabilities"] = "liabilities";
      Products3["PaymentInitiation"] = "payment_initiation";
      Products3["IdentityVerification"] = "identity_verification";
      Products3["Transactions"] = "transactions";
      Products3["CreditDetails"] = "credit_details";
      Products3["Income"] = "income";
      Products3["IncomeVerification"] = "income_verification";
      Products3["DepositSwitch"] = "deposit_switch";
      Products3["StandingOrders"] = "standing_orders";
      Products3["Transfer"] = "transfer";
      Products3["Employment"] = "employment";
      Products3["RecurringTransactions"] = "recurring_transactions";
      Products3["Signal"] = "signal";
      Products3["Statements"] = "statements";
      Products3["ProcessorPayments"] = "processor_payments";
      Products3["ProcessorIdentity"] = "processor_identity";
      Products3["Profile"] = "profile";
      Products3["CraBaseReport"] = "cra_base_report";
      Products3["CraIncomeInsights"] = "cra_income_insights";
      Products3["CraPartnerInsights"] = "cra_partner_insights";
      Products3["CraCashflowInsights"] = "cra_cashflow_insights";
      Products3["Layer"] = "layer";
    })(Products2 = exports.Products || (exports.Products = {}));
    var ProfileNetworkStatusGetNetworkStatus;
    (function(ProfileNetworkStatusGetNetworkStatus2) {
      ProfileNetworkStatusGetNetworkStatus2["Unknown"] = "UNKNOWN";
      ProfileNetworkStatusGetNetworkStatus2["ReturningUser"] = "RETURNING_USER";
    })(ProfileNetworkStatusGetNetworkStatus = exports.ProfileNetworkStatusGetNetworkStatus || (exports.ProfileNetworkStatusGetNetworkStatus = {}));
    var ProgramNameSensitivity;
    (function(ProgramNameSensitivity2) {
      ProgramNameSensitivity2["Coarse"] = "coarse";
      ProgramNameSensitivity2["Balanced"] = "balanced";
      ProgramNameSensitivity2["Strict"] = "strict";
      ProgramNameSensitivity2["Exact"] = "exact";
    })(ProgramNameSensitivity = exports.ProgramNameSensitivity || (exports.ProgramNameSensitivity = {}));
    var ProxyType;
    (function(ProxyType2) {
      ProxyType2["NoneDetected"] = "none_detected";
      ProxyType2["Tor"] = "tor";
      ProxyType2["Vpn"] = "vpn";
      ProxyType2["WebProxy"] = "web_proxy";
      ProxyType2["PublicProxy"] = "public_proxy";
    })(ProxyType = exports.ProxyType || (exports.ProxyType = {}));
    var RecurringFrequency;
    (function(RecurringFrequency2) {
      RecurringFrequency2["Unknown"] = "UNKNOWN";
      RecurringFrequency2["Weekly"] = "WEEKLY";
      RecurringFrequency2["Biweekly"] = "BIWEEKLY";
      RecurringFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      RecurringFrequency2["Monthly"] = "MONTHLY";
      RecurringFrequency2["Annually"] = "ANNUALLY";
      RecurringFrequency2["Daily"] = "DAILY";
      RecurringFrequency2["Dynamic"] = "DYNAMIC";
      RecurringFrequency2["Null"] = "null";
    })(RecurringFrequency = exports.RecurringFrequency || (exports.RecurringFrequency = {}));
    var RecurringTransactionFrequency;
    (function(RecurringTransactionFrequency2) {
      RecurringTransactionFrequency2["Unknown"] = "UNKNOWN";
      RecurringTransactionFrequency2["Weekly"] = "WEEKLY";
      RecurringTransactionFrequency2["Biweekly"] = "BIWEEKLY";
      RecurringTransactionFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      RecurringTransactionFrequency2["Monthly"] = "MONTHLY";
      RecurringTransactionFrequency2["Annually"] = "ANNUALLY";
    })(RecurringTransactionFrequency = exports.RecurringTransactionFrequency || (exports.RecurringTransactionFrequency = {}));
    var ReportType;
    (function(ReportType2) {
      ReportType2["Asset"] = "asset";
    })(ReportType = exports.ReportType || (exports.ReportType = {}));
    var RiskCheckBehaviorBotDetectedLabel;
    (function(RiskCheckBehaviorBotDetectedLabel2) {
      RiskCheckBehaviorBotDetectedLabel2["Yes"] = "yes";
      RiskCheckBehaviorBotDetectedLabel2["No"] = "no";
      RiskCheckBehaviorBotDetectedLabel2["NoData"] = "no_data";
    })(RiskCheckBehaviorBotDetectedLabel = exports.RiskCheckBehaviorBotDetectedLabel || (exports.RiskCheckBehaviorBotDetectedLabel = {}));
    var RiskCheckBehaviorFraudRingDetectedLabel;
    (function(RiskCheckBehaviorFraudRingDetectedLabel2) {
      RiskCheckBehaviorFraudRingDetectedLabel2["Yes"] = "yes";
      RiskCheckBehaviorFraudRingDetectedLabel2["No"] = "no";
      RiskCheckBehaviorFraudRingDetectedLabel2["NoData"] = "no_data";
    })(RiskCheckBehaviorFraudRingDetectedLabel = exports.RiskCheckBehaviorFraudRingDetectedLabel || (exports.RiskCheckBehaviorFraudRingDetectedLabel = {}));
    var RiskCheckBehaviorUserInteractionsLabel;
    (function(RiskCheckBehaviorUserInteractionsLabel2) {
      RiskCheckBehaviorUserInteractionsLabel2["Genuine"] = "genuine";
      RiskCheckBehaviorUserInteractionsLabel2["Neutral"] = "neutral";
      RiskCheckBehaviorUserInteractionsLabel2["Risky"] = "risky";
      RiskCheckBehaviorUserInteractionsLabel2["NoData"] = "no_data";
    })(RiskCheckBehaviorUserInteractionsLabel = exports.RiskCheckBehaviorUserInteractionsLabel || (exports.RiskCheckBehaviorUserInteractionsLabel = {}));
    var RiskCheckEmailDomainIsCustom;
    (function(RiskCheckEmailDomainIsCustom2) {
      RiskCheckEmailDomainIsCustom2["Yes"] = "yes";
      RiskCheckEmailDomainIsCustom2["No"] = "no";
      RiskCheckEmailDomainIsCustom2["NoData"] = "no_data";
    })(RiskCheckEmailDomainIsCustom = exports.RiskCheckEmailDomainIsCustom || (exports.RiskCheckEmailDomainIsCustom = {}));
    var RiskCheckEmailDomainIsDisposable;
    (function(RiskCheckEmailDomainIsDisposable2) {
      RiskCheckEmailDomainIsDisposable2["Yes"] = "yes";
      RiskCheckEmailDomainIsDisposable2["No"] = "no";
      RiskCheckEmailDomainIsDisposable2["NoData"] = "no_data";
    })(RiskCheckEmailDomainIsDisposable = exports.RiskCheckEmailDomainIsDisposable || (exports.RiskCheckEmailDomainIsDisposable = {}));
    var RiskCheckEmailDomainIsFreeProvider;
    (function(RiskCheckEmailDomainIsFreeProvider2) {
      RiskCheckEmailDomainIsFreeProvider2["Yes"] = "yes";
      RiskCheckEmailDomainIsFreeProvider2["No"] = "no";
      RiskCheckEmailDomainIsFreeProvider2["NoData"] = "no_data";
    })(RiskCheckEmailDomainIsFreeProvider = exports.RiskCheckEmailDomainIsFreeProvider || (exports.RiskCheckEmailDomainIsFreeProvider = {}));
    var RiskCheckEmailIsDeliverableStatus;
    (function(RiskCheckEmailIsDeliverableStatus2) {
      RiskCheckEmailIsDeliverableStatus2["Yes"] = "yes";
      RiskCheckEmailIsDeliverableStatus2["No"] = "no";
      RiskCheckEmailIsDeliverableStatus2["NoData"] = "no_data";
    })(RiskCheckEmailIsDeliverableStatus = exports.RiskCheckEmailIsDeliverableStatus || (exports.RiskCheckEmailIsDeliverableStatus = {}));
    var RiskCheckEmailTopLevelDomainIsSuspicious;
    (function(RiskCheckEmailTopLevelDomainIsSuspicious2) {
      RiskCheckEmailTopLevelDomainIsSuspicious2["Yes"] = "yes";
      RiskCheckEmailTopLevelDomainIsSuspicious2["No"] = "no";
      RiskCheckEmailTopLevelDomainIsSuspicious2["NoData"] = "no_data";
    })(RiskCheckEmailTopLevelDomainIsSuspicious = exports.RiskCheckEmailTopLevelDomainIsSuspicious || (exports.RiskCheckEmailTopLevelDomainIsSuspicious = {}));
    var RiskCheckLinkedService;
    (function(RiskCheckLinkedService2) {
      RiskCheckLinkedService2["Aboutme"] = "aboutme";
      RiskCheckLinkedService2["Adobe"] = "adobe";
      RiskCheckLinkedService2["AdultSites"] = "adult_sites";
      RiskCheckLinkedService2["Airbnb"] = "airbnb";
      RiskCheckLinkedService2["Altbalaji"] = "altbalaji";
      RiskCheckLinkedService2["Amazon"] = "amazon";
      RiskCheckLinkedService2["Apple"] = "apple";
      RiskCheckLinkedService2["Archiveorg"] = "archiveorg";
      RiskCheckLinkedService2["Atlassian"] = "atlassian";
      RiskCheckLinkedService2["Bitmoji"] = "bitmoji";
      RiskCheckLinkedService2["Bodybuilding"] = "bodybuilding";
      RiskCheckLinkedService2["Booking"] = "booking";
      RiskCheckLinkedService2["Bukalapak"] = "bukalapak";
      RiskCheckLinkedService2["Codecademy"] = "codecademy";
      RiskCheckLinkedService2["Deliveroo"] = "deliveroo";
      RiskCheckLinkedService2["Diigo"] = "diigo";
      RiskCheckLinkedService2["Discord"] = "discord";
      RiskCheckLinkedService2["Disneyplus"] = "disneyplus";
      RiskCheckLinkedService2["Duolingo"] = "duolingo";
      RiskCheckLinkedService2["Ebay"] = "ebay";
      RiskCheckLinkedService2["Envato"] = "envato";
      RiskCheckLinkedService2["Eventbrite"] = "eventbrite";
      RiskCheckLinkedService2["Evernote"] = "evernote";
      RiskCheckLinkedService2["Facebook"] = "facebook";
      RiskCheckLinkedService2["Firefox"] = "firefox";
      RiskCheckLinkedService2["Flickr"] = "flickr";
      RiskCheckLinkedService2["Flipkart"] = "flipkart";
      RiskCheckLinkedService2["Foursquare"] = "foursquare";
      RiskCheckLinkedService2["Freelancer"] = "freelancer";
      RiskCheckLinkedService2["Gaana"] = "gaana";
      RiskCheckLinkedService2["Giphy"] = "giphy";
      RiskCheckLinkedService2["Github"] = "github";
      RiskCheckLinkedService2["Google"] = "google";
      RiskCheckLinkedService2["Gravatar"] = "gravatar";
      RiskCheckLinkedService2["Hubspot"] = "hubspot";
      RiskCheckLinkedService2["Imgur"] = "imgur";
      RiskCheckLinkedService2["Instagram"] = "instagram";
      RiskCheckLinkedService2["Jdid"] = "jdid";
      RiskCheckLinkedService2["Kakao"] = "kakao";
      RiskCheckLinkedService2["Kommo"] = "kommo";
      RiskCheckLinkedService2["Komoot"] = "komoot";
      RiskCheckLinkedService2["Lastfm"] = "lastfm";
      RiskCheckLinkedService2["Lazada"] = "lazada";
      RiskCheckLinkedService2["Line"] = "line";
      RiskCheckLinkedService2["Linkedin"] = "linkedin";
      RiskCheckLinkedService2["Mailru"] = "mailru";
      RiskCheckLinkedService2["Microsoft"] = "microsoft";
      RiskCheckLinkedService2["Myspace"] = "myspace";
      RiskCheckLinkedService2["Netflix"] = "netflix";
      RiskCheckLinkedService2["Nike"] = "nike";
      RiskCheckLinkedService2["Ok"] = "ok";
      RiskCheckLinkedService2["Patreon"] = "patreon";
      RiskCheckLinkedService2["Pinterest"] = "pinterest";
      RiskCheckLinkedService2["Plurk"] = "plurk";
      RiskCheckLinkedService2["Quora"] = "quora";
      RiskCheckLinkedService2["Qzone"] = "qzone";
      RiskCheckLinkedService2["Rambler"] = "rambler";
      RiskCheckLinkedService2["Rappi"] = "rappi";
      RiskCheckLinkedService2["Replit"] = "replit";
      RiskCheckLinkedService2["Samsung"] = "samsung";
      RiskCheckLinkedService2["Seoclerks"] = "seoclerks";
      RiskCheckLinkedService2["Shopclues"] = "shopclues";
      RiskCheckLinkedService2["Skype"] = "skype";
      RiskCheckLinkedService2["Snapchat"] = "snapchat";
      RiskCheckLinkedService2["Snapdeal"] = "snapdeal";
      RiskCheckLinkedService2["Soundcloud"] = "soundcloud";
      RiskCheckLinkedService2["Spotify"] = "spotify";
      RiskCheckLinkedService2["Starz"] = "starz";
      RiskCheckLinkedService2["Strava"] = "strava";
      RiskCheckLinkedService2["Taringa"] = "taringa";
      RiskCheckLinkedService2["Telegram"] = "telegram";
      RiskCheckLinkedService2["Tiki"] = "tiki";
      RiskCheckLinkedService2["Tokopedia"] = "tokopedia";
      RiskCheckLinkedService2["Treehouse"] = "treehouse";
      RiskCheckLinkedService2["Tumblr"] = "tumblr";
      RiskCheckLinkedService2["Twitter"] = "twitter";
      RiskCheckLinkedService2["Venmo"] = "venmo";
      RiskCheckLinkedService2["Viber"] = "viber";
      RiskCheckLinkedService2["Vimeo"] = "vimeo";
      RiskCheckLinkedService2["Vivino"] = "vivino";
      RiskCheckLinkedService2["Vkontakte"] = "vkontakte";
      RiskCheckLinkedService2["Wattpad"] = "wattpad";
      RiskCheckLinkedService2["Weibo"] = "weibo";
      RiskCheckLinkedService2["Whatsapp"] = "whatsapp";
      RiskCheckLinkedService2["Wordpress"] = "wordpress";
      RiskCheckLinkedService2["Xing"] = "xing";
      RiskCheckLinkedService2["Yahoo"] = "yahoo";
      RiskCheckLinkedService2["Yandex"] = "yandex";
      RiskCheckLinkedService2["Zalo"] = "zalo";
      RiskCheckLinkedService2["Zoho"] = "zoho";
    })(RiskCheckLinkedService = exports.RiskCheckLinkedService || (exports.RiskCheckLinkedService = {}));
    var RiskSignalDocumentStatus;
    (function(RiskSignalDocumentStatus2) {
      RiskSignalDocumentStatus2["Processing"] = "PROCESSING";
      RiskSignalDocumentStatus2["ProcessingComplete"] = "PROCESSING_COMPLETE";
      RiskSignalDocumentStatus2["ProcessingError"] = "PROCESSING_ERROR";
      RiskSignalDocumentStatus2["PasswordProtected"] = "PASSWORD_PROTECTED";
      RiskSignalDocumentStatus2["VirusDetected"] = "VIRUS_DETECTED";
    })(RiskSignalDocumentStatus = exports.RiskSignalDocumentStatus || (exports.RiskSignalDocumentStatus = {}));
    var RiskSignalDocumentType;
    (function(RiskSignalDocumentType2) {
      RiskSignalDocumentType2["Unknown"] = "UNKNOWN";
      RiskSignalDocumentType2["BankStatement"] = "BANK_STATEMENT";
      RiskSignalDocumentType2["BenefitsStatement"] = "BENEFITS_STATEMENT";
      RiskSignalDocumentType2["BusinessFiling"] = "BUSINESS_FILING";
      RiskSignalDocumentType2["Check"] = "CHECK";
      RiskSignalDocumentType2["DrivingLicense"] = "DRIVING_LICENSE";
      RiskSignalDocumentType2["FinancialStatement"] = "FINANCIAL_STATEMENT";
      RiskSignalDocumentType2["Invoice"] = "INVOICE";
      RiskSignalDocumentType2["Payslip"] = "PAYSLIP";
      RiskSignalDocumentType2["SocialSecurityCard"] = "SOCIAL_SECURITY_CARD";
      RiskSignalDocumentType2["TaxForm"] = "TAX_FORM";
      RiskSignalDocumentType2["UtilityBill"] = "UTILITY_BILL";
    })(RiskSignalDocumentType = exports.RiskSignalDocumentType || (exports.RiskSignalDocumentType = {}));
    var RiskSignalFileType;
    (function(RiskSignalFileType2) {
      RiskSignalFileType2["Unknown"] = "UNKNOWN";
      RiskSignalFileType2["ImagePdf"] = "IMAGE_PDF";
      RiskSignalFileType2["ScanOcr"] = "SCAN_OCR";
      RiskSignalFileType2["TruePdf"] = "TRUE_PDF";
      RiskSignalFileType2["Image"] = "IMAGE";
      RiskSignalFileType2["MixedPagePdf"] = "MIXED_PAGE_PDF";
      RiskSignalFileType2["EmptyPdf"] = "EMPTY_PDF";
      RiskSignalFileType2["FlattenedPdf"] = "FLATTENED_PDF";
    })(RiskSignalFileType = exports.RiskSignalFileType || (exports.RiskSignalFileType = {}));
    var SandboxBankIncomeWebhookFireRequestWebhookCode;
    (function(SandboxBankIncomeWebhookFireRequestWebhookCode2) {
      SandboxBankIncomeWebhookFireRequestWebhookCode2["Update"] = "BANK_INCOME_REFRESH_UPDATE";
      SandboxBankIncomeWebhookFireRequestWebhookCode2["Complete"] = "BANK_INCOME_REFRESH_COMPLETE";
    })(SandboxBankIncomeWebhookFireRequestWebhookCode = exports.SandboxBankIncomeWebhookFireRequestWebhookCode || (exports.SandboxBankIncomeWebhookFireRequestWebhookCode = {}));
    var SandboxIncomeFireWebhookRequestVerificationStatusEnum;
    (function(SandboxIncomeFireWebhookRequestVerificationStatusEnum2) {
      SandboxIncomeFireWebhookRequestVerificationStatusEnum2["ProcessingComplete"] = "VERIFICATION_STATUS_PROCESSING_COMPLETE";
      SandboxIncomeFireWebhookRequestVerificationStatusEnum2["ProcessingFailed"] = "VERIFICATION_STATUS_PROCESSING_FAILED";
      SandboxIncomeFireWebhookRequestVerificationStatusEnum2["PendingApproval"] = "VERIFICATION_STATUS_PENDING_APPROVAL";
    })(SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum || (exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = {}));
    var SandboxIncomeWebhookFireRequestWebhookCode;
    (function(SandboxIncomeWebhookFireRequestWebhookCode2) {
      SandboxIncomeWebhookFireRequestWebhookCode2["Verification"] = "INCOME_VERIFICATION";
      SandboxIncomeWebhookFireRequestWebhookCode2["VerificationRiskSignals"] = "INCOME_VERIFICATION_RISK_SIGNALS";
    })(SandboxIncomeWebhookFireRequestWebhookCode = exports.SandboxIncomeWebhookFireRequestWebhookCode || (exports.SandboxIncomeWebhookFireRequestWebhookCode = {}));
    var SandboxItemFireWebhookRequestWebhookCodeEnum;
    (function(SandboxItemFireWebhookRequestWebhookCodeEnum2) {
      SandboxItemFireWebhookRequestWebhookCodeEnum2["DefaultUpdate"] = "DEFAULT_UPDATE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["NewAccountsAvailable"] = "NEW_ACCOUNTS_AVAILABLE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["SmsMicrodepositsVerification"] = "SMS_MICRODEPOSITS_VERIFICATION";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["AuthorizationGranted"] = "AUTHORIZATION_GRANTED";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["RecurringTransactionsUpdate"] = "RECURRING_TRANSACTIONS_UPDATE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["LoginRepaired"] = "LOGIN_REPAIRED";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["SyncUpdatesAvailable"] = "SYNC_UPDATES_AVAILABLE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["ProductReady"] = "PRODUCT_READY";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["Error"] = "ERROR";
    })(SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum || (exports.SandboxItemFireWebhookRequestWebhookCodeEnum = {}));
    var SandboxItemSetVerificationStatusRequestVerificationStatusEnum;
    (function(SandboxItemSetVerificationStatusRequestVerificationStatusEnum2) {
      SandboxItemSetVerificationStatusRequestVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      SandboxItemSetVerificationStatusRequestVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
    })(SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum || (exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = {}));
    var ScopesContext;
    (function(ScopesContext2) {
      ScopesContext2["Enrollment"] = "ENROLLMENT";
      ScopesContext2["Portal"] = "PORTAL";
    })(ScopesContext = exports.ScopesContext || (exports.ScopesContext = {}));
    var SelfieAnalysisDocumentComparison;
    (function(SelfieAnalysisDocumentComparison2) {
      SelfieAnalysisDocumentComparison2["Match"] = "match";
      SelfieAnalysisDocumentComparison2["NoMatch"] = "no_match";
      SelfieAnalysisDocumentComparison2["NoInput"] = "no_input";
    })(SelfieAnalysisDocumentComparison = exports.SelfieAnalysisDocumentComparison || (exports.SelfieAnalysisDocumentComparison = {}));
    var SelfieCheckStatus;
    (function(SelfieCheckStatus2) {
      SelfieCheckStatus2["Success"] = "success";
      SelfieCheckStatus2["Failed"] = "failed";
    })(SelfieCheckStatus = exports.SelfieCheckStatus || (exports.SelfieCheckStatus = {}));
    var SelfieStatus;
    (function(SelfieStatus2) {
      SelfieStatus2["Success"] = "success";
      SelfieStatus2["Failed"] = "failed";
    })(SelfieStatus = exports.SelfieStatus || (exports.SelfieStatus = {}));
    var ServiceProductFulfillmentIdentifier;
    (function(ServiceProductFulfillmentIdentifier2) {
      ServiceProductFulfillmentIdentifier2["Voa"] = "VOA";
      ServiceProductFulfillmentIdentifier2["Voe"] = "VOE";
    })(ServiceProductFulfillmentIdentifier = exports.ServiceProductFulfillmentIdentifier || (exports.ServiceProductFulfillmentIdentifier = {}));
    var SignalDecisionOutcome;
    (function(SignalDecisionOutcome2) {
      SignalDecisionOutcome2["Approve"] = "APPROVE";
      SignalDecisionOutcome2["Review"] = "REVIEW";
      SignalDecisionOutcome2["Reject"] = "REJECT";
      SignalDecisionOutcome2["TakeOtherRiskMeasures"] = "TAKE_OTHER_RISK_MEASURES";
      SignalDecisionOutcome2["NotEvaluated"] = "NOT_EVALUATED";
    })(SignalDecisionOutcome = exports.SignalDecisionOutcome || (exports.SignalDecisionOutcome = {}));
    var SignalPaymentMethod;
    (function(SignalPaymentMethod2) {
      SignalPaymentMethod2["SameDayAch"] = "SAME_DAY_ACH";
      SignalPaymentMethod2["NextDayAch"] = "NEXT_DAY_ACH";
      SignalPaymentMethod2["StandardAch"] = "STANDARD_ACH";
      SignalPaymentMethod2["RealTimePayments"] = "REAL_TIME_PAYMENTS";
      SignalPaymentMethod2["DebitCard"] = "DEBIT_CARD";
      SignalPaymentMethod2["MultiplePaymentMethods"] = "MULTIPLE_PAYMENT_METHODS";
    })(SignalPaymentMethod = exports.SignalPaymentMethod || (exports.SignalPaymentMethod = {}));
    var Source;
    (function(Source2) {
      Source2["Dashboard"] = "dashboard";
      Source2["Link"] = "link";
      Source2["Api"] = "api";
      Source2["System"] = "system";
    })(Source = exports.Source || (exports.Source = {}));
    var StatementsRefreshCompleteResult;
    (function(StatementsRefreshCompleteResult2) {
      StatementsRefreshCompleteResult2["Success"] = "SUCCESS";
      StatementsRefreshCompleteResult2["Failure"] = "FAILURE";
    })(StatementsRefreshCompleteResult = exports.StatementsRefreshCompleteResult || (exports.StatementsRefreshCompleteResult = {}));
    var Strategy;
    (function(Strategy2) {
      Strategy2["Reset"] = "reset";
      Strategy2["Incomplete"] = "incomplete";
      Strategy2["Infer"] = "infer";
      Strategy2["Custom"] = "custom";
    })(Strategy = exports.Strategy || (exports.Strategy = {}));
    var StudentLoanStatusTypeEnum;
    (function(StudentLoanStatusTypeEnum2) {
      StudentLoanStatusTypeEnum2["Cancelled"] = "cancelled";
      StudentLoanStatusTypeEnum2["ChargedOff"] = "charged off";
      StudentLoanStatusTypeEnum2["Claim"] = "claim";
      StudentLoanStatusTypeEnum2["Consolidated"] = "consolidated";
      StudentLoanStatusTypeEnum2["Deferment"] = "deferment";
      StudentLoanStatusTypeEnum2["Delinquent"] = "delinquent";
      StudentLoanStatusTypeEnum2["Discharged"] = "discharged";
      StudentLoanStatusTypeEnum2["Extension"] = "extension";
      StudentLoanStatusTypeEnum2["Forbearance"] = "forbearance";
      StudentLoanStatusTypeEnum2["InGrace"] = "in grace";
      StudentLoanStatusTypeEnum2["InMilitary"] = "in military";
      StudentLoanStatusTypeEnum2["InSchool"] = "in school";
      StudentLoanStatusTypeEnum2["NotFullyDisbursed"] = "not fully disbursed";
      StudentLoanStatusTypeEnum2["Other"] = "other";
      StudentLoanStatusTypeEnum2["PaidInFull"] = "paid in full";
      StudentLoanStatusTypeEnum2["Refunded"] = "refunded";
      StudentLoanStatusTypeEnum2["Repayment"] = "repayment";
      StudentLoanStatusTypeEnum2["Transferred"] = "transferred";
      StudentLoanStatusTypeEnum2["PendingIdr"] = "pending idr";
    })(StudentLoanStatusTypeEnum = exports.StudentLoanStatusTypeEnum || (exports.StudentLoanStatusTypeEnum = {}));
    var StudentRepaymentPlanTypeEnum;
    (function(StudentRepaymentPlanTypeEnum2) {
      StudentRepaymentPlanTypeEnum2["ExtendedGraduated"] = "extended graduated";
      StudentRepaymentPlanTypeEnum2["ExtendedStandard"] = "extended standard";
      StudentRepaymentPlanTypeEnum2["Graduated"] = "graduated";
      StudentRepaymentPlanTypeEnum2["IncomeContingentRepayment"] = "income-contingent repayment";
      StudentRepaymentPlanTypeEnum2["IncomeBasedRepayment"] = "income-based repayment";
      StudentRepaymentPlanTypeEnum2["IncomeSensitiveRepayment"] = "income-sensitive repayment";
      StudentRepaymentPlanTypeEnum2["InterestOnly"] = "interest-only";
      StudentRepaymentPlanTypeEnum2["Other"] = "other";
      StudentRepaymentPlanTypeEnum2["PayAsYouEarn"] = "pay as you earn";
      StudentRepaymentPlanTypeEnum2["RevisedPayAsYouEarn"] = "revised pay as you earn";
      StudentRepaymentPlanTypeEnum2["Standard"] = "standard";
      StudentRepaymentPlanTypeEnum2["SavingOnAValuableEducation"] = "saving on a valuable education";
      StudentRepaymentPlanTypeEnum2["Null"] = "null";
    })(StudentRepaymentPlanTypeEnum = exports.StudentRepaymentPlanTypeEnum || (exports.StudentRepaymentPlanTypeEnum = {}));
    var SweepStatus;
    (function(SweepStatus2) {
      SweepStatus2["Pending"] = "pending";
      SweepStatus2["Posted"] = "posted";
      SweepStatus2["Settled"] = "settled";
      SweepStatus2["Returned"] = "returned";
      SweepStatus2["Failed"] = "failed";
      SweepStatus2["Null"] = "null";
    })(SweepStatus = exports.SweepStatus || (exports.SweepStatus = {}));
    var SweepTrigger;
    (function(SweepTrigger2) {
      SweepTrigger2["Manual"] = "manual";
      SweepTrigger2["Incoming"] = "incoming";
      SweepTrigger2["BalanceThreshold"] = "balance_threshold";
      SweepTrigger2["AutomaticAggregate"] = "automatic_aggregate";
    })(SweepTrigger = exports.SweepTrigger || (exports.SweepTrigger = {}));
    var TaxpayerIdentifierType;
    (function(TaxpayerIdentifierType2) {
      TaxpayerIdentifierType2["IndividualTaxpayerIdentificationNumber"] = "IndividualTaxpayerIdentificationNumber";
      TaxpayerIdentifierType2["SocialSecurityNumber"] = "SocialSecurityNumber";
    })(TaxpayerIdentifierType = exports.TaxpayerIdentifierType || (exports.TaxpayerIdentifierType = {}));
    var TotalCanonicalDescription;
    (function(TotalCanonicalDescription2) {
      TotalCanonicalDescription2["Bonus"] = "BONUS";
      TotalCanonicalDescription2["Commission"] = "COMMISSION";
      TotalCanonicalDescription2["Overtime"] = "OVERTIME";
      TotalCanonicalDescription2["PaidTimeOff"] = "PAID TIME OFF";
      TotalCanonicalDescription2["RegularPay"] = "REGULAR PAY";
      TotalCanonicalDescription2["Vacation"] = "VACATION";
      TotalCanonicalDescription2["EmployeeMedicare"] = "EMPLOYEE MEDICARE";
      TotalCanonicalDescription2["Fica"] = "FICA";
      TotalCanonicalDescription2["SocialSecurityEmployeeTax"] = "SOCIAL SECURITY EMPLOYEE TAX";
      TotalCanonicalDescription2["Medical"] = "MEDICAL";
      TotalCanonicalDescription2["Vision"] = "VISION";
      TotalCanonicalDescription2["Dental"] = "DENTAL";
      TotalCanonicalDescription2["NetPay"] = "NET PAY";
      TotalCanonicalDescription2["Taxes"] = "TAXES";
      TotalCanonicalDescription2["NotFound"] = "NOT_FOUND";
      TotalCanonicalDescription2["Other"] = "OTHER";
      TotalCanonicalDescription2["Null"] = "null";
    })(TotalCanonicalDescription = exports.TotalCanonicalDescription || (exports.TotalCanonicalDescription = {}));
    var TransactionTransactionTypeEnum;
    (function(TransactionTransactionTypeEnum2) {
      TransactionTransactionTypeEnum2["Digital"] = "digital";
      TransactionTransactionTypeEnum2["Place"] = "place";
      TransactionTransactionTypeEnum2["Special"] = "special";
      TransactionTransactionTypeEnum2["Unresolved"] = "unresolved";
    })(TransactionTransactionTypeEnum = exports.TransactionTransactionTypeEnum || (exports.TransactionTransactionTypeEnum = {}));
    var TransactionPaymentChannelEnum;
    (function(TransactionPaymentChannelEnum2) {
      TransactionPaymentChannelEnum2["Online"] = "online";
      TransactionPaymentChannelEnum2["InStore"] = "in store";
      TransactionPaymentChannelEnum2["Other"] = "other";
    })(TransactionPaymentChannelEnum = exports.TransactionPaymentChannelEnum || (exports.TransactionPaymentChannelEnum = {}));
    var TransactionAllOfPaymentChannelEnum;
    (function(TransactionAllOfPaymentChannelEnum2) {
      TransactionAllOfPaymentChannelEnum2["Online"] = "online";
      TransactionAllOfPaymentChannelEnum2["InStore"] = "in store";
      TransactionAllOfPaymentChannelEnum2["Other"] = "other";
    })(TransactionAllOfPaymentChannelEnum = exports.TransactionAllOfPaymentChannelEnum || (exports.TransactionAllOfPaymentChannelEnum = {}));
    var TransactionBaseTransactionTypeEnum;
    (function(TransactionBaseTransactionTypeEnum2) {
      TransactionBaseTransactionTypeEnum2["Digital"] = "digital";
      TransactionBaseTransactionTypeEnum2["Place"] = "place";
      TransactionBaseTransactionTypeEnum2["Special"] = "special";
      TransactionBaseTransactionTypeEnum2["Unresolved"] = "unresolved";
    })(TransactionBaseTransactionTypeEnum = exports.TransactionBaseTransactionTypeEnum || (exports.TransactionBaseTransactionTypeEnum = {}));
    var TransactionCode;
    (function(TransactionCode2) {
      TransactionCode2["Adjustment"] = "adjustment";
      TransactionCode2["Atm"] = "atm";
      TransactionCode2["BankCharge"] = "bank charge";
      TransactionCode2["BillPayment"] = "bill payment";
      TransactionCode2["Cash"] = "cash";
      TransactionCode2["Cashback"] = "cashback";
      TransactionCode2["Cheque"] = "cheque";
      TransactionCode2["DirectDebit"] = "direct debit";
      TransactionCode2["Interest"] = "interest";
      TransactionCode2["Purchase"] = "purchase";
      TransactionCode2["StandingOrder"] = "standing order";
      TransactionCode2["Transfer"] = "transfer";
      TransactionCode2["Null"] = "null";
    })(TransactionCode = exports.TransactionCode || (exports.TransactionCode = {}));
    var TransactionStreamStatus;
    (function(TransactionStreamStatus2) {
      TransactionStreamStatus2["Unknown"] = "UNKNOWN";
      TransactionStreamStatus2["Mature"] = "MATURE";
      TransactionStreamStatus2["EarlyDetection"] = "EARLY_DETECTION";
      TransactionStreamStatus2["Tombstoned"] = "TOMBSTONED";
    })(TransactionStreamStatus = exports.TransactionStreamStatus || (exports.TransactionStreamStatus = {}));
    var TransactionsRuleField;
    (function(TransactionsRuleField2) {
      TransactionsRuleField2["TransactionId"] = "TRANSACTION_ID";
      TransactionsRuleField2["Name"] = "NAME";
    })(TransactionsRuleField = exports.TransactionsRuleField || (exports.TransactionsRuleField = {}));
    var TransactionsRuleType;
    (function(TransactionsRuleType2) {
      TransactionsRuleType2["ExactMatch"] = "EXACT_MATCH";
      TransactionsRuleType2["SubstringMatch"] = "SUBSTRING_MATCH";
    })(TransactionsRuleType = exports.TransactionsRuleType || (exports.TransactionsRuleType = {}));
    var TransactionsUpdateStatus;
    (function(TransactionsUpdateStatus2) {
      TransactionsUpdateStatus2["TransactionsUpdateStatusUnknown"] = "TRANSACTIONS_UPDATE_STATUS_UNKNOWN";
      TransactionsUpdateStatus2["NotReady"] = "NOT_READY";
      TransactionsUpdateStatus2["InitialUpdateComplete"] = "INITIAL_UPDATE_COMPLETE";
      TransactionsUpdateStatus2["HistoricalUpdateComplete"] = "HISTORICAL_UPDATE_COMPLETE";
    })(TransactionsUpdateStatus = exports.TransactionsUpdateStatus || (exports.TransactionsUpdateStatus = {}));
    var TransferACHNetwork;
    (function(TransferACHNetwork2) {
      TransferACHNetwork2["Ach"] = "ach";
      TransferACHNetwork2["SameDayAch"] = "same-day-ach";
    })(TransferACHNetwork = exports.TransferACHNetwork || (exports.TransferACHNetwork = {}));
    var TransferAuthorizationDecision;
    (function(TransferAuthorizationDecision2) {
      TransferAuthorizationDecision2["Approved"] = "approved";
      TransferAuthorizationDecision2["Declined"] = "declined";
      TransferAuthorizationDecision2["UserActionRequired"] = "user_action_required";
    })(TransferAuthorizationDecision = exports.TransferAuthorizationDecision || (exports.TransferAuthorizationDecision = {}));
    var TransferAuthorizationDecisionRationaleCode;
    (function(TransferAuthorizationDecisionRationaleCode2) {
      TransferAuthorizationDecisionRationaleCode2["Nsf"] = "NSF";
      TransferAuthorizationDecisionRationaleCode2["Risk"] = "RISK";
      TransferAuthorizationDecisionRationaleCode2["TransferLimitReached"] = "TRANSFER_LIMIT_REACHED";
      TransferAuthorizationDecisionRationaleCode2["ManuallyVerifiedItem"] = "MANUALLY_VERIFIED_ITEM";
      TransferAuthorizationDecisionRationaleCode2["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
      TransferAuthorizationDecisionRationaleCode2["PaymentProfileLoginRequired"] = "PAYMENT_PROFILE_LOGIN_REQUIRED";
      TransferAuthorizationDecisionRationaleCode2["Error"] = "ERROR";
      TransferAuthorizationDecisionRationaleCode2["MigratedAccountItem"] = "MIGRATED_ACCOUNT_ITEM";
      TransferAuthorizationDecisionRationaleCode2["Null"] = "null";
    })(TransferAuthorizationDecisionRationaleCode = exports.TransferAuthorizationDecisionRationaleCode || (exports.TransferAuthorizationDecisionRationaleCode = {}));
    var TransferAuthorizationGuaranteeDecision;
    (function(TransferAuthorizationGuaranteeDecision2) {
      TransferAuthorizationGuaranteeDecision2["Guaranteed"] = "GUARANTEED";
      TransferAuthorizationGuaranteeDecision2["NotGuaranteed"] = "NOT_GUARANTEED";
      TransferAuthorizationGuaranteeDecision2["Null"] = "null";
    })(TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationGuaranteeDecision || (exports.TransferAuthorizationGuaranteeDecision = {}));
    var TransferAuthorizationGuaranteeDecisionRationaleCode;
    (function(TransferAuthorizationGuaranteeDecisionRationaleCode2) {
      TransferAuthorizationGuaranteeDecisionRationaleCode2["ReturnBank"] = "RETURN_BANK";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["ReturnCustomer"] = "RETURN_CUSTOMER";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["GuaranteeLimitReached"] = "GUARANTEE_LIMIT_REACHED";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["RiskEstimateUnavailable"] = "RISK_ESTIMATE_UNAVAILABLE";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["RequiredParamMissing"] = "REQUIRED_PARAM_MISSING";
    })(TransferAuthorizationGuaranteeDecisionRationaleCode = exports.TransferAuthorizationGuaranteeDecisionRationaleCode || (exports.TransferAuthorizationGuaranteeDecisionRationaleCode = {}));
    var TransferAuthorizationRiskLevel;
    (function(TransferAuthorizationRiskLevel2) {
      TransferAuthorizationRiskLevel2["HighRisk"] = "HIGH_RISK";
      TransferAuthorizationRiskLevel2["MediumHighRisk"] = "MEDIUM_HIGH_RISK";
      TransferAuthorizationRiskLevel2["MediumRisk"] = "MEDIUM_RISK";
      TransferAuthorizationRiskLevel2["MediumLowRisk"] = "MEDIUM_LOW_RISK";
      TransferAuthorizationRiskLevel2["LowRisk"] = "LOW_RISK";
    })(TransferAuthorizationRiskLevel = exports.TransferAuthorizationRiskLevel || (exports.TransferAuthorizationRiskLevel = {}));
    var TransferBalanceType;
    (function(TransferBalanceType2) {
      TransferBalanceType2["RtpCredits"] = "prefunded_rtp_credits";
      TransferBalanceType2["AchCredits"] = "prefunded_ach_credits";
    })(TransferBalanceType = exports.TransferBalanceType || (exports.TransferBalanceType = {}));
    var TransferCreditFundsSource;
    (function(TransferCreditFundsSource2) {
      TransferCreditFundsSource2["Sweep"] = "sweep";
      TransferCreditFundsSource2["PrefundedRtpCredits"] = "prefunded_rtp_credits";
      TransferCreditFundsSource2["PrefundedAchCredits"] = "prefunded_ach_credits";
      TransferCreditFundsSource2["Null"] = "null";
    })(TransferCreditFundsSource = exports.TransferCreditFundsSource || (exports.TransferCreditFundsSource = {}));
    var TransferDiligenceStatus;
    (function(TransferDiligenceStatus2) {
      TransferDiligenceStatus2["NotSubmitted"] = "not_submitted";
      TransferDiligenceStatus2["Submitted"] = "submitted";
      TransferDiligenceStatus2["UnderReview"] = "under_review";
      TransferDiligenceStatus2["Approved"] = "approved";
      TransferDiligenceStatus2["Denied"] = "denied";
    })(TransferDiligenceStatus = exports.TransferDiligenceStatus || (exports.TransferDiligenceStatus = {}));
    var TransferDocumentPurpose;
    (function(TransferDocumentPurpose2) {
      TransferDocumentPurpose2["DueDiligence"] = "DUE_DILIGENCE";
    })(TransferDocumentPurpose = exports.TransferDocumentPurpose || (exports.TransferDocumentPurpose = {}));
    var TransferEventListTransferType;
    (function(TransferEventListTransferType2) {
      TransferEventListTransferType2["Debit"] = "debit";
      TransferEventListTransferType2["Credit"] = "credit";
      TransferEventListTransferType2["Null"] = "null";
    })(TransferEventListTransferType = exports.TransferEventListTransferType || (exports.TransferEventListTransferType = {}));
    var TransferEventType;
    (function(TransferEventType2) {
      TransferEventType2["Pending"] = "pending";
      TransferEventType2["Cancelled"] = "cancelled";
      TransferEventType2["Failed"] = "failed";
      TransferEventType2["Posted"] = "posted";
      TransferEventType2["Settled"] = "settled";
      TransferEventType2["FundsAvailable"] = "funds_available";
      TransferEventType2["Returned"] = "returned";
      TransferEventType2["Swept"] = "swept";
      TransferEventType2["SweptSettled"] = "swept_settled";
      TransferEventType2["ReturnSwept"] = "return_swept";
      TransferEventType2["SweepPending"] = "sweep.pending";
      TransferEventType2["SweepPosted"] = "sweep.posted";
      TransferEventType2["SweepSettled"] = "sweep.settled";
      TransferEventType2["SweepReturned"] = "sweep.returned";
      TransferEventType2["SweepFailed"] = "sweep.failed";
      TransferEventType2["RefundPending"] = "refund.pending";
      TransferEventType2["RefundCancelled"] = "refund.cancelled";
      TransferEventType2["RefundFailed"] = "refund.failed";
      TransferEventType2["RefundPosted"] = "refund.posted";
      TransferEventType2["RefundSettled"] = "refund.settled";
      TransferEventType2["RefundReturned"] = "refund.returned";
      TransferEventType2["RefundSwept"] = "refund.swept";
      TransferEventType2["RefundReturnSwept"] = "refund.return_swept";
    })(TransferEventType = exports.TransferEventType || (exports.TransferEventType = {}));
    var TransferIntentAuthorizationDecision;
    (function(TransferIntentAuthorizationDecision2) {
      TransferIntentAuthorizationDecision2["Approved"] = "APPROVED";
      TransferIntentAuthorizationDecision2["Declined"] = "DECLINED";
    })(TransferIntentAuthorizationDecision = exports.TransferIntentAuthorizationDecision || (exports.TransferIntentAuthorizationDecision = {}));
    var TransferIntentCreateMode;
    (function(TransferIntentCreateMode2) {
      TransferIntentCreateMode2["Payment"] = "PAYMENT";
      TransferIntentCreateMode2["Disbursement"] = "DISBURSEMENT";
    })(TransferIntentCreateMode = exports.TransferIntentCreateMode || (exports.TransferIntentCreateMode = {}));
    var TransferIntentCreateNetwork;
    (function(TransferIntentCreateNetwork2) {
      TransferIntentCreateNetwork2["Ach"] = "ach";
      TransferIntentCreateNetwork2["SameDayAch"] = "same-day-ach";
      TransferIntentCreateNetwork2["Rtp"] = "rtp";
    })(TransferIntentCreateNetwork = exports.TransferIntentCreateNetwork || (exports.TransferIntentCreateNetwork = {}));
    var TransferIntentStatus;
    (function(TransferIntentStatus2) {
      TransferIntentStatus2["Pending"] = "PENDING";
      TransferIntentStatus2["Succeeded"] = "SUCCEEDED";
      TransferIntentStatus2["Failed"] = "FAILED";
    })(TransferIntentStatus = exports.TransferIntentStatus || (exports.TransferIntentStatus = {}));
    var TransferLedgerSweepSimulateEventType;
    (function(TransferLedgerSweepSimulateEventType2) {
      TransferLedgerSweepSimulateEventType2["Posted"] = "sweep.posted";
      TransferLedgerSweepSimulateEventType2["Settled"] = "sweep.settled";
      TransferLedgerSweepSimulateEventType2["Returned"] = "sweep.returned";
      TransferLedgerSweepSimulateEventType2["Failed"] = "sweep.failed";
    })(TransferLedgerSweepSimulateEventType = exports.TransferLedgerSweepSimulateEventType || (exports.TransferLedgerSweepSimulateEventType = {}));
    var TransferNetwork;
    (function(TransferNetwork2) {
      TransferNetwork2["Ach"] = "ach";
      TransferNetwork2["SameDayAch"] = "same-day-ach";
      TransferNetwork2["Rtp"] = "rtp";
      TransferNetwork2["Wire"] = "wire";
    })(TransferNetwork = exports.TransferNetwork || (exports.TransferNetwork = {}));
    var TransferRecurringNetwork;
    (function(TransferRecurringNetwork2) {
      TransferRecurringNetwork2["Ach"] = "ach";
      TransferRecurringNetwork2["SameDayAch"] = "same-day-ach";
      TransferRecurringNetwork2["Rtp"] = "rtp";
    })(TransferRecurringNetwork = exports.TransferRecurringNetwork || (exports.TransferRecurringNetwork = {}));
    var TransferRecurringStatus;
    (function(TransferRecurringStatus2) {
      TransferRecurringStatus2["Active"] = "active";
      TransferRecurringStatus2["Cancelled"] = "cancelled";
      TransferRecurringStatus2["Expired"] = "expired";
    })(TransferRecurringStatus = exports.TransferRecurringStatus || (exports.TransferRecurringStatus = {}));
    var TransferRefundStatus;
    (function(TransferRefundStatus2) {
      TransferRefundStatus2["Pending"] = "pending";
      TransferRefundStatus2["Posted"] = "posted";
      TransferRefundStatus2["Cancelled"] = "cancelled";
      TransferRefundStatus2["Failed"] = "failed";
      TransferRefundStatus2["Settled"] = "settled";
      TransferRefundStatus2["Returned"] = "returned";
    })(TransferRefundStatus = exports.TransferRefundStatus || (exports.TransferRefundStatus = {}));
    var TransferScheduleIntervalUnit;
    (function(TransferScheduleIntervalUnit2) {
      TransferScheduleIntervalUnit2["Week"] = "week";
      TransferScheduleIntervalUnit2["Month"] = "month";
    })(TransferScheduleIntervalUnit = exports.TransferScheduleIntervalUnit || (exports.TransferScheduleIntervalUnit = {}));
    var TransferStatus;
    (function(TransferStatus2) {
      TransferStatus2["Pending"] = "pending";
      TransferStatus2["Posted"] = "posted";
      TransferStatus2["Settled"] = "settled";
      TransferStatus2["FundsAvailable"] = "funds_available";
      TransferStatus2["Cancelled"] = "cancelled";
      TransferStatus2["Failed"] = "failed";
      TransferStatus2["Returned"] = "returned";
    })(TransferStatus = exports.TransferStatus || (exports.TransferStatus = {}));
    var TransferSweepStatus;
    (function(TransferSweepStatus2) {
      TransferSweepStatus2["Null"] = "null";
      TransferSweepStatus2["Unswept"] = "unswept";
      TransferSweepStatus2["Swept"] = "swept";
      TransferSweepStatus2["SweptSettled"] = "swept_settled";
      TransferSweepStatus2["ReturnSwept"] = "return_swept";
    })(TransferSweepStatus = exports.TransferSweepStatus || (exports.TransferSweepStatus = {}));
    var TransferType;
    (function(TransferType2) {
      TransferType2["Debit"] = "debit";
      TransferType2["Credit"] = "credit";
    })(TransferType = exports.TransferType || (exports.TransferType = {}));
    var UserStatedIncomeSourceCategory;
    (function(UserStatedIncomeSourceCategory2) {
      UserStatedIncomeSourceCategory2["Other"] = "OTHER";
      UserStatedIncomeSourceCategory2["Salary"] = "SALARY";
      UserStatedIncomeSourceCategory2["Unemployment"] = "UNEMPLOYMENT";
      UserStatedIncomeSourceCategory2["Cash"] = "CASH";
      UserStatedIncomeSourceCategory2["GigEconomy"] = "GIG_ECONOMY";
      UserStatedIncomeSourceCategory2["Rental"] = "RENTAL";
      UserStatedIncomeSourceCategory2["ChildSupport"] = "CHILD_SUPPORT";
      UserStatedIncomeSourceCategory2["Military"] = "MILITARY";
      UserStatedIncomeSourceCategory2["Retirement"] = "RETIREMENT";
      UserStatedIncomeSourceCategory2["LongTermDisability"] = "LONG_TERM_DISABILITY";
      UserStatedIncomeSourceCategory2["BankInterest"] = "BANK_INTEREST";
    })(UserStatedIncomeSourceCategory = exports.UserStatedIncomeSourceCategory || (exports.UserStatedIncomeSourceCategory = {}));
    var UserStatedIncomeSourceFrequency;
    (function(UserStatedIncomeSourceFrequency2) {
      UserStatedIncomeSourceFrequency2["Unknown"] = "UNKNOWN";
      UserStatedIncomeSourceFrequency2["Weekly"] = "WEEKLY";
      UserStatedIncomeSourceFrequency2["Biweekly"] = "BIWEEKLY";
      UserStatedIncomeSourceFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      UserStatedIncomeSourceFrequency2["Monthly"] = "MONTHLY";
    })(UserStatedIncomeSourceFrequency = exports.UserStatedIncomeSourceFrequency || (exports.UserStatedIncomeSourceFrequency = {}));
    var UserStatedIncomeSourcePayType;
    (function(UserStatedIncomeSourcePayType2) {
      UserStatedIncomeSourcePayType2["Unknown"] = "UNKNOWN";
      UserStatedIncomeSourcePayType2["Gross"] = "GROSS";
      UserStatedIncomeSourcePayType2["Net"] = "NET";
    })(UserStatedIncomeSourcePayType = exports.UserStatedIncomeSourcePayType || (exports.UserStatedIncomeSourcePayType = {}));
    var VerificationRefreshStatus;
    (function(VerificationRefreshStatus2) {
      VerificationRefreshStatus2["StatusUserPresenceRequired"] = "VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED";
      VerificationRefreshStatus2["Successful"] = "VERIFICATION_REFRESH_SUCCESSFUL";
      VerificationRefreshStatus2["NotFound"] = "VERIFICATION_REFRESH_NOT_FOUND";
    })(VerificationRefreshStatus = exports.VerificationRefreshStatus || (exports.VerificationRefreshStatus = {}));
    var VerificationStatus;
    (function(VerificationStatus2) {
      VerificationStatus2["Verified"] = "VERIFIED";
      VerificationStatus2["Unverified"] = "UNVERIFIED";
      VerificationStatus2["NeedsInfo"] = "NEEDS_INFO";
      VerificationStatus2["UnableToVerify"] = "UNABLE_TO_VERIFY";
      VerificationStatus2["Unknown"] = "UNKNOWN";
    })(VerificationStatus = exports.VerificationStatus || (exports.VerificationStatus = {}));
    var WalletISOCurrencyCode;
    (function(WalletISOCurrencyCode2) {
      WalletISOCurrencyCode2["Gbp"] = "GBP";
      WalletISOCurrencyCode2["Eur"] = "EUR";
    })(WalletISOCurrencyCode = exports.WalletISOCurrencyCode || (exports.WalletISOCurrencyCode = {}));
    var WalletPaymentScheme;
    (function(WalletPaymentScheme2) {
      WalletPaymentScheme2["Null"] = "null";
      WalletPaymentScheme2["FasterPayments"] = "FASTER_PAYMENTS";
      WalletPaymentScheme2["SepaCreditTransfer"] = "SEPA_CREDIT_TRANSFER";
      WalletPaymentScheme2["SepaCreditTransferInstant"] = "SEPA_CREDIT_TRANSFER_INSTANT";
    })(WalletPaymentScheme = exports.WalletPaymentScheme || (exports.WalletPaymentScheme = {}));
    var WalletStatus;
    (function(WalletStatus2) {
      WalletStatus2["Unknown"] = "UNKNOWN";
      WalletStatus2["Active"] = "ACTIVE";
      WalletStatus2["Closed"] = "CLOSED";
    })(WalletStatus = exports.WalletStatus || (exports.WalletStatus = {}));
    var WalletTransactionTypeEnum;
    (function(WalletTransactionTypeEnum2) {
      WalletTransactionTypeEnum2["BankTransfer"] = "BANK_TRANSFER";
      WalletTransactionTypeEnum2["Payout"] = "PAYOUT";
      WalletTransactionTypeEnum2["PisPayIn"] = "PIS_PAY_IN";
      WalletTransactionTypeEnum2["Refund"] = "REFUND";
      WalletTransactionTypeEnum2["FundsSweep"] = "FUNDS_SWEEP";
      WalletTransactionTypeEnum2["Return"] = "RETURN";
      WalletTransactionTypeEnum2["Recall"] = "RECALL";
    })(WalletTransactionTypeEnum = exports.WalletTransactionTypeEnum || (exports.WalletTransactionTypeEnum = {}));
    var WalletTransactionFailureReason;
    (function(WalletTransactionFailureReason2) {
      WalletTransactionFailureReason2["ExternalSystem"] = "EXTERNAL_SYSTEM";
      WalletTransactionFailureReason2["Expired"] = "EXPIRED";
      WalletTransactionFailureReason2["Cancelled"] = "CANCELLED";
      WalletTransactionFailureReason2["Invalid"] = "INVALID";
      WalletTransactionFailureReason2["Unknown"] = "UNKNOWN";
    })(WalletTransactionFailureReason = exports.WalletTransactionFailureReason || (exports.WalletTransactionFailureReason = {}));
    var WalletTransactionGetResponseTypeEnum;
    (function(WalletTransactionGetResponseTypeEnum2) {
      WalletTransactionGetResponseTypeEnum2["BankTransfer"] = "BANK_TRANSFER";
      WalletTransactionGetResponseTypeEnum2["Payout"] = "PAYOUT";
      WalletTransactionGetResponseTypeEnum2["PisPayIn"] = "PIS_PAY_IN";
      WalletTransactionGetResponseTypeEnum2["Refund"] = "REFUND";
      WalletTransactionGetResponseTypeEnum2["FundsSweep"] = "FUNDS_SWEEP";
      WalletTransactionGetResponseTypeEnum2["Return"] = "RETURN";
      WalletTransactionGetResponseTypeEnum2["Recall"] = "RECALL";
    })(WalletTransactionGetResponseTypeEnum = exports.WalletTransactionGetResponseTypeEnum || (exports.WalletTransactionGetResponseTypeEnum = {}));
    var WalletTransactionRelationTypeEnum;
    (function(WalletTransactionRelationTypeEnum2) {
      WalletTransactionRelationTypeEnum2["Payout"] = "PAYOUT";
      WalletTransactionRelationTypeEnum2["Return"] = "RETURN";
      WalletTransactionRelationTypeEnum2["Refund"] = "REFUND";
      WalletTransactionRelationTypeEnum2["FundsSweep"] = "FUNDS_SWEEP";
    })(WalletTransactionRelationTypeEnum = exports.WalletTransactionRelationTypeEnum || (exports.WalletTransactionRelationTypeEnum = {}));
    var WalletTransactionStatus;
    (function(WalletTransactionStatus2) {
      WalletTransactionStatus2["Authorising"] = "AUTHORISING";
      WalletTransactionStatus2["Initiated"] = "INITIATED";
      WalletTransactionStatus2["Executed"] = "EXECUTED";
      WalletTransactionStatus2["Settled"] = "SETTLED";
      WalletTransactionStatus2["Blocked"] = "BLOCKED";
      WalletTransactionStatus2["Failed"] = "FAILED";
    })(WalletTransactionStatus = exports.WalletTransactionStatus || (exports.WalletTransactionStatus = {}));
    var WarningWarningCodeEnum;
    (function(WarningWarningCodeEnum2) {
      WarningWarningCodeEnum2["OwnersUnavailable"] = "OWNERS_UNAVAILABLE";
      WarningWarningCodeEnum2["InvestmentsUnavailable"] = "INVESTMENTS_UNAVAILABLE";
      WarningWarningCodeEnum2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
    })(WarningWarningCodeEnum = exports.WarningWarningCodeEnum || (exports.WarningWarningCodeEnum = {}));
    var WatchlistScreeningDocumentType;
    (function(WatchlistScreeningDocumentType2) {
      WatchlistScreeningDocumentType2["BirthCertificate"] = "birth_certificate";
      WatchlistScreeningDocumentType2["DriversLicense"] = "drivers_license";
      WatchlistScreeningDocumentType2["ImmigrationNumber"] = "immigration_number";
      WatchlistScreeningDocumentType2["MilitaryId"] = "military_id";
      WatchlistScreeningDocumentType2["Other"] = "other";
      WatchlistScreeningDocumentType2["Passport"] = "passport";
      WatchlistScreeningDocumentType2["PersonalIdentification"] = "personal_identification";
      WatchlistScreeningDocumentType2["RationCard"] = "ration_card";
      WatchlistScreeningDocumentType2["Ssn"] = "ssn";
      WatchlistScreeningDocumentType2["StudentId"] = "student_id";
      WatchlistScreeningDocumentType2["TaxId"] = "tax_id";
      WatchlistScreeningDocumentType2["TravelDocument"] = "travel_document";
      WatchlistScreeningDocumentType2["VoterId"] = "voter_id";
    })(WatchlistScreeningDocumentType = exports.WatchlistScreeningDocumentType || (exports.WatchlistScreeningDocumentType = {}));
    var WatchlistScreeningEntityUpdateRequestResettableField;
    (function(WatchlistScreeningEntityUpdateRequestResettableField2) {
      WatchlistScreeningEntityUpdateRequestResettableField2["Assignee"] = "assignee";
    })(WatchlistScreeningEntityUpdateRequestResettableField = exports.WatchlistScreeningEntityUpdateRequestResettableField || (exports.WatchlistScreeningEntityUpdateRequestResettableField = {}));
    var WatchlistScreeningHitStatus;
    (function(WatchlistScreeningHitStatus2) {
      WatchlistScreeningHitStatus2["Confirmed"] = "confirmed";
      WatchlistScreeningHitStatus2["PendingReview"] = "pending_review";
      WatchlistScreeningHitStatus2["Dismissed"] = "dismissed";
    })(WatchlistScreeningHitStatus = exports.WatchlistScreeningHitStatus || (exports.WatchlistScreeningHitStatus = {}));
    var WatchlistScreeningIndividualUpdateRequestResettableField;
    (function(WatchlistScreeningIndividualUpdateRequestResettableField2) {
      WatchlistScreeningIndividualUpdateRequestResettableField2["Assignee"] = "assignee";
    })(WatchlistScreeningIndividualUpdateRequestResettableField = exports.WatchlistScreeningIndividualUpdateRequestResettableField || (exports.WatchlistScreeningIndividualUpdateRequestResettableField = {}));
    var WatchlistScreeningStatus;
    (function(WatchlistScreeningStatus2) {
      WatchlistScreeningStatus2["Rejected"] = "rejected";
      WatchlistScreeningStatus2["PendingReview"] = "pending_review";
      WatchlistScreeningStatus2["Cleared"] = "cleared";
    })(WatchlistScreeningStatus = exports.WatchlistScreeningStatus || (exports.WatchlistScreeningStatus = {}));
    var WeakAliasDetermination;
    (function(WeakAliasDetermination2) {
      WeakAliasDetermination2["None"] = "none";
      WeakAliasDetermination2["Source"] = "source";
      WeakAliasDetermination2["Plaid"] = "plaid";
    })(WeakAliasDetermination = exports.WeakAliasDetermination || (exports.WeakAliasDetermination = {}));
    var WebhookEnvironmentValues;
    (function(WebhookEnvironmentValues2) {
      WebhookEnvironmentValues2["Sandbox"] = "sandbox";
      WebhookEnvironmentValues2["Production"] = "production";
    })(WebhookEnvironmentValues = exports.WebhookEnvironmentValues || (exports.WebhookEnvironmentValues = {}));
    var WebhookType;
    (function(WebhookType2) {
      WebhookType2["Auth"] = "AUTH";
      WebhookType2["Holdings"] = "HOLDINGS";
      WebhookType2["InvestmentsTransactions"] = "INVESTMENTS_TRANSACTIONS";
      WebhookType2["Item"] = "ITEM";
      WebhookType2["Liabilities"] = "LIABILITIES";
      WebhookType2["Transactions"] = "TRANSACTIONS";
      WebhookType2["Assets"] = "ASSETS";
    })(WebhookType = exports.WebhookType || (exports.WebhookType = {}));
    var PlaidApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet: (accountsBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("accountsBalanceGet", "accountsBalanceGetRequest", accountsBalanceGetRequest);
          const localVarPath = `/accounts/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: (accountsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("accountsGet", "accountsGetRequest", accountsGetRequest);
          const localVarPath = `/accounts/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet: (applicationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("applicationGet", "applicationGetRequest", applicationGetRequest);
          const localVarPath = `/application/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(applicationGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate: (assetReportAuditCopyCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportAuditCopyCreate", "assetReportAuditCopyCreateRequest", assetReportAuditCopyCreateRequest);
          const localVarPath = `/asset_report/audit_copy/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet: (assetReportAuditCopyGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportAuditCopyGet", "assetReportAuditCopyGetRequest", assetReportAuditCopyGetRequest);
          const localVarPath = `/asset_report/audit_copy/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove: (assetReportAuditCopyRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportAuditCopyRemove", "assetReportAuditCopyRemoveRequest", assetReportAuditCopyRemoveRequest);
          const localVarPath = `/asset_report/audit_copy/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate: (assetReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportCreate", "assetReportCreateRequest", assetReportCreateRequest);
          const localVarPath = `/asset_report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter: (assetReportFilterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportFilter", "assetReportFilterRequest", assetReportFilterRequest);
          const localVarPath = `/asset_report/filter`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportFilterRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet: (assetReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportGet", "assetReportGetRequest", assetReportGetRequest);
          const localVarPath = `/asset_report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet: (assetReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportPdfGet", "assetReportPDFGetRequest", assetReportPDFGetRequest);
          const localVarPath = `/asset_report/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportPDFGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh: (assetReportRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportRefresh", "assetReportRefreshRequest", assetReportRefreshRequest);
          const localVarPath = `/asset_report/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove: (assetReportRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportRemove", "assetReportRemoveRequest", assetReportRemoveRequest);
          const localVarPath = `/asset_report/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet: (authGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("authGet", "authGetRequest", authGetRequest);
          const localVarPath = `/auth/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet: (bankTransferBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferBalanceGet", "bankTransferBalanceGetRequest", bankTransferBalanceGetRequest);
          const localVarPath = `/bank_transfer/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferBalanceGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel: (bankTransferCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferCancel", "bankTransferCancelRequest", bankTransferCancelRequest);
          const localVarPath = `/bank_transfer/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCancelRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate: (bankTransferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferCreate", "bankTransferCreateRequest", bankTransferCreateRequest);
          const localVarPath = `/bank_transfer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList: (bankTransferEventListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferEventList", "bankTransferEventListRequest", bankTransferEventListRequest);
          const localVarPath = `/bank_transfer/event/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync: (bankTransferEventSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferEventSync", "bankTransferEventSyncRequest", bankTransferEventSyncRequest);
          const localVarPath = `/bank_transfer/event/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventSyncRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet: (bankTransferGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferGet", "bankTransferGetRequest", bankTransferGetRequest);
          const localVarPath = `/bank_transfer/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList: (bankTransferListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferList", "bankTransferListRequest", bankTransferListRequest);
          const localVarPath = `/bank_transfer/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount: (bankTransferMigrateAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferMigrateAccount", "bankTransferMigrateAccountRequest", bankTransferMigrateAccountRequest);
          const localVarPath = `/bank_transfer/migrate_account`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferMigrateAccountRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet: (bankTransferSweepGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferSweepGet", "bankTransferSweepGetRequest", bankTransferSweepGetRequest);
          const localVarPath = `/bank_transfer/sweep/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList: (bankTransferSweepListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferSweepList", "bankTransferSweepListRequest", bankTransferSweepListRequest);
          const localVarPath = `/bank_transfer/sweep/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
         * @summary Evaluate risk of a bank account
         * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconAccountRiskEvaluate: (beaconAccountRiskEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconAccountRiskEvaluate", "beaconAccountRiskEvaluateRequest", beaconAccountRiskEvaluateRequest);
          const localVarPath = `/beacon/account_risk/v1/evaluate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconAccountRiskEvaluateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
         * @summary Get a Beacon Duplicate
         * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconDuplicateGet: (beaconDuplicateGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconDuplicateGet", "beaconDuplicateGetRequest", beaconDuplicateGetRequest);
          const localVarPath = `/beacon/duplicate/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconDuplicateGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a fraud report for a given Beacon User.
         * @summary Create a Beacon Report
         * @param {BeaconReportCreateRequest} beaconReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportCreate: (beaconReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportCreate", "beaconReportCreateRequest", beaconReportCreateRequest);
          const localVarPath = `/beacon/report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a Beacon report for a given Beacon report id.
         * @summary Get a Beacon Report
         * @param {BeaconReportGetRequest} beaconReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportGet: (beaconReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportGet", "beaconReportGetRequest", beaconReportGetRequest);
          const localVarPath = `/beacon/report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Reports for a Beacon User
         * @param {BeaconReportListRequest} beaconReportListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportList: (beaconReportListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportList", "beaconReportListRequest", beaconReportListRequest);
          const localVarPath = `/beacon/report/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
         * @summary Get a Beacon Report Syndication
         * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationGet: (beaconReportSyndicationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportSyndicationGet", "beaconReportSyndicationGetRequest", beaconReportSyndicationGetRequest);
          const localVarPath = `/beacon/report_syndication/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportSyndicationGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Report Syndications for a Beacon User
         * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationList: (beaconReportSyndicationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportSyndicationList", "beaconReportSyndicationListRequest", beaconReportSyndicationListRequest);
          const localVarPath = `/beacon/report_syndication/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportSyndicationListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
         * @summary Get Account Insights for a Beacon User
         * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserAccountInsightsGet: (beaconUserAccountInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserAccountInsightsGet", "beaconUserAccountInsightsGetRequest", beaconUserAccountInsightsGetRequest);
          const localVarPath = `/beacon/user/account_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserAccountInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
         * @summary Create a Beacon User
         * @param {BeaconUserCreateRequest} beaconUserCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserCreate: (beaconUserCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserCreate", "beaconUserCreateRequest", beaconUserCreateRequest);
          const localVarPath = `/beacon/user/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
         * @summary Get a Beacon User
         * @param {BeaconUserGetRequest} beaconUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserGet: (beaconUserGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserGet", "beaconUserGetRequest", beaconUserGetRequest);
          const localVarPath = `/beacon/user/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all changes to the Beacon User in reverse-chronological order.
         * @summary List a Beacon User\'s history
         * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserHistoryList: (beaconUserHistoryListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserHistoryList", "beaconUserHistoryListRequest", beaconUserHistoryListRequest);
          const localVarPath = `/beacon/user/history/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserHistoryListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
         * @summary Review a Beacon User
         * @param {BeaconUserReviewRequest} beaconUserReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserReview: (beaconUserReviewRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserReview", "beaconUserReviewRequest", beaconUserReviewRequest);
          const localVarPath = `/beacon/user/review`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserReviewRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
         * @summary Update the identity data of a Beacon User
         * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserUpdate: (beaconUserUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserUpdate", "beaconUserUpdateRequest", beaconUserUpdateRequest);
          const localVarPath = `/beacon/user/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("categoriesGet", "body", body);
          const localVarPath = `/categories/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary Retrieve a PDF Reports
         * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consumerReportPdfGet: (consumerReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("consumerReportPdfGet", "consumerReportPDFGetRequest", consumerReportPDFGetRequest);
          const localVarPath = `/consumer_report/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(consumerReportPDFGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/bank_income/create` creates a CRA report for income verification
         * @summary Create a CRA report for income verification
         * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeCreate: (craBankIncomeCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craBankIncomeCreate", "craBankIncomeCreateRequest", craBankIncomeCreateRequest);
          const localVarPath = `/cra/bank_income/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craBankIncomeCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeGet: (craBankIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craBankIncomeGet", "craBankIncomeGetRequest", craBankIncomeGetRequest);
          const localVarPath = `/cra/bank_income/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craBankIncomeGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
         * @summary Create a Base Report
         * @param {CraBaseReportCreateRequest} craBaseReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBaseReportCreate: (craBaseReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craBaseReportCreate", "craBaseReportCreateRequest", craBaseReportCreateRequest);
          const localVarPath = `/cra/base_report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craBaseReportCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/user/create`.
         * @summary Retrieve a Base Report
         * @param {CraBaseReportGetRequest} craBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBaseReportGet: (craBaseReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craBaseReportGet", "craBaseReportGetRequest", craBaseReportGetRequest);
          const localVarPath = `/cra/base_report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craBaseReportGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve a Base Report
         * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportBaseReportGet: (craCheckReportBaseReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportBaseReportGet", "craCheckReportBaseReportGetRequest", craCheckReportBaseReportGetRequest);
          const localVarPath = `/cra/check_report/base_report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportBaseReportGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. Plaid Check automatically starts creating Consumer Report data after the user completes the Link process with a Plaid Check product, so you typically would only call this endpoint if you wish to generate an updated report, some time after the initial report was generated.
         * @summary Create a Consumer Report
         * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCreate: (craCheckReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportCreate", "craCheckReportCreateRequest", craCheckReportCreateRequest);
          const localVarPath = `/cra/check_report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve cash flow information from your user\'s banks
         * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportIncomeInsightsGet: (craCheckReportIncomeInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportIncomeInsightsGet", "craCheckReportIncomeInsightsGetRequest", craCheckReportIncomeInsightsGetRequest);
          const localVarPath = `/cra/check_report/income_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportIncomeInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
         * @summary Retrieve network attributes for the user
         * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportNetworkInsightsGet: (craCheckReportNetworkInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportNetworkInsightsGet", "craCheckReportNetworkInsightsGetRequest", craCheckReportNetworkInsightsGetRequest);
          const localVarPath = `/cra/check_report/network_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportNetworkInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from partners
         * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPartnerInsightsGet: (craCheckReportPartnerInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportPartnerInsightsGet", "craCheckReportPartnerInsightsGetRequest", craCheckReportPartnerInsightsGetRequest);
          const localVarPath = `/cra/check_report/partner_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportPartnerInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/check_report/pdf/get` retrieves the most recent Bank Income report (if it exists) followed by the most recent Base Report (if it exists) in PDF format.
         * @summary Retrieve Consumer Reports as a PDF
         * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPdfGet: (craCheckReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportPdfGet", "craCheckReportPDFGetRequest", craCheckReportPDFGetRequest);
          const localVarPath = `/cra/check_report/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportPDFGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/applications/register` registers loan applications and decisions.
         * @summary Register loan applications and decisions.
         * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansApplicationsRegister: (craLoansApplicationsRegisterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansApplicationsRegister", "craLoansApplicationsRegisterRequest", craLoansApplicationsRegisterRequest);
          const localVarPath = `/cra/loans/applications/register`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craLoansApplicationsRegisterRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/register` registers a list of loans to their applicants.
         * @summary Register a list of loans to their applicants.
         * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansRegister: (cRALoansRegisterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansRegister", "cRALoansRegisterRequest", cRALoansRegisterRequest);
          const localVarPath = `/cra/loans/register`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(cRALoansRegisterRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
         * @summary Unregister a list of loans.
         * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUnregister: (craLoansUnregisterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansUnregister", "craLoansUnregisterRequest", craLoansUnregisterRequest);
          const localVarPath = `/cra/loans/unregister`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craLoansUnregisterRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/update` updates loan information such as the status and payment history.
         * @summary Updates loan data.
         * @param {CraLoansUpdateRequest} craLoansUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUpdate: (craLoansUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansUpdate", "craLoansUpdateRequest", craLoansUpdateRequest);
          const localVarPath = `/cra/loans/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craLoansUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
         * @summary Retrieve a Monitoring Insights Report
         * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsGet: (craMonitoringInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craMonitoringInsightsGet", "craMonitoringInsightsGetRequest", craMonitoringInsightsGetRequest);
          const localVarPath = `/cra/monitoring_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craMonitoringInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every 14 days.
         * @summary Subscribe to Monitoring Insights
         * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsSubscribe: (craMonitoringInsightsSubscribeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craMonitoringInsightsSubscribe", "craMonitoringInsightsSubscribeRequest", craMonitoringInsightsSubscribeRequest);
          const localVarPath = `/cra/monitoring_insights/subscribe`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craMonitoringInsightsSubscribeRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
         * @summary Unsubscribe from Monitoring Insights
         * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsUnsubscribe: (craMonitoringInsightsUnsubscribeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craMonitoringInsightsUnsubscribe", "craMonitoringInsightsUnsubscribeRequest", craMonitoringInsightsUnsubscribeRequest);
          const localVarPath = `/cra/monitoring_insights/unsubscribe`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craMonitoringInsightsUnsubscribeRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/partner_insights/get` returns cash flow insights for a specified user.
         * @summary Retrieve cash flow insights from the bank accounts used for income verification
         * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craPartnerInsightsGet: (craPartnerInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craPartnerInsightsGet", "craPartnerInsightsGetRequest", craPartnerInsightsGetRequest);
          const localVarPath = `/cra/partner_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craPartnerInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken: (paymentInitiationPaymentTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createPaymentToken", "paymentInitiationPaymentTokenCreateRequest", paymentInitiationPaymentTokenCreateRequest);
          const localVarPath = `/payment_initiation/payment/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditAssetReportFreddieMacGet", "requestBody", requestBody);
          const localVarPath = `/credit/asset_report/freddie_mac/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate: (creditAuditCopyTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditAuditCopyTokenCreate", "creditAuditCopyTokenCreateRequest", creditAuditCopyTokenCreateRequest);
          const localVarPath = `/credit/audit_copy_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditAuditCopyTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate: (creditAuditCopyTokenUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditAuditCopyTokenUpdate", "creditAuditCopyTokenUpdateRequest", creditAuditCopyTokenUpdateRequest);
          const localVarPath = `/credit/audit_copy_token/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditAuditCopyTokenUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet: (creditBankEmploymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankEmploymentGet", "creditBankEmploymentGetRequest", creditBankEmploymentGetRequest);
          const localVarPath = `/beta/credit/v1/bank_employment/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankEmploymentGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet: (creditBankIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomeGet", "creditBankIncomeGetRequest", creditBankIncomeGetRequest);
          const localVarPath = `/credit/bank_income/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet: (creditBankIncomePDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomePdfGet", "creditBankIncomePDFGetRequest", creditBankIncomePDFGetRequest);
          const localVarPath = `/credit/bank_income/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomePDFGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh: (creditBankIncomeRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomeRefresh", "creditBankIncomeRefreshRequest", creditBankIncomeRefreshRequest);
          const localVarPath = `/credit/bank_income/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate: (creditBankIncomeWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomeWebhookUpdate", "creditBankIncomeWebhookUpdateRequest", creditBankIncomeWebhookUpdateRequest);
          const localVarPath = `/credit/bank_income/webhook/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeWebhookUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet: (creditBankStatementsUploadsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankStatementsUploadsGet", "creditBankStatementsUploadsGetRequest", creditBankStatementsUploadsGetRequest);
          const localVarPath = `/credit/bank_statements/uploads/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankStatementsUploadsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet: (creditEmploymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditEmploymentGet", "creditEmploymentGetRequest", creditEmploymentGetRequest);
          const localVarPath = `/credit/employment/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditEmploymentGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet: (creditFreddieMacReportsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditFreddieMacReportsGet", "creditFreddieMacReportsGetRequest", creditFreddieMacReportsGetRequest);
          const localVarPath = `/credit/freddie_mac/reports/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditFreddieMacReportsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet: (creditPayrollIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeGet", "creditPayrollIncomeGetRequest", creditPayrollIncomeGetRequest);
          const localVarPath = `/credit/payroll_income/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
         * @summary Update the parsing configuration for a document income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeParsingConfigUpdate: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeParsingConfigUpdate", "requestBody", requestBody);
          const localVarPath = `/credit/payroll_income/parsing_config/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck: (creditPayrollIncomePrecheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomePrecheck", "creditPayrollIncomePrecheckRequest", creditPayrollIncomePrecheckRequest);
          const localVarPath = `/credit/payroll_income/precheck`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomePrecheckRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh: (creditPayrollIncomeRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeRefresh", "creditPayrollIncomeRefreshRequest", creditPayrollIncomeRefreshRequest);
          const localVarPath = `/credit/payroll_income/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet: (creditPayrollIncomeRiskSignalsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeRiskSignalsGet", "creditPayrollIncomeRiskSignalsGetRequest", creditPayrollIncomeRiskSignalsGetRequest);
          const localVarPath = `/credit/payroll_income/risk_signals/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeRiskSignalsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate: (creditRelayCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayCreate", "creditRelayCreateRequest", creditRelayCreateRequest);
          const localVarPath = `/credit/relay/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you
         * @param {CreditRelayGetRequest} creditRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet: (creditRelayGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayGet", "creditRelayGetRequest", creditRelayGetRequest);
          const localVarPath = `/credit/relay/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayPdfGet: (creditRelayPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayPdfGet", "creditRelayPDFGetRequest", creditRelayPDFGetRequest);
          const localVarPath = `/credit/relay/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayPDFGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh: (creditRelayRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayRefresh", "creditRelayRefreshRequest", creditRelayRefreshRequest);
          const localVarPath = `/credit/relay/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove: (creditRelayRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayRemove", "creditRelayRemoveRequest", creditRelayRemoveRequest);
          const localVarPath = `/credit/relay/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove: (creditAuditCopyTokenRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditReportAuditCopyRemove", "creditAuditCopyTokenRemoveRequest", creditAuditCopyTokenRemoveRequest);
          const localVarPath = `/credit/audit_copy_token/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditAuditCopyTokenRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet: (creditSessionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditSessionsGet", "creditSessionsGetRequest", creditSessionsGetRequest);
          const localVarPath = `/credit/sessions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditSessionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve information about a dashboard user.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet: (dashboardUserGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("dashboardUserGet", "dashboardUserGetRequest", dashboardUserGetRequest);
          const localVarPath = `/dashboard_user/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardUserGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all dashboard users associated with your account.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList: (dashboardUserListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("dashboardUserList", "dashboardUserListRequest", dashboardUserListRequest);
          const localVarPath = `/dashboard_user/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardUserListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate: (depositSwitchAltCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchAltCreate", "depositSwitchAltCreateRequest", depositSwitchAltCreateRequest);
          const localVarPath = `/deposit_switch/alt/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchAltCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate: (depositSwitchCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchCreate", "depositSwitchCreateRequest", depositSwitchCreateRequest);
          const localVarPath = `/deposit_switch/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet: (depositSwitchGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchGet", "depositSwitchGetRequest", depositSwitchGetRequest);
          const localVarPath = `/deposit_switch/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate: (depositSwitchTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchTokenCreate", "depositSwitchTokenCreateRequest", depositSwitchTokenCreateRequest);
          const localVarPath = `/deposit_switch/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch: (employersSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("employersSearch", "employersSearchRequest", employersSearchRequest);
          const localVarPath = `/employers/search`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(employersSearchRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet: (employmentVerificationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("employmentVerificationGet", "employmentVerificationGetRequest", employmentVerificationGetRequest);
          const localVarPath = `/employment/verification/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(employmentVerificationGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications: (fDXNotification, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("fdxNotifications", "fDXNotification", fDXNotification);
          const localVarPath = `/fdx/notifications`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(fDXNotification, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get a specific recipient
         * @summary Get Recipient
         * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
         * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipient: (recipientId, oAUTHSTATEID, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("getRecipient", "recipientId", recipientId);
          const localVarPath = `/fdx/recipient/{recipientId}`.replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          if (oAUTHSTATEID !== void 0 && oAUTHSTATEID !== null) {
            localVarHeaderParameter["OAUTH-STATE-ID"] = String(oAUTHSTATEID);
          }
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a list of Recipients
         * @summary Get Recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipients: (options = {}) => __awaiter(this, void 0, void 0, function* () {
          const localVarPath = `/fdx/recipients`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/identity/documents/uploads/get` to retrieve document uploaded identity.
         * @summary Returns uploaded document identity
         * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityDocumentsUploadsGet: (identityDocumentsUploadsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityDocumentsUploadsGet", "identityDocumentsUploadsGetRequest", identityDocumentsUploadsGetRequest);
          const localVarPath = `/identity/documents/uploads/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityDocumentsUploadsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet: (identityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityGet", "identityGetRequest", identityGetRequest);
          const localVarPath = `/identity/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch: (identityMatchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityMatch", "identityMatchRequest", identityMatchRequest);
          const localVarPath = `/identity/match`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityMatchRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh: (identityRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityRefresh", "identityRefreshRequest", identityRefreshRequest);
          const localVarPath = `/identity/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
         * @summary Create autofill for an Identity Verification
         * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationAutofillCreate: (identityVerificationAutofillCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationAutofillCreate", "identityVerificationAutofillCreateRequest", identityVerificationAutofillCreateRequest);
          const localVarPath = `/identity_verification/autofill/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationAutofillCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
         * @summary Create a new Identity Verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate: (identityVerificationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationCreate", "identityVerificationCreateRequest", identityVerificationCreateRequest);
          const localVarPath = `/identity_verification/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve a previously created Identity Verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet: (identityVerificationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationGet", "identityVerificationGetRequest", identityVerificationGetRequest);
          const localVarPath = `/identity_verification/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList: (identityVerificationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationList", "identityVerificationListRequest", identityVerificationListRequest);
          const localVarPath = `/identity_verification/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Allow a customer to retry their Identity Verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry: (identityVerificationRetryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationRetry", "identityVerificationRetryRequest", identityVerificationRetryRequest);
          const localVarPath = `/identity_verification/retry`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationRetryRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate: (incomeVerificationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationCreate", "incomeVerificationCreateRequest", incomeVerificationCreateRequest);
          const localVarPath = `/income/verification/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload: (incomeVerificationDocumentsDownloadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationDocumentsDownload", "incomeVerificationDocumentsDownloadRequest", incomeVerificationDocumentsDownloadRequest);
          const localVarPath = `/income/verification/documents/download`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationDocumentsDownloadRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet: (incomeVerificationPaystubsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationPaystubsGet", "incomeVerificationPaystubsGetRequest", incomeVerificationPaystubsGetRequest);
          const localVarPath = `/income/verification/paystubs/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPaystubsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck: (incomeVerificationPrecheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationPrecheck", "incomeVerificationPrecheckRequest", incomeVerificationPrecheckRequest);
          const localVarPath = `/income/verification/precheck`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPrecheckRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet: (incomeVerificationTaxformsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationTaxformsGet", "incomeVerificationTaxformsGetRequest", incomeVerificationTaxformsGetRequest);
          const localVarPath = `/income/verification/taxforms/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationTaxformsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet: (institutionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("institutionsGet", "institutionsGetRequest", institutionsGetRequest);
          const localVarPath = `/institutions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById: (institutionsGetByIdRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("institutionsGetById", "institutionsGetByIdRequest", institutionsGetByIdRequest);
          const localVarPath = `/institutions/get_by_id`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch: (institutionsSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("institutionsSearch", "institutionsSearchRequest", institutionsSearchRequest);
          const localVarPath = `/institutions/search`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsSearchRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet: (investmentsAuthGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsAuthGet", "investmentsAuthGetRequest", investmentsAuthGetRequest);
          const localVarPath = `/investments/auth/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsAuthGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet: (investmentsHoldingsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsHoldingsGet", "investmentsHoldingsGetRequest", investmentsHoldingsGetRequest);
          const localVarPath = `/investments/holdings/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsHoldingsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh: (investmentsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsRefresh", "investmentsRefreshRequest", investmentsRefreshRequest);
          const localVarPath = `/investments/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet: (investmentsTransactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsTransactionsGet", "investmentsTransactionsGetRequest", investmentsTransactionsGetRequest);
          const localVarPath = `/investments/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsTransactionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate: (itemAccessTokenInvalidateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemAccessTokenInvalidate", "itemAccessTokenInvalidateRequest", itemAccessTokenInvalidateRequest);
          const localVarPath = `/item/access_token/invalidate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemAccessTokenInvalidateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList: (itemActivityListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemActivityList", "itemActivityListRequest", itemActivityListRequest);
          const localVarPath = `/item/activity/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemActivityListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList: (itemApplicationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemApplicationList", "itemApplicationListRequest", itemApplicationListRequest);
          const localVarPath = `/item/application/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate: (itemApplicationScopesUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemApplicationScopesUpdate", "itemApplicationScopesUpdateRequest", itemApplicationScopesUpdateRequest);
          const localVarPath = `/item/application/scopes/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationScopesUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
         * @summary Unlink a user’s connected application
         * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationUnlink: (itemApplicationUnlinkRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemApplicationUnlink", "itemApplicationUnlinkRequest", itemApplicationUnlinkRequest);
          const localVarPath = `/item/application/unlink`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationUnlinkRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken: (itemPublicTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemCreatePublicToken", "itemPublicTokenCreateRequest", itemPublicTokenCreateRequest);
          const localVarPath = `/item/public_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet: (itemGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemGet", "itemGetRequest", itemGetRequest);
          const localVarPath = `/item/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport: (itemImportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemImport", "itemImportRequest", itemImportRequest);
          const localVarPath = `/item/import`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemImportRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange: (itemPublicTokenExchangeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemPublicTokenExchange", "itemPublicTokenExchangeRequest", itemPublicTokenExchangeRequest);
          const localVarPath = `/item/public_token/exchange`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove: (itemRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemRemove", "itemRemoveRequest", itemRemoveRequest);
          const localVarPath = `/item/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate: (itemWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemWebhookUpdate", "itemWebhookUpdateRequest", itemWebhookUpdateRequest);
          const localVarPath = `/item/webhook/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemWebhookUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet: (liabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("liabilitiesGet", "liabilitiesGetRequest", liabilitiesGetRequest);
          const localVarPath = `/liabilities/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(liabilitiesGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate: (linkDeliveryCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkDeliveryCreate", "linkDeliveryCreateRequest", linkDeliveryCreateRequest);
          const localVarPath = `/link_delivery/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkDeliveryCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet: (linkDeliveryGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkDeliveryGet", "linkDeliveryGetRequest", linkDeliveryGetRequest);
          const localVarPath = `/link_delivery/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkDeliveryGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange: (linkOAuthCorrelationIdExchangeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkOauthCorrelationIdExchange", "linkOAuthCorrelationIdExchangeRequest", linkOAuthCorrelationIdExchangeRequest);
          const localVarPath = `/link/oauth/correlation_id/exchange`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkOAuthCorrelationIdExchangeRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/link/profile/eligibility/check` endpoint can be used to check whether a user with the supplied phone number has a saved profile that satisfies customer-defined eligibility requirements.
         * @summary Check profile eligibility
         * @param {LinkProfileEligibilityCheckRequest} linkProfileEligibilityCheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkProfileEligibilityCheck: (linkProfileEligibilityCheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkProfileEligibilityCheck", "linkProfileEligibilityCheckRequest", linkProfileEligibilityCheckRequest);
          const localVarPath = `/link/profile/eligibility/check`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkProfileEligibilityCheckRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate: (linkTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkTokenCreate", "linkTokenCreateRequest", linkTokenCreateRequest);
          const localVarPath = `/link/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet: (linkTokenGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkTokenGet", "linkTokenGetRequest", linkTokenGetRequest);
          const localVarPath = `/link/token/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
         * @summary Retrieve network insights for the provided `access_tokens`
         * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInsightsReportGet: (networkInsightsReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("networkInsightsReportGet", "networkInsightsReportGetRequest", networkInsightsReportGetRequest);
          const localVarPath = `/network_insights/report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(networkInsightsReportGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate: (partnerCustomerCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerCreate", "partnerCustomerCreateRequest", partnerCustomerCreateRequest);
          const localVarPath = `/partner/customer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable: (partnerCustomerEnableRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerEnable", "partnerCustomerEnableRequest", partnerCustomerEnableRequest);
          const localVarPath = `/partner/customer/enable`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerEnableRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet: (partnerCustomerGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerGet", "partnerCustomerGetRequest", partnerCustomerGetRequest);
          const localVarPath = `/partner/customer/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet: (partnerCustomerOAuthInstitutionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerOauthInstitutionsGet", "partnerCustomerOAuthInstitutionsGetRequest", partnerCustomerOAuthInstitutionsGetRequest);
          const localVarPath = `/partner/customer/oauth_institutions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerOAuthInstitutionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove: (partnerCustomerRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerRemove", "partnerCustomerRemoveRequest", partnerCustomerRemoveRequest);
          const localVarPath = `/partner/customer/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate: (paymentInitiationConsentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentCreate", "paymentInitiationConsentCreateRequest", paymentInitiationConsentCreateRequest);
          const localVarPath = `/payment_initiation/consent/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet: (paymentInitiationConsentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentGet", "paymentInitiationConsentGetRequest", paymentInitiationConsentGetRequest);
          const localVarPath = `/payment_initiation/consent/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute: (paymentInitiationConsentPaymentExecuteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentPaymentExecute", "paymentInitiationConsentPaymentExecuteRequest", paymentInitiationConsentPaymentExecuteRequest);
          const localVarPath = `/payment_initiation/consent/payment/execute`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentPaymentExecuteRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke: (paymentInitiationConsentRevokeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentRevoke", "paymentInitiationConsentRevokeRequest", paymentInitiationConsentRevokeRequest);
          const localVarPath = `/payment_initiation/consent/revoke`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentRevokeRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate: (paymentInitiationPaymentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentCreate", "paymentInitiationPaymentCreateRequest", paymentInitiationPaymentCreateRequest);
          const localVarPath = `/payment_initiation/payment/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet: (paymentInitiationPaymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentGet", "paymentInitiationPaymentGetRequest", paymentInitiationPaymentGetRequest);
          const localVarPath = `/payment_initiation/payment/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList: (paymentInitiationPaymentListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentList", "paymentInitiationPaymentListRequest", paymentInitiationPaymentListRequest);
          const localVarPath = `/payment_initiation/payment/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse: (paymentInitiationPaymentReverseRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentReverse", "paymentInitiationPaymentReverseRequest", paymentInitiationPaymentReverseRequest);
          const localVarPath = `/payment_initiation/payment/reverse`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentReverseRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate: (paymentInitiationRecipientCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationRecipientCreate", "paymentInitiationRecipientCreateRequest", paymentInitiationRecipientCreateRequest);
          const localVarPath = `/payment_initiation/recipient/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet: (paymentInitiationRecipientGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationRecipientGet", "paymentInitiationRecipientGetRequest", paymentInitiationRecipientGetRequest);
          const localVarPath = `/payment_initiation/recipient/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList: (paymentInitiationRecipientListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationRecipientList", "paymentInitiationRecipientListRequest", paymentInitiationRecipientListRequest);
          const localVarPath = `/payment_initiation/recipient/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate: (paymentProfileCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentProfileCreate", "paymentProfileCreateRequest", paymentProfileCreateRequest);
          const localVarPath = `/payment_profile/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentProfileCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet: (paymentProfileGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentProfileGet", "paymentProfileGetRequest", paymentProfileGetRequest);
          const localVarPath = `/payment_profile/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentProfileGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove: (paymentProfileRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentProfileRemove", "paymentProfileRemoveRequest", paymentProfileRemoveRequest);
          const localVarPath = `/payment_profile/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentProfileRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve the account associated with a processor token
         * @param {ProcessorAccountGetRequest} processorAccountGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAccountGet: (processorAccountGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorAccountGet", "processorAccountGetRequest", processorAccountGetRequest);
          const localVarPath = `/processor/account/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorAccountGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate: (processorApexProcessorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorApexProcessorTokenCreate", "processorApexProcessorTokenCreateRequest", processorApexProcessorTokenCreateRequest);
          const localVarPath = `/processor/apex/processor_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorApexProcessorTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet: (processorAuthGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorAuthGet", "processorAuthGetRequest", processorAuthGetRequest);
          const localVarPath = `/processor/auth/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorAuthGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet: (processorBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorBalanceGet", "processorBalanceGetRequest", processorBalanceGetRequest);
          const localVarPath = `/processor/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBalanceGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate: (processorBankTransferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorBankTransferCreate", "processorBankTransferCreateRequest", processorBankTransferCreateRequest);
          const localVarPath = `/processor/bank_transfer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBankTransferCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet: (processorIdentityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorIdentityGet", "processorIdentityGetRequest", processorIdentityGetRequest);
          const localVarPath = `/processor/identity/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorIdentityGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch: (processorIdentityMatchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorIdentityMatch", "processorIdentityMatchRequest", processorIdentityMatchRequest);
          const localVarPath = `/processor/identity/match`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorIdentityMatchRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorLiabilitiesGet: (processorLiabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorLiabilitiesGet", "processorLiabilitiesGetRequest", processorLiabilitiesGetRequest);
          const localVarPath = `/processor/liabilities/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorLiabilitiesGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport: (processorSignalDecisionReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalDecisionReport", "processorSignalDecisionReportRequest", processorSignalDecisionReportRequest);
          const localVarPath = `/processor/signal/decision/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalDecisionReportRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate: (processorSignalEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalEvaluate", "processorSignalEvaluateRequest", processorSignalEvaluateRequest);
          const localVarPath = `/processor/signal/evaluate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalEvaluateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
         * @summary Opt-in a processor token to Signal
         * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalPrepare: (processorSignalPrepareRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalPrepare", "processorSignalPrepareRequest", processorSignalPrepareRequest);
          const localVarPath = `/processor/signal/prepare`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalPrepareRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport: (processorSignalReturnReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalReturnReport", "processorSignalReturnReportRequest", processorSignalReturnReportRequest);
          const localVarPath = `/processor/signal/return/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalReturnReportRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate: (processorStripeBankAccountTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorStripeBankAccountTokenCreate", "processorStripeBankAccountTokenCreateRequest", processorStripeBankAccountTokenCreateRequest);
          const localVarPath = `/processor/stripe/bank_account_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorStripeBankAccountTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate: (processorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenCreate", "processorTokenCreateRequest", processorTokenCreateRequest);
          const localVarPath = `/processor/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet: (processorTokenPermissionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenPermissionsGet", "processorTokenPermissionsGetRequest", processorTokenPermissionsGetRequest);
          const localVarPath = `/processor/token/permissions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenPermissionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet: (processorTokenPermissionsSetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenPermissionsSet", "processorTokenPermissionsSetRequest", processorTokenPermissionsSetRequest);
          const localVarPath = `/processor/token/permissions/set`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenPermissionsSetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
         * @summary Update a processor token\'s webhook URL
         * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenWebhookUpdate: (processorTokenWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenWebhookUpdate", "processorTokenWebhookUpdateRequest", processorTokenWebhookUpdateRequest);
          const localVarPath = `/processor/token/webhook/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenWebhookUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet: (processorTransactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsGet", "processorTransactionsGetRequest", processorTransactionsGetRequest);
          const localVarPath = `/processor/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet: (processorTransactionsRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsRecurringGet", "processorTransactionsRecurringGetRequest", processorTransactionsRecurringGetRequest);
          const localVarPath = `/processor/transactions/recurring/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsRecurringGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh: (processorTransactionsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsRefresh", "processorTransactionsRefreshRequest", processorTransactionsRefreshRequest);
          const localVarPath = `/processor/transactions/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get incremental transaction updates on a processor token
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync: (processorTransactionsSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsSync", "processorTransactionsSyncRequest", processorTransactionsSyncRequest);
          const localVarPath = `/processor/transactions/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsSyncRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns user permissioned profile data including identity and item access tokens.
         * @summary Retrieve a Profile
         * @param {ProfileGetRequest} profileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet: (profileGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("profileGet", "profileGetRequest", profileGetRequest);
          const localVarPath = `/profile/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(profileGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
         * @summary Check a user\'s Plaid Network status
         * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileNetworkStatusGet: (profileNetworkStatusGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("profileNetworkStatusGet", "profileNetworkStatusGetRequest", profileNetworkStatusGetRequest);
          const localVarPath = `/profile/network_status/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(profileNetworkStatusGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook: (sandboxBankIncomeFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxBankIncomeFireWebhook", "sandboxBankIncomeFireWebhookRequest", sandboxBankIncomeFireWebhookRequest);
          const localVarPath = `/sandbox/bank_income/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankIncomeFireWebhookRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook: (sandboxBankTransferFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxBankTransferFireWebhook", "sandboxBankTransferFireWebhookRequest", sandboxBankTransferFireWebhookRequest);
          const localVarPath = `/sandbox/bank_transfer/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferFireWebhookRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate: (sandboxBankTransferSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxBankTransferSimulate", "sandboxBankTransferSimulateRequest", sandboxBankTransferSimulateRequest);
          const localVarPath = `/sandbox/bank_transfer/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook: (sandboxIncomeFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxIncomeFireWebhook", "sandboxIncomeFireWebhookRequest", sandboxIncomeFireWebhookRequest);
          const localVarPath = `/sandbox/income/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxIncomeFireWebhookRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid sandbox `DEFAULT_UPDATE` responses include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook: (sandboxItemFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxItemFireWebhook", "sandboxItemFireWebhookRequest", sandboxItemFireWebhookRequest);
          const localVarPath = `/sandbox/item/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemFireWebhookRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin: (sandboxItemResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxItemResetLogin", "sandboxItemResetLoginRequest", sandboxItemResetLoginRequest);
          const localVarPath = `/sandbox/item/reset_login`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemResetLoginRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus: (sandboxItemSetVerificationStatusRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxItemSetVerificationStatus", "sandboxItemSetVerificationStatusRequest", sandboxItemSetVerificationStatusRequest);
          const localVarPath = `/sandbox/item/set_verification_status`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemSetVerificationStatusRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts: (sandboxOauthSelectAccountsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxOauthSelectAccounts", "sandboxOauthSelectAccountsRequest", sandboxOauthSelectAccountsRequest);
          const localVarPath = `/sandbox/oauth/select_accounts`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxOauthSelectAccountsRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin: (sandboxPaymentProfileResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxPaymentProfileResetLogin", "sandboxPaymentProfileResetLoginRequest", sandboxPaymentProfileResetLoginRequest);
          const localVarPath = `/sandbox/payment_profile/reset_login`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPaymentProfileResetLoginRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate: (sandboxProcessorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxProcessorTokenCreate", "sandboxProcessorTokenCreateRequest", sandboxProcessorTokenCreateRequest);
          const localVarPath = `/sandbox/processor_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxProcessorTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate: (sandboxPublicTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxPublicTokenCreate", "sandboxPublicTokenCreateRequest", sandboxPublicTokenCreateRequest);
          const localVarPath = `/sandbox/public_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPublicTokenCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook: (sandboxTransferFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferFireWebhook", "sandboxTransferFireWebhookRequest", sandboxTransferFireWebhookRequest);
          const localVarPath = `/sandbox/transfer/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferFireWebhookRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
         * @summary Simulate a ledger deposit event in Sandbox
         * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerDepositSimulate: (sandboxTransferLedgerDepositSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferLedgerDepositSimulate", "sandboxTransferLedgerDepositSimulateRequest", sandboxTransferLedgerDepositSimulateRequest);
          const localVarPath = `/sandbox/transfer/ledger/deposit/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferLedgerDepositSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
         * @summary Simulate converting pending balance to available balance
         * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerSimulateAvailable: (sandboxTransferLedgerSimulateAvailableRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferLedgerSimulateAvailable", "sandboxTransferLedgerSimulateAvailableRequest", sandboxTransferLedgerSimulateAvailableRequest);
          const localVarPath = `/sandbox/transfer/ledger/simulate_available`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferLedgerSimulateAvailableRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
         * @summary Simulate a ledger withdraw event in Sandbox
         * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerWithdrawSimulate: (sandboxTransferLedgerWithdrawSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferLedgerWithdrawSimulate", "sandboxTransferLedgerWithdrawSimulateRequest", sandboxTransferLedgerWithdrawSimulateRequest);
          const localVarPath = `/sandbox/transfer/ledger/withdraw/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferLedgerWithdrawSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a refund event in Sandbox
         * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRefundSimulate: (sandboxTransferRefundSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferRefundSimulate", "sandboxTransferRefundSimulateRequest", sandboxTransferRefundSimulateRequest);
          const localVarPath = `/sandbox/transfer/refund/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferRefundSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate: (sandboxTransferRepaymentSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferRepaymentSimulate", "sandboxTransferRepaymentSimulateRequest", sandboxTransferRepaymentSimulateRequest);
          const localVarPath = `/sandbox/transfer/repayment/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferRepaymentSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate: (sandboxTransferSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferSimulate", "sandboxTransferSimulateRequest", sandboxTransferSimulateRequest);
          const localVarPath = `/sandbox/transfer/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate: (sandboxTransferSweepSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferSweepSimulate", "sandboxTransferSweepSimulateRequest", sandboxTransferSweepSimulateRequest);
          const localVarPath = `/sandbox/transfer/sweep/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSweepSimulateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance: (sandboxTransferTestClockAdvanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockAdvance", "sandboxTransferTestClockAdvanceRequest", sandboxTransferTestClockAdvanceRequest);
          const localVarPath = `/sandbox/transfer/test_clock/advance`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockAdvanceRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate: (sandboxTransferTestClockCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockCreate", "sandboxTransferTestClockCreateRequest", sandboxTransferTestClockCreateRequest);
          const localVarPath = `/sandbox/transfer/test_clock/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet: (sandboxTransferTestClockGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockGet", "sandboxTransferTestClockGetRequest", sandboxTransferTestClockGetRequest);
          const localVarPath = `/sandbox/transfer/test_clock/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList: (sandboxTransferTestClockListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockList", "sandboxTransferTestClockListRequest", sandboxTransferTestClockListRequest);
          const localVarPath = `/sandbox/transfer/test_clock/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force item(s) for a Sandbox User into an error state
         * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxUserResetLogin: (sandboxUserResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxUserResetLogin", "sandboxUserResetLoginRequest", sandboxUserResetLoginRequest);
          const localVarPath = `/sandbox/user/reset_login`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxUserResetLoginRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * After calling `/signal/evaluate` (or `/accounts/balance/get`, for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta), call `/signal/decision/report` to report whether the transaction was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport: (signalDecisionReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalDecisionReport", "signalDecisionReportRequest", signalDecisionReportRequest);
          const localVarPath = `/signal/decision/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalDecisionReportRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate: (signalEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalEvaluate", "signalEvaluateRequest", signalEvaluateRequest);
          const localVarPath = `/signal/evaluate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalEvaluateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare: (signalPrepareRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalPrepare", "signalPrepareRequest", signalPrepareRequest);
          const localVarPath = `/signal/prepare`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalPrepareRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` or (for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta) the `/accounts/balance/get` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport: (signalReturnReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalReturnReport", "signalReturnReportRequest", signalReturnReportRequest);
          const localVarPath = `/signal/return/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalReturnReportRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
         * @summary Retrieve a single statement.
         * @param {StatementsDownloadRequest} statementsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsDownload: (statementsDownloadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("statementsDownload", "statementsDownloadRequest", statementsDownloadRequest);
          const localVarPath = `/statements/download`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(statementsDownloadRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
         * @summary Retrieve a list of all statements associated with an item.
         * @param {StatementsListRequest} statementsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsList: (statementsListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("statementsList", "statementsListRequest", statementsListRequest);
          const localVarPath = `/statements/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(statementsListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
         * @summary Refresh statements data.
         * @param {StatementsRefreshRequest} statementsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsRefresh: (statementsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("statementsRefresh", "statementsRefreshRequest", statementsRefreshRequest);
          const localVarPath = `/statements/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(statementsRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance: (transactionsEnhanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsEnhance", "transactionsEnhanceGetRequest", transactionsEnhanceGetRequest);
          const localVarPath = `/beta/transactions/v1/enhance`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsEnhanceGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichRequest} transactionsEnrichRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich: (transactionsEnrichRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsEnrich", "transactionsEnrichRequest", transactionsEnrichRequest);
          const localVarPath = `/transactions/enrich`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsEnrichRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: (transactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsGet", "transactionsGetRequest", transactionsGetRequest);
          const localVarPath = `/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet: (transactionsRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRecurringGet", "transactionsRecurringGetRequest", transactionsRecurringGetRequest);
          const localVarPath = `/transactions/recurring/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRecurringGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh: (transactionsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRefresh", "transactionsRefreshRequest", transactionsRefreshRequest);
          const localVarPath = `/transactions/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRefreshRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate: (transactionsRulesCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRulesCreate", "transactionsRulesCreateRequest", transactionsRulesCreateRequest);
          const localVarPath = `/beta/transactions/rules/v1/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList: (transactionsRulesListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRulesList", "transactionsRulesListRequest", transactionsRulesListRequest);
          const localVarPath = `/beta/transactions/rules/v1/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove: (transactionsRulesRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRulesRemove", "transactionsRulesRemoveRequest", transactionsRulesRemoveRequest);
          const localVarPath = `/beta/transactions/rules/v1/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync: (transactionsSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsSync", "transactionsSyncRequest", transactionsSyncRequest);
          const localVarPath = `/transactions/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsSyncRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
         * @summary Obtain user insights based on transactions sent through /transactions/enrich
         * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsUserInsightsGet: (transactionsUserInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsUserInsightsGet", "transactionsUserInsightsGetRequest", transactionsUserInsightsGetRequest);
          const localVarPath = `/beta/transactions/user_insights/v1/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsUserInsightsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
         * @summary Cancel a transfer authorization
         * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCancel: (transferAuthorizationCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferAuthorizationCancel", "transferAuthorizationCancelRequest", transferAuthorizationCancelRequest);
          const localVarPath = `/transfer/authorization/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferAuthorizationCancelRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:  - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.  - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization. - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate: (transferAuthorizationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferAuthorizationCreate", "transferAuthorizationCreateRequest", transferAuthorizationCreateRequest);
          const localVarPath = `/transfer/authorization/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferAuthorizationCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary (Deprecated) Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet: (transferBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferBalanceGet", "transferBalanceGetRequest", transferBalanceGetRequest);
          const localVarPath = `/transfer/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferBalanceGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel: (transferCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferCancel", "transferCancelRequest", transferCancelRequest);
          const localVarPath = `/transfer/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCancelRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet: (transferCapabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferCapabilitiesGet", "transferCapabilitiesGetRequest", transferCapabilitiesGetRequest);
          const localVarPath = `/transfer/capabilities/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCapabilitiesGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet: (transferConfigurationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferConfigurationGet", "transferConfigurationGetRequest", transferConfigurationGetRequest);
          const localVarPath = `/transfer/configuration/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferConfigurationGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate: (transferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferCreate", "transferCreateRequest", transferCreateRequest);
          const localVarPath = `/transfer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary Upload transfer diligence document on behalf of the originator
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload: (transferDiligenceDocumentUploadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferDiligenceDocumentUpload", "transferDiligenceDocumentUploadRequest", transferDiligenceDocumentUploadRequest);
          const localVarPath = `/transfer/diligence/document/upload`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferDiligenceDocumentUploadRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
         * @summary Submit transfer diligence on behalf of the originator
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit: (transferDiligenceSubmitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferDiligenceSubmit", "transferDiligenceSubmitRequest", transferDiligenceSubmitRequest);
          const localVarPath = `/transfer/diligence/submit`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferDiligenceSubmitRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList: (transferEventListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferEventList", "transferEventListRequest", transferEventListRequest);
          const localVarPath = `/transfer/event/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync: (transferEventSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferEventSync", "transferEventSyncRequest", transferEventSyncRequest);
          const localVarPath = `/transfer/event/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventSyncRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet: (transferGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferGet", "transferGetRequest", transferGetRequest);
          const localVarPath = `/transfer/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate: (transferIntentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferIntentCreate", "transferIntentCreateRequest", transferIntentCreateRequest);
          const localVarPath = `/transfer/intent/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferIntentCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {TransferIntentGetRequest} transferIntentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet: (transferIntentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferIntentGet", "transferIntentGetRequest", transferIntentGetRequest);
          const localVarPath = `/transfer/intent/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferIntentGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
         * @summary Deposit funds into a Plaid Ledger balance
         * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDeposit: (transferLedgerDepositRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerDeposit", "transferLedgerDepositRequest", transferLedgerDepositRequest);
          const localVarPath = `/transfer/ledger/deposit`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerDepositRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
         * @summary Move available balance between the ledgers of the platform and one of its originators
         * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDistribute: (transferLedgerDistributeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerDistribute", "transferLedgerDistributeRequest", transferLedgerDistributeRequest);
          const localVarPath = `/transfer/ledger/distribute`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerDistributeRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
         * @summary Retrieve Plaid Ledger balance
         * @param {TransferLedgerGetRequest} transferLedgerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerGet: (transferLedgerGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerGet", "transferLedgerGetRequest", transferLedgerGetRequest);
          const localVarPath = `/transfer/ledger/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
         * @summary Withdraw funds from a Plaid Ledger balance
         * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerWithdraw: (transferLedgerWithdrawRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerWithdraw", "transferLedgerWithdrawRequest", transferLedgerWithdrawRequest);
          const localVarPath = `/transfer/ledger/withdraw`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerWithdrawRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList: (transferListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferList", "transferListRequest", transferListRequest);
          const localVarPath = `/transfer/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet: (transferMetricsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferMetricsGet", "transferMetricsGetRequest", transferMetricsGetRequest);
          const localVarPath = `/transfer/metrics/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferMetricsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount: (transferMigrateAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferMigrateAccount", "transferMigrateAccountRequest", transferMigrateAccountRequest);
          const localVarPath = `/transfer/migrate_account`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferMigrateAccountRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate: (transferOriginatorCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorCreate", "transferOriginatorCreateRequest", transferOriginatorCreateRequest);
          const localVarPath = `/transfer/originator/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
         * @summary Update the funding account associated with the originator
         * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorFundingAccountUpdate: (transferOriginatorFundingAccountUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorFundingAccountUpdate", "transferOriginatorFundingAccountUpdateRequest", transferOriginatorFundingAccountUpdateRequest);
          const localVarPath = `/transfer/originator/funding_account/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorFundingAccountUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet: (transferOriginatorGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorGet", "transferOriginatorGetRequest", transferOriginatorGetRequest);
          const localVarPath = `/transfer/originator/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList: (transferOriginatorListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorList", "transferOriginatorListRequest", transferOriginatorListRequest);
          const localVarPath = `/transfer/originator/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
         * @summary Create an originator for scaled platform customers
         * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformOriginatorCreate: (transferPlatformOriginatorCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferPlatformOriginatorCreate", "transferPlatformOriginatorCreateRequest", transferPlatformOriginatorCreateRequest);
          const localVarPath = `/transfer/platform/originator/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferPlatformOriginatorCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate: (transferQuestionnaireCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferQuestionnaireCreate", "transferQuestionnaireCreateRequest", transferQuestionnaireCreateRequest);
          const localVarPath = `/transfer/questionnaire/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferQuestionnaireCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel: (transferRecurringCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringCancel", "transferRecurringCancelRequest", transferRecurringCancelRequest);
          const localVarPath = `/transfer/recurring/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringCancelRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate: (transferRecurringCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringCreate", "transferRecurringCreateRequest", transferRecurringCreateRequest);
          const localVarPath = `/transfer/recurring/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet: (transferRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringGet", "transferRecurringGetRequest", transferRecurringGetRequest);
          const localVarPath = `/transfer/recurring/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList: (transferRecurringListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringList", "transferRecurringListRequest", transferRecurringListRequest);
          const localVarPath = `/transfer/recurring/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel: (transferRefundCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRefundCancel", "transferRefundCancelRequest", transferRefundCancelRequest);
          const localVarPath = `/transfer/refund/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRefundCancelRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate: (transferRefundCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRefundCreate", "transferRefundCreateRequest", transferRefundCreateRequest);
          const localVarPath = `/transfer/refund/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRefundCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet: (transferRefundGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRefundGet", "transferRefundGetRequest", transferRefundGetRequest);
          const localVarPath = `/transfer/refund/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRefundGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList: (transferRepaymentListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRepaymentList", "transferRepaymentListRequest", transferRepaymentListRequest);
          const localVarPath = `/transfer/repayment/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList: (transferRepaymentReturnListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRepaymentReturnList", "transferRepaymentReturnListRequest", transferRepaymentReturnListRequest);
          const localVarPath = `/transfer/repayment/return/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentReturnListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet: (transferSweepGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferSweepGet", "transferSweepGetRequest", transferSweepGetRequest);
          const localVarPath = `/transfer/sweep/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList: (transferSweepListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferSweepList", "transferSweepListRequest", transferSweepListRequest);
          const localVarPath = `/transfer/sweep/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns user permissioned account data including identity and Item access tokens.
         * @summary Retrieve User Account
         * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountSessionGet: (userAccountSessionGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userAccountSessionGet", "userAccountSessionGetRequest", userAccountSessionGetRequest);
          const localVarPath = `/user_account/session/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userAccountSessionGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate: (userCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userCreate", "userCreateRequest", userCreateRequest);
          const localVarPath = `/user/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns Items associated with a User along with their corresponding statuses.
         * @summary Get Items associated with a User
         * @param {UserItemsGetRequest} userItemsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userItemsGet: (userItemsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userItemsGet", "userItemsGetRequest", userItemsGetRequest);
          const localVarPath = `/user/items/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userItemsGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
         * @summary Remove user
         * @param {UserRemoveRequest} userRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRemove: (userRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userRemove", "userRemoveRequest", userRemoveRequest);
          const localVarPath = `/user/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userRemoveRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user.
         * @summary Update user information
         * @param {UserUpdateRequest} userUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdate: (userUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userUpdate", "userUpdateRequest", userUpdateRequest);
          const localVarPath = `/user/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate: (walletCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletCreate", "walletCreateRequest", walletCreateRequest);
          const localVarPath = `/wallet/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet: (walletGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletGet", "walletGetRequest", walletGetRequest);
          const localVarPath = `/wallet/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList: (walletListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletList", "walletListRequest", walletListRequest);
          const localVarPath = `/wallet/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute: (walletTransactionExecuteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletTransactionExecute", "walletTransactionExecuteRequest", walletTransactionExecuteRequest);
          const localVarPath = `/wallet/transaction/execute`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionExecuteRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet: (walletTransactionGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletTransactionGet", "walletTransactionGetRequest", walletTransactionGetRequest);
          const localVarPath = `/wallet/transaction/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList: (walletTransactionListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletTransactionList", "walletTransactionListRequest", walletTransactionListRequest);
          const localVarPath = `/wallet/transaction/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate: (watchlistScreeningEntityCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityCreate", "watchlistScreeningEntityCreateRequest", watchlistScreeningEntityCreateRequest);
          const localVarPath = `/watchlist_screening/entity/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet: (watchlistScreeningEntityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityGet", "watchlistScreeningEntityGetRequest", watchlistScreeningEntityGetRequest);
          const localVarPath = `/watchlist_screening/entity/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList: (watchlistScreeningEntityHistoryListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityHistoryList", "watchlistScreeningEntityHistoryListRequest", watchlistScreeningEntityHistoryListRequest);
          const localVarPath = `/watchlist_screening/entity/history/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityHistoryListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList: (watchlistScreeningEntityHitListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityHitList", "watchlistScreeningEntityHitListRequest", watchlistScreeningEntityHitListRequest);
          const localVarPath = `/watchlist_screening/entity/hit/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityHitListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList: (watchlistScreeningEntityListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityList", "watchlistScreeningEntityListRequest", watchlistScreeningEntityListRequest);
          const localVarPath = `/watchlist_screening/entity/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet: (watchlistScreeningEntityProgramGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityProgramGet", "watchlistScreeningEntityProgramGetRequest", watchlistScreeningEntityProgramGetRequest);
          const localVarPath = `/watchlist_screening/entity/program/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityProgramGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList: (watchlistScreeningEntityProgramListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityProgramList", "watchlistScreeningEntityProgramListRequest", watchlistScreeningEntityProgramListRequest);
          const localVarPath = `/watchlist_screening/entity/program/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityProgramListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate: (watchlistScreeningEntityReviewCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityReviewCreate", "watchlistScreeningEntityReviewCreateRequest", watchlistScreeningEntityReviewCreateRequest);
          const localVarPath = `/watchlist_screening/entity/review/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityReviewCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList: (watchlistScreeningEntityReviewListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityReviewList", "watchlistScreeningEntityReviewListRequest", watchlistScreeningEntityReviewListRequest);
          const localVarPath = `/watchlist_screening/entity/review/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityReviewListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate: (watchlistScreeningEntityUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityUpdate", "watchlistScreeningEntityUpdateRequest", watchlistScreeningEntityUpdateRequest);
          const localVarPath = `/watchlist_screening/entity/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate: (watchlistScreeningIndividualCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualCreate", "watchlistScreeningIndividualCreateRequest", watchlistScreeningIndividualCreateRequest);
          const localVarPath = `/watchlist_screening/individual/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet: (watchlistScreeningIndividualGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualGet", "watchlistScreeningIndividualGetRequest", watchlistScreeningIndividualGetRequest);
          const localVarPath = `/watchlist_screening/individual/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList: (watchlistScreeningIndividualHistoryListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualHistoryList", "watchlistScreeningIndividualHistoryListRequest", watchlistScreeningIndividualHistoryListRequest);
          const localVarPath = `/watchlist_screening/individual/history/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualHistoryListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList: (watchlistScreeningIndividualHitListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualHitList", "watchlistScreeningIndividualHitListRequest", watchlistScreeningIndividualHitListRequest);
          const localVarPath = `/watchlist_screening/individual/hit/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualHitListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList: (watchlistScreeningIndividualListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualList", "watchlistScreeningIndividualListRequest", watchlistScreeningIndividualListRequest);
          const localVarPath = `/watchlist_screening/individual/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet: (watchlistScreeningIndividualProgramGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualProgramGet", "watchlistScreeningIndividualProgramGetRequest", watchlistScreeningIndividualProgramGetRequest);
          const localVarPath = `/watchlist_screening/individual/program/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualProgramGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList: (watchlistScreeningIndividualProgramListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualProgramList", "watchlistScreeningIndividualProgramListRequest", watchlistScreeningIndividualProgramListRequest);
          const localVarPath = `/watchlist_screening/individual/program/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualProgramListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate: (watchlistScreeningIndividualReviewCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualReviewCreate", "watchlistScreeningIndividualReviewCreateRequest", watchlistScreeningIndividualReviewCreateRequest);
          const localVarPath = `/watchlist_screening/individual/review/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualReviewCreateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList: (watchlistScreeningIndividualReviewListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualReviewList", "watchlistScreeningIndividualReviewListRequest", watchlistScreeningIndividualReviewListRequest);
          const localVarPath = `/watchlist_screening/individual/review/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualReviewListRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate: (watchlistScreeningIndividualUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualUpdate", "watchlistScreeningIndividualUpdateRequest", watchlistScreeningIndividualUpdateRequest);
          const localVarPath = `/watchlist_screening/individual/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualUpdateRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet: (webhookVerificationKeyGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("webhookVerificationKeyGet", "webhookVerificationKeyGetRequest", webhookVerificationKeyGetRequest);
          const localVarPath = `/webhook_verification_key/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(webhookVerificationKeyGetRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        })
      };
    };
    exports.PlaidApiAxiosParamCreator = PlaidApiAxiosParamCreator;
    var PlaidApiFp = function(configuration) {
      const localVarAxiosParamCreator = exports.PlaidApiAxiosParamCreator(configuration);
      return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.applicationGet(applicationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportCreate(assetReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportFilter(assetReportFilterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportGet(assetReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportPdfGet(assetReportPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRefresh(assetReportRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRemove(assetReportRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.authGet(authGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferBalanceGet(bankTransferBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCancel(bankTransferCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCreate(bankTransferCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventList(bankTransferEventListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventSync(bankTransferEventSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferGet(bankTransferGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferList(bankTransferListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepGet(bankTransferSweepGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepList(bankTransferSweepListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
         * @summary Evaluate risk of a bank account
         * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
         * @summary Get a Beacon Duplicate
         * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconDuplicateGet(beaconDuplicateGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconDuplicateGet(beaconDuplicateGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a fraud report for a given Beacon User.
         * @summary Create a Beacon Report
         * @param {BeaconReportCreateRequest} beaconReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportCreate(beaconReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportCreate(beaconReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a Beacon report for a given Beacon report id.
         * @summary Get a Beacon Report
         * @param {BeaconReportGetRequest} beaconReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportGet(beaconReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportGet(beaconReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Reports for a Beacon User
         * @param {BeaconReportListRequest} beaconReportListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportList(beaconReportListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportList(beaconReportListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
         * @summary Get a Beacon Report Syndication
         * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Report Syndications for a Beacon User
         * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationList(beaconReportSyndicationListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportSyndicationList(beaconReportSyndicationListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
         * @summary Get Account Insights for a Beacon User
         * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
         * @summary Create a Beacon User
         * @param {BeaconUserCreateRequest} beaconUserCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserCreate(beaconUserCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserCreate(beaconUserCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
         * @summary Get a Beacon User
         * @param {BeaconUserGetRequest} beaconUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserGet(beaconUserGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserGet(beaconUserGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all changes to the Beacon User in reverse-chronological order.
         * @summary List a Beacon User\'s history
         * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserHistoryList(beaconUserHistoryListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserHistoryList(beaconUserHistoryListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
         * @summary Review a Beacon User
         * @param {BeaconUserReviewRequest} beaconUserReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserReview(beaconUserReviewRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserReview(beaconUserReviewRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
         * @summary Update the identity data of a Beacon User
         * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserUpdate(beaconUserUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserUpdate(beaconUserUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.categoriesGet(body, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary Retrieve a PDF Reports
         * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consumerReportPdfGet(consumerReportPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.consumerReportPdfGet(consumerReportPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/bank_income/create` creates a CRA report for income verification
         * @summary Create a CRA report for income verification
         * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeCreate(craBankIncomeCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craBankIncomeCreate(craBankIncomeCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeGet(craBankIncomeGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craBankIncomeGet(craBankIncomeGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
         * @summary Create a Base Report
         * @param {CraBaseReportCreateRequest} craBaseReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBaseReportCreate(craBaseReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craBaseReportCreate(craBaseReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/user/create`.
         * @summary Retrieve a Base Report
         * @param {CraBaseReportGetRequest} craBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBaseReportGet(craBaseReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craBaseReportGet(craBaseReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve a Base Report
         * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. Plaid Check automatically starts creating Consumer Report data after the user completes the Link process with a Plaid Check product, so you typically would only call this endpoint if you wish to generate an updated report, some time after the initial report was generated.
         * @summary Create a Consumer Report
         * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCreate(craCheckReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportCreate(craCheckReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve cash flow information from your user\'s banks
         * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
         * @summary Retrieve network attributes for the user
         * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from partners
         * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/check_report/pdf/get` retrieves the most recent Bank Income report (if it exists) followed by the most recent Base Report (if it exists) in PDF format.
         * @summary Retrieve Consumer Reports as a PDF
         * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPdfGet(craCheckReportPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportPdfGet(craCheckReportPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/loans/applications/register` registers loan applications and decisions.
         * @summary Register loan applications and decisions.
         * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/loans/register` registers a list of loans to their applicants.
         * @summary Register a list of loans to their applicants.
         * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansRegister(cRALoansRegisterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansRegister(cRALoansRegisterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
         * @summary Unregister a list of loans.
         * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUnregister(craLoansUnregisterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansUnregister(craLoansUnregisterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/loans/update` updates loan information such as the status and payment history.
         * @summary Updates loan data.
         * @param {CraLoansUpdateRequest} craLoansUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUpdate(craLoansUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansUpdate(craLoansUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
         * @summary Retrieve a Monitoring Insights Report
         * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every 14 days.
         * @summary Subscribe to Monitoring Insights
         * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
         * @summary Unsubscribe from Monitoring Insights
         * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/cra/partner_insights/get` returns cash flow insights for a specified user.
         * @summary Retrieve cash flow insights from the bank accounts used for income verification
         * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craPartnerInsightsGet(craPartnerInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craPartnerInsightsGet(craPartnerInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet(requestBody, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditAssetReportFreddieMacGet(requestBody, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet(creditBankEmploymentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankEmploymentGet(creditBankEmploymentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeGet(creditBankIncomeGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditEmploymentGet(creditEmploymentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
         * @summary Update the parsing configuration for a document income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeParsingConfigUpdate(requestBody, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeParsingConfigUpdate(requestBody, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate(creditRelayCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayCreate(creditRelayCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you
         * @param {CreditRelayGetRequest} creditRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet(creditRelayGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayGet(creditRelayGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayPdfGet(creditRelayPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayPdfGet(creditRelayPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh(creditRelayRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayRefresh(creditRelayRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove(creditRelayRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayRemove(creditRelayRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet(creditSessionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditSessionsGet(creditSessionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Retrieve information about a dashboard user.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet(dashboardUserGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.dashboardUserGet(dashboardUserGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all dashboard users associated with your account.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList(dashboardUserListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.dashboardUserList(dashboardUserListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchAltCreate(depositSwitchAltCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchCreate(depositSwitchCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchGet(depositSwitchGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.employersSearch(employersSearchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.employmentVerificationGet(employmentVerificationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications(fDXNotification, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.fdxNotifications(fDXNotification, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Get a specific recipient
         * @summary Get Recipient
         * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
         * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipient(recipientId, oAUTHSTATEID, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.getRecipient(recipientId, oAUTHSTATEID, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a list of Recipients
         * @summary Get Recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipients(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.getRecipients(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use `/identity/documents/uploads/get` to retrieve document uploaded identity.
         * @summary Returns uploaded document identity
         * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityGet(identityGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch(identityMatchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityMatch(identityMatchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh(identityRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityRefresh(identityRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
         * @summary Create autofill for an Identity Verification
         * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
         * @summary Create a new Identity Verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate(identityVerificationCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationCreate(identityVerificationCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Retrieve a previously created Identity Verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet(identityVerificationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationGet(identityVerificationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList(identityVerificationListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationList(identityVerificationListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Allow a customer to retry their Identity Verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry(identityVerificationRetryRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationRetry(identityVerificationRetryRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationCreate(incomeVerificationCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGet(institutionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsSearch(institutionsSearchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet(investmentsAuthGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsAuthGet(investmentsAuthGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsHoldingsGet(investmentsHoldingsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh(investmentsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsRefresh(investmentsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsTransactionsGet(investmentsTransactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList(itemActivityListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemActivityList(itemActivityListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationList(itemApplicationListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
         * @summary Unlink a user’s connected application
         * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationUnlink(itemApplicationUnlinkRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationUnlink(itemApplicationUnlinkRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemCreatePublicToken(itemPublicTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemGet(itemGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemImport(itemImportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemWebhookUpdate(itemWebhookUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.liabilitiesGet(liabilitiesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate(linkDeliveryCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkDeliveryCreate(linkDeliveryCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet(linkDeliveryGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkDeliveryGet(linkDeliveryGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/link/profile/eligibility/check` endpoint can be used to check whether a user with the supplied phone number has a saved profile that satisfies customer-defined eligibility requirements.
         * @summary Check profile eligibility
         * @param {LinkProfileEligibilityCheckRequest} linkProfileEligibilityCheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenGet(linkTokenGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
         * @summary Retrieve network insights for the provided `access_tokens`
         * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInsightsReportGet(networkInsightsReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.networkInsightsReportGet(networkInsightsReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate(partnerCustomerCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerCreate(partnerCustomerCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable(partnerCustomerEnableRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerEnable(partnerCustomerEnableRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet(partnerCustomerGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerGet(partnerCustomerGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove(partnerCustomerRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerRemove(partnerCustomerRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate(paymentProfileCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentProfileCreate(paymentProfileCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet(paymentProfileGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentProfileGet(paymentProfileGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove(paymentProfileRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentProfileRemove(paymentProfileRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve the account associated with a processor token
         * @param {ProcessorAccountGetRequest} processorAccountGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAccountGet(processorAccountGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorAccountGet(processorAccountGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorAuthGet(processorAuthGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBalanceGet(processorBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBankTransferCreate(processorBankTransferCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorIdentityGet(processorIdentityGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch(processorIdentityMatchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorIdentityMatch(processorIdentityMatchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorLiabilitiesGet(processorLiabilitiesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorLiabilitiesGet(processorLiabilitiesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport(processorSignalDecisionReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalDecisionReport(processorSignalDecisionReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate(processorSignalEvaluateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalEvaluate(processorSignalEvaluateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
         * @summary Opt-in a processor token to Signal
         * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalPrepare(processorSignalPrepareRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalPrepare(processorSignalPrepareRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport(processorSignalReturnReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalReturnReport(processorSignalReturnReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenCreate(processorTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
         * @summary Update a processor token\'s webhook URL
         * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet(processorTransactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsGet(processorTransactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh(processorTransactionsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsRefresh(processorTransactionsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get incremental transaction updates on a processor token
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync(processorTransactionsSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsSync(processorTransactionsSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns user permissioned profile data including identity and item access tokens.
         * @summary Retrieve a Profile
         * @param {ProfileGetRequest} profileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(profileGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.profileGet(profileGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
         * @summary Check a user\'s Plaid Network status
         * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileNetworkStatusGet(profileNetworkStatusGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.profileNetworkStatusGet(profileNetworkStatusGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid sandbox `DEFAULT_UPDATE` responses include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemResetLogin(sandboxItemResetLoginRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
         * @summary Simulate a ledger deposit event in Sandbox
         * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
         * @summary Simulate converting pending balance to available balance
         * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
         * @summary Simulate a ledger withdraw event in Sandbox
         * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a refund event in Sandbox
         * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSimulate(sandboxTransferSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force item(s) for a Sandbox User into an error state
         * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxUserResetLogin(sandboxUserResetLoginRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxUserResetLogin(sandboxUserResetLoginRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * After calling `/signal/evaluate` (or `/accounts/balance/get`, for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta), call `/signal/decision/report` to report whether the transaction was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalDecisionReport(signalDecisionReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalEvaluate(signalEvaluateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare(signalPrepareRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalPrepare(signalPrepareRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` or (for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta) the `/accounts/balance/get` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalReturnReport(signalReturnReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
         * @summary Retrieve a single statement.
         * @param {StatementsDownloadRequest} statementsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsDownload(statementsDownloadRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.statementsDownload(statementsDownloadRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
         * @summary Retrieve a list of all statements associated with an item.
         * @param {StatementsListRequest} statementsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsList(statementsListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.statementsList(statementsListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
         * @summary Refresh statements data.
         * @param {StatementsRefreshRequest} statementsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsRefresh(statementsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.statementsRefresh(statementsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsEnhance(transactionsEnhanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichRequest} transactionsEnrichRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich(transactionsEnrichRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsEnrich(transactionsEnrichRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRecurringGet(transactionsRecurringGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRefresh(transactionsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesCreate(transactionsRulesCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesList(transactionsRulesListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesRemove(transactionsRulesRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsSync(transactionsSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
         * @summary Obtain user insights based on transactions sent through /transactions/enrich
         * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
         * @summary Cancel a transfer authorization
         * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCancel(transferAuthorizationCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferAuthorizationCancel(transferAuthorizationCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:  - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.  - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization. - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferAuthorizationCreate(transferAuthorizationCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary (Deprecated) Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet(transferBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferBalanceGet(transferBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCancel(transferCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet(transferCapabilitiesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCapabilitiesGet(transferCapabilitiesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet(transferConfigurationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferConfigurationGet(transferConfigurationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCreate(transferCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary Upload transfer diligence document on behalf of the originator
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
         * @summary Submit transfer diligence on behalf of the originator
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit(transferDiligenceSubmitRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferDiligenceSubmit(transferDiligenceSubmitRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventList(transferEventListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventSync(transferEventSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferGet(transferGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentCreate(transferIntentCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {TransferIntentGetRequest} transferIntentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(transferIntentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentGet(transferIntentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
         * @summary Deposit funds into a Plaid Ledger balance
         * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDeposit(transferLedgerDepositRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerDeposit(transferLedgerDepositRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
         * @summary Move available balance between the ledgers of the platform and one of its originators
         * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDistribute(transferLedgerDistributeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerDistribute(transferLedgerDistributeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
         * @summary Retrieve Plaid Ledger balance
         * @param {TransferLedgerGetRequest} transferLedgerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerGet(transferLedgerGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerGet(transferLedgerGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
         * @summary Withdraw funds from a Plaid Ledger balance
         * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerWithdraw(transferLedgerWithdrawRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerWithdraw(transferLedgerWithdrawRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferList(transferListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet(transferMetricsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferMetricsGet(transferMetricsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferMigrateAccount(transferMigrateAccountRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate(transferOriginatorCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorCreate(transferOriginatorCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
         * @summary Update the funding account associated with the originator
         * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet(transferOriginatorGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorGet(transferOriginatorGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList(transferOriginatorListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorList(transferOriginatorListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
         * @summary Create an originator for scaled platform customers
         * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel(transferRecurringCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringCancel(transferRecurringCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate(transferRecurringCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringCreate(transferRecurringCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet(transferRecurringGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringGet(transferRecurringGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList(transferRecurringListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringList(transferRecurringListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel(transferRefundCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRefundCancel(transferRefundCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate(transferRefundCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRefundCreate(transferRefundCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet(transferRefundGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRefundGet(transferRefundGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentList(transferRepaymentListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentReturnList(transferRepaymentReturnListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepGet(transferSweepGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepList(transferSweepListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns user permissioned account data including identity and Item access tokens.
         * @summary Retrieve User Account
         * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountSessionGet(userAccountSessionGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userAccountSessionGet(userAccountSessionGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userCreate(userCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Returns Items associated with a User along with their corresponding statuses.
         * @summary Get Items associated with a User
         * @param {UserItemsGetRequest} userItemsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userItemsGet(userItemsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userItemsGet(userItemsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
         * @summary Remove user
         * @param {UserRemoveRequest} userRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRemove(userRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userRemove(userRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user.
         * @summary Update user information
         * @param {UserUpdateRequest} userUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdate(userUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userUpdate(userUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate(walletCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletCreate(walletCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletGet(walletGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList(walletListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletList(walletListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionExecute(walletTransactionExecuteRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet(walletTransactionGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionGet(walletTransactionGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList(walletTransactionListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionList(walletTransactionListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        }
      };
    };
    exports.PlaidApiFp = PlaidApiFp;
    var PlaidApiFactory = function(configuration, basePath, axios2) {
      const localVarFp = exports.PlaidApiFp(configuration);
      return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest, options) {
          return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest, options) {
          return localVarFp.accountsGet(accountsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest, options) {
          return localVarFp.applicationGet(applicationGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
          return localVarFp.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
          return localVarFp.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
          return localVarFp.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest, options) {
          return localVarFp.assetReportCreate(assetReportCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest, options) {
          return localVarFp.assetReportFilter(assetReportFilterRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest, options) {
          return localVarFp.assetReportGet(assetReportGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest, options) {
          return localVarFp.assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest, options) {
          return localVarFp.assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest, options) {
          return localVarFp.assetReportRemove(assetReportRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest, options) {
          return localVarFp.authGet(authGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
          return localVarFp.bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest, options) {
          return localVarFp.bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest, options) {
          return localVarFp.bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest, options) {
          return localVarFp.bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest, options) {
          return localVarFp.bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest, options) {
          return localVarFp.bankTransferGet(bankTransferGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest, options) {
          return localVarFp.bankTransferList(bankTransferListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
          return localVarFp.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest, options) {
          return localVarFp.bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest, options) {
          return localVarFp.bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
         * @summary Evaluate risk of a bank account
         * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options) {
          return localVarFp.beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
         * @summary Get a Beacon Duplicate
         * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconDuplicateGet(beaconDuplicateGetRequest, options) {
          return localVarFp.beaconDuplicateGet(beaconDuplicateGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a fraud report for a given Beacon User.
         * @summary Create a Beacon Report
         * @param {BeaconReportCreateRequest} beaconReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportCreate(beaconReportCreateRequest, options) {
          return localVarFp.beaconReportCreate(beaconReportCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a Beacon report for a given Beacon report id.
         * @summary Get a Beacon Report
         * @param {BeaconReportGetRequest} beaconReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportGet(beaconReportGetRequest, options) {
          return localVarFp.beaconReportGet(beaconReportGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Reports for a Beacon User
         * @param {BeaconReportListRequest} beaconReportListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportList(beaconReportListRequest, options) {
          return localVarFp.beaconReportList(beaconReportListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
         * @summary Get a Beacon Report Syndication
         * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options) {
          return localVarFp.beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Report Syndications for a Beacon User
         * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationList(beaconReportSyndicationListRequest, options) {
          return localVarFp.beaconReportSyndicationList(beaconReportSyndicationListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
         * @summary Get Account Insights for a Beacon User
         * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options) {
          return localVarFp.beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
         * @summary Create a Beacon User
         * @param {BeaconUserCreateRequest} beaconUserCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserCreate(beaconUserCreateRequest, options) {
          return localVarFp.beaconUserCreate(beaconUserCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
         * @summary Get a Beacon User
         * @param {BeaconUserGetRequest} beaconUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserGet(beaconUserGetRequest, options) {
          return localVarFp.beaconUserGet(beaconUserGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all changes to the Beacon User in reverse-chronological order.
         * @summary List a Beacon User\'s history
         * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserHistoryList(beaconUserHistoryListRequest, options) {
          return localVarFp.beaconUserHistoryList(beaconUserHistoryListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
         * @summary Review a Beacon User
         * @param {BeaconUserReviewRequest} beaconUserReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserReview(beaconUserReviewRequest, options) {
          return localVarFp.beaconUserReview(beaconUserReviewRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
         * @summary Update the identity data of a Beacon User
         * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserUpdate(beaconUserUpdateRequest, options) {
          return localVarFp.beaconUserUpdate(beaconUserUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body, options) {
          return localVarFp.categoriesGet(body, options).then((request) => request(axios2, basePath));
        },
        /**
         * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary Retrieve a PDF Reports
         * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consumerReportPdfGet(consumerReportPDFGetRequest, options) {
          return localVarFp.consumerReportPdfGet(consumerReportPDFGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/bank_income/create` creates a CRA report for income verification
         * @summary Create a CRA report for income verification
         * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeCreate(craBankIncomeCreateRequest, options) {
          return localVarFp.craBankIncomeCreate(craBankIncomeCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeGet(craBankIncomeGetRequest, options) {
          return localVarFp.craBankIncomeGet(craBankIncomeGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
         * @summary Create a Base Report
         * @param {CraBaseReportCreateRequest} craBaseReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBaseReportCreate(craBaseReportCreateRequest, options) {
          return localVarFp.craBaseReportCreate(craBaseReportCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/user/create`.
         * @summary Retrieve a Base Report
         * @param {CraBaseReportGetRequest} craBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBaseReportGet(craBaseReportGetRequest, options) {
          return localVarFp.craBaseReportGet(craBaseReportGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve a Base Report
         * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options) {
          return localVarFp.craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. Plaid Check automatically starts creating Consumer Report data after the user completes the Link process with a Plaid Check product, so you typically would only call this endpoint if you wish to generate an updated report, some time after the initial report was generated.
         * @summary Create a Consumer Report
         * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCreate(craCheckReportCreateRequest, options) {
          return localVarFp.craCheckReportCreate(craCheckReportCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve cash flow information from your user\'s banks
         * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options) {
          return localVarFp.craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
         * @summary Retrieve network attributes for the user
         * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options) {
          return localVarFp.craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from partners
         * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options) {
          return localVarFp.craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/check_report/pdf/get` retrieves the most recent Bank Income report (if it exists) followed by the most recent Base Report (if it exists) in PDF format.
         * @summary Retrieve Consumer Reports as a PDF
         * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPdfGet(craCheckReportPDFGetRequest, options) {
          return localVarFp.craCheckReportPdfGet(craCheckReportPDFGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/loans/applications/register` registers loan applications and decisions.
         * @summary Register loan applications and decisions.
         * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options) {
          return localVarFp.craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/loans/register` registers a list of loans to their applicants.
         * @summary Register a list of loans to their applicants.
         * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansRegister(cRALoansRegisterRequest, options) {
          return localVarFp.craLoansRegister(cRALoansRegisterRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
         * @summary Unregister a list of loans.
         * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUnregister(craLoansUnregisterRequest, options) {
          return localVarFp.craLoansUnregister(craLoansUnregisterRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/loans/update` updates loan information such as the status and payment history.
         * @summary Updates loan data.
         * @param {CraLoansUpdateRequest} craLoansUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUpdate(craLoansUpdateRequest, options) {
          return localVarFp.craLoansUpdate(craLoansUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
         * @summary Retrieve a Monitoring Insights Report
         * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options) {
          return localVarFp.craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every 14 days.
         * @summary Subscribe to Monitoring Insights
         * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options) {
          return localVarFp.craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
         * @summary Unsubscribe from Monitoring Insights
         * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options) {
          return localVarFp.craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/cra/partner_insights/get` returns cash flow insights for a specified user.
         * @summary Retrieve cash flow insights from the bank accounts used for income verification
         * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craPartnerInsightsGet(craPartnerInsightsGetRequest, options) {
          return localVarFp.craPartnerInsightsGet(craPartnerInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
          return localVarFp.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet(requestBody, options) {
          return localVarFp.creditAssetReportFreddieMacGet(requestBody, options).then((request) => request(axios2, basePath));
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options) {
          return localVarFp.creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options) {
          return localVarFp.creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet(creditBankEmploymentGetRequest, options) {
          return localVarFp.creditBankEmploymentGet(creditBankEmploymentGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest, options) {
          return localVarFp.creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options) {
          return localVarFp.creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options) {
          return localVarFp.creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options) {
          return localVarFp.creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options) {
          return localVarFp.creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest, options) {
          return localVarFp.creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options) {
          return localVarFp.creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
          return localVarFp.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
         * @summary Update the parsing configuration for a document income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeParsingConfigUpdate(requestBody, options) {
          return localVarFp.creditPayrollIncomeParsingConfigUpdate(requestBody, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
          return localVarFp.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options) {
          return localVarFp.creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options) {
          return localVarFp.creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate(creditRelayCreateRequest, options) {
          return localVarFp.creditRelayCreate(creditRelayCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you
         * @param {CreditRelayGetRequest} creditRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet(creditRelayGetRequest, options) {
          return localVarFp.creditRelayGet(creditRelayGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayPdfGet(creditRelayPDFGetRequest, options) {
          return localVarFp.creditRelayPdfGet(creditRelayPDFGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh(creditRelayRefreshRequest, options) {
          return localVarFp.creditRelayRefresh(creditRelayRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove(creditRelayRemoveRequest, options) {
          return localVarFp.creditRelayRemove(creditRelayRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options) {
          return localVarFp.creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet(creditSessionsGetRequest, options) {
          return localVarFp.creditSessionsGet(creditSessionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Retrieve information about a dashboard user.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet(dashboardUserGetRequest, options) {
          return localVarFp.dashboardUserGet(dashboardUserGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all dashboard users associated with your account.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList(dashboardUserListRequest, options) {
          return localVarFp.dashboardUserList(dashboardUserListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
          return localVarFp.depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest, options) {
          return localVarFp.depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest, options) {
          return localVarFp.depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
          return localVarFp.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest, options) {
          return localVarFp.employersSearch(employersSearchRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest, options) {
          return localVarFp.employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications(fDXNotification, options) {
          return localVarFp.fdxNotifications(fDXNotification, options).then((request) => request(axios2, basePath));
        },
        /**
         * Get a specific recipient
         * @summary Get Recipient
         * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
         * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipient(recipientId, oAUTHSTATEID, options) {
          return localVarFp.getRecipient(recipientId, oAUTHSTATEID, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a list of Recipients
         * @summary Get Recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipients(options) {
          return localVarFp.getRecipients(options).then((request) => request(axios2, basePath));
        },
        /**
         * Use `/identity/documents/uploads/get` to retrieve document uploaded identity.
         * @summary Returns uploaded document identity
         * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options) {
          return localVarFp.identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest, options) {
          return localVarFp.identityGet(identityGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch(identityMatchRequest, options) {
          return localVarFp.identityMatch(identityMatchRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh(identityRefreshRequest, options) {
          return localVarFp.identityRefresh(identityRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
         * @summary Create autofill for an Identity Verification
         * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options) {
          return localVarFp.identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
         * @summary Create a new Identity Verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate(identityVerificationCreateRequest, options) {
          return localVarFp.identityVerificationCreate(identityVerificationCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Retrieve a previously created Identity Verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet(identityVerificationGetRequest, options) {
          return localVarFp.identityVerificationGet(identityVerificationGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList(identityVerificationListRequest, options) {
          return localVarFp.identityVerificationList(identityVerificationListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Allow a customer to retry their Identity Verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry(identityVerificationRetryRequest, options) {
          return localVarFp.identityVerificationRetry(identityVerificationRetryRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest, options) {
          return localVarFp.incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
          return localVarFp.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
          return localVarFp.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
          return localVarFp.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options) {
          return localVarFp.incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest, options) {
          return localVarFp.institutionsGet(institutionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest, options) {
          return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest, options) {
          return localVarFp.institutionsSearch(institutionsSearchRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet(investmentsAuthGetRequest, options) {
          return localVarFp.investmentsAuthGet(investmentsAuthGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
          return localVarFp.investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh(investmentsRefreshRequest, options) {
          return localVarFp.investmentsRefresh(investmentsRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
          return localVarFp.investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
          return localVarFp.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList(itemActivityListRequest, options) {
          return localVarFp.itemActivityList(itemActivityListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest, options) {
          return localVarFp.itemApplicationList(itemApplicationListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
          return localVarFp.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
         * @summary Unlink a user’s connected application
         * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationUnlink(itemApplicationUnlinkRequest, options) {
          return localVarFp.itemApplicationUnlink(itemApplicationUnlinkRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
          return localVarFp.itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest, options) {
          return localVarFp.itemGet(itemGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest, options) {
          return localVarFp.itemImport(itemImportRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
          return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest, options) {
          return localVarFp.itemRemove(itemRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest, options) {
          return localVarFp.itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest, options) {
          return localVarFp.liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate(linkDeliveryCreateRequest, options) {
          return localVarFp.linkDeliveryCreate(linkDeliveryCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet(linkDeliveryGetRequest, options) {
          return localVarFp.linkDeliveryGet(linkDeliveryGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options) {
          return localVarFp.linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/link/profile/eligibility/check` endpoint can be used to check whether a user with the supplied phone number has a saved profile that satisfies customer-defined eligibility requirements.
         * @summary Check profile eligibility
         * @param {LinkProfileEligibilityCheckRequest} linkProfileEligibilityCheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest, options) {
          return localVarFp.linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest, options) {
          return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest, options) {
          return localVarFp.linkTokenGet(linkTokenGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
         * @summary Retrieve network insights for the provided `access_tokens`
         * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInsightsReportGet(networkInsightsReportGetRequest, options) {
          return localVarFp.networkInsightsReportGet(networkInsightsReportGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate(partnerCustomerCreateRequest, options) {
          return localVarFp.partnerCustomerCreate(partnerCustomerCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable(partnerCustomerEnableRequest, options) {
          return localVarFp.partnerCustomerEnable(partnerCustomerEnableRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet(partnerCustomerGetRequest, options) {
          return localVarFp.partnerCustomerGet(partnerCustomerGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options) {
          return localVarFp.partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove(partnerCustomerRemoveRequest, options) {
          return localVarFp.partnerCustomerRemove(partnerCustomerRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
          return localVarFp.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
          return localVarFp.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
          return localVarFp.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
          return localVarFp.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
          return localVarFp.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
          return localVarFp.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
          return localVarFp.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
          return localVarFp.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
          return localVarFp.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
          return localVarFp.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
          return localVarFp.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate(paymentProfileCreateRequest, options) {
          return localVarFp.paymentProfileCreate(paymentProfileCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet(paymentProfileGetRequest, options) {
          return localVarFp.paymentProfileGet(paymentProfileGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove(paymentProfileRemoveRequest, options) {
          return localVarFp.paymentProfileRemove(paymentProfileRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve the account associated with a processor token
         * @param {ProcessorAccountGetRequest} processorAccountGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAccountGet(processorAccountGetRequest, options) {
          return localVarFp.processorAccountGet(processorAccountGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
          return localVarFp.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest, options) {
          return localVarFp.processorAuthGet(processorAuthGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest, options) {
          return localVarFp.processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest, options) {
          return localVarFp.processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest, options) {
          return localVarFp.processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch(processorIdentityMatchRequest, options) {
          return localVarFp.processorIdentityMatch(processorIdentityMatchRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorLiabilitiesGet(processorLiabilitiesGetRequest, options) {
          return localVarFp.processorLiabilitiesGet(processorLiabilitiesGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport(processorSignalDecisionReportRequest, options) {
          return localVarFp.processorSignalDecisionReport(processorSignalDecisionReportRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate(processorSignalEvaluateRequest, options) {
          return localVarFp.processorSignalEvaluate(processorSignalEvaluateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
         * @summary Opt-in a processor token to Signal
         * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalPrepare(processorSignalPrepareRequest, options) {
          return localVarFp.processorSignalPrepare(processorSignalPrepareRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport(processorSignalReturnReportRequest, options) {
          return localVarFp.processorSignalReturnReport(processorSignalReturnReportRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
          return localVarFp.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest, options) {
          return localVarFp.processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options) {
          return localVarFp.processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options) {
          return localVarFp.processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
         * @summary Update a processor token\'s webhook URL
         * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options) {
          return localVarFp.processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet(processorTransactionsGetRequest, options) {
          return localVarFp.processorTransactionsGet(processorTransactionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options) {
          return localVarFp.processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh(processorTransactionsRefreshRequest, options) {
          return localVarFp.processorTransactionsRefresh(processorTransactionsRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get incremental transaction updates on a processor token
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync(processorTransactionsSyncRequest, options) {
          return localVarFp.processorTransactionsSync(processorTransactionsSyncRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns user permissioned profile data including identity and item access tokens.
         * @summary Retrieve a Profile
         * @param {ProfileGetRequest} profileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(profileGetRequest, options) {
          return localVarFp.profileGet(profileGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
         * @summary Check a user\'s Plaid Network status
         * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileNetworkStatusGet(profileNetworkStatusGetRequest, options) {
          return localVarFp.profileNetworkStatusGet(profileNetworkStatusGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options) {
          return localVarFp.sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
          return localVarFp.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
          return localVarFp.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
          return localVarFp.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid sandbox `DEFAULT_UPDATE` responses include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
          return localVarFp.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
          return localVarFp.sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
          return localVarFp.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
          return localVarFp.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options) {
          return localVarFp.sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
          return localVarFp.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
          return localVarFp.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
          return localVarFp.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
         * @summary Simulate a ledger deposit event in Sandbox
         * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options) {
          return localVarFp.sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
         * @summary Simulate converting pending balance to available balance
         * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options) {
          return localVarFp.sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
         * @summary Simulate a ledger withdraw event in Sandbox
         * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options) {
          return localVarFp.sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a refund event in Sandbox
         * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options) {
          return localVarFp.sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
          return localVarFp.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
          return localVarFp.sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
          return localVarFp.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options) {
          return localVarFp.sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options) {
          return localVarFp.sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options) {
          return localVarFp.sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options) {
          return localVarFp.sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force item(s) for a Sandbox User into an error state
         * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxUserResetLogin(sandboxUserResetLoginRequest, options) {
          return localVarFp.sandboxUserResetLogin(sandboxUserResetLoginRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * After calling `/signal/evaluate` (or `/accounts/balance/get`, for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta), call `/signal/decision/report` to report whether the transaction was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest, options) {
          return localVarFp.signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest, options) {
          return localVarFp.signalEvaluate(signalEvaluateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare(signalPrepareRequest, options) {
          return localVarFp.signalPrepare(signalPrepareRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` or (for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta) the `/accounts/balance/get` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest, options) {
          return localVarFp.signalReturnReport(signalReturnReportRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
         * @summary Retrieve a single statement.
         * @param {StatementsDownloadRequest} statementsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsDownload(statementsDownloadRequest, options) {
          return localVarFp.statementsDownload(statementsDownloadRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
         * @summary Retrieve a list of all statements associated with an item.
         * @param {StatementsListRequest} statementsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsList(statementsListRequest, options) {
          return localVarFp.statementsList(statementsListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
         * @summary Refresh statements data.
         * @param {StatementsRefreshRequest} statementsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsRefresh(statementsRefreshRequest, options) {
          return localVarFp.statementsRefresh(statementsRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest, options) {
          return localVarFp.transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichRequest} transactionsEnrichRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich(transactionsEnrichRequest, options) {
          return localVarFp.transactionsEnrich(transactionsEnrichRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest, options) {
          return localVarFp.transactionsGet(transactionsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest, options) {
          return localVarFp.transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest, options) {
          return localVarFp.transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest, options) {
          return localVarFp.transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest, options) {
          return localVarFp.transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
          return localVarFp.transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest, options) {
          return localVarFp.transactionsSync(transactionsSyncRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
         * @summary Obtain user insights based on transactions sent through /transactions/enrich
         * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options) {
          return localVarFp.transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
         * @summary Cancel a transfer authorization
         * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCancel(transferAuthorizationCancelRequest, options) {
          return localVarFp.transferAuthorizationCancel(transferAuthorizationCancelRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:  - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.  - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization. - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
          return localVarFp.transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary (Deprecated) Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet(transferBalanceGetRequest, options) {
          return localVarFp.transferBalanceGet(transferBalanceGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest, options) {
          return localVarFp.transferCancel(transferCancelRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet(transferCapabilitiesGetRequest, options) {
          return localVarFp.transferCapabilitiesGet(transferCapabilitiesGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet(transferConfigurationGetRequest, options) {
          return localVarFp.transferConfigurationGet(transferConfigurationGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest, options) {
          return localVarFp.transferCreate(transferCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary Upload transfer diligence document on behalf of the originator
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options) {
          return localVarFp.transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
         * @summary Submit transfer diligence on behalf of the originator
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit(transferDiligenceSubmitRequest, options) {
          return localVarFp.transferDiligenceSubmit(transferDiligenceSubmitRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest, options) {
          return localVarFp.transferEventList(transferEventListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest, options) {
          return localVarFp.transferEventSync(transferEventSyncRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest, options) {
          return localVarFp.transferGet(transferGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest, options) {
          return localVarFp.transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {TransferIntentGetRequest} transferIntentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(transferIntentGetRequest, options) {
          return localVarFp.transferIntentGet(transferIntentGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
         * @summary Deposit funds into a Plaid Ledger balance
         * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDeposit(transferLedgerDepositRequest, options) {
          return localVarFp.transferLedgerDeposit(transferLedgerDepositRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
         * @summary Move available balance between the ledgers of the platform and one of its originators
         * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDistribute(transferLedgerDistributeRequest, options) {
          return localVarFp.transferLedgerDistribute(transferLedgerDistributeRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
         * @summary Retrieve Plaid Ledger balance
         * @param {TransferLedgerGetRequest} transferLedgerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerGet(transferLedgerGetRequest, options) {
          return localVarFp.transferLedgerGet(transferLedgerGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
         * @summary Withdraw funds from a Plaid Ledger balance
         * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerWithdraw(transferLedgerWithdrawRequest, options) {
          return localVarFp.transferLedgerWithdraw(transferLedgerWithdrawRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest, options) {
          return localVarFp.transferList(transferListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet(transferMetricsGetRequest, options) {
          return localVarFp.transferMetricsGet(transferMetricsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest, options) {
          return localVarFp.transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate(transferOriginatorCreateRequest, options) {
          return localVarFp.transferOriginatorCreate(transferOriginatorCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
         * @summary Update the funding account associated with the originator
         * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options) {
          return localVarFp.transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet(transferOriginatorGetRequest, options) {
          return localVarFp.transferOriginatorGet(transferOriginatorGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList(transferOriginatorListRequest, options) {
          return localVarFp.transferOriginatorList(transferOriginatorListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
         * @summary Create an originator for scaled platform customers
         * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options) {
          return localVarFp.transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options) {
          return localVarFp.transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel(transferRecurringCancelRequest, options) {
          return localVarFp.transferRecurringCancel(transferRecurringCancelRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate(transferRecurringCreateRequest, options) {
          return localVarFp.transferRecurringCreate(transferRecurringCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet(transferRecurringGetRequest, options) {
          return localVarFp.transferRecurringGet(transferRecurringGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList(transferRecurringListRequest, options) {
          return localVarFp.transferRecurringList(transferRecurringListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel(transferRefundCancelRequest, options) {
          return localVarFp.transferRefundCancel(transferRefundCancelRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate(transferRefundCreateRequest, options) {
          return localVarFp.transferRefundCreate(transferRefundCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet(transferRefundGetRequest, options) {
          return localVarFp.transferRefundGet(transferRefundGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest, options) {
          return localVarFp.transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
          return localVarFp.transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest, options) {
          return localVarFp.transferSweepGet(transferSweepGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest, options) {
          return localVarFp.transferSweepList(transferSweepListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns user permissioned account data including identity and Item access tokens.
         * @summary Retrieve User Account
         * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountSessionGet(userAccountSessionGetRequest, options) {
          return localVarFp.userAccountSessionGet(userAccountSessionGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest, options) {
          return localVarFp.userCreate(userCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Returns Items associated with a User along with their corresponding statuses.
         * @summary Get Items associated with a User
         * @param {UserItemsGetRequest} userItemsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userItemsGet(userItemsGetRequest, options) {
          return localVarFp.userItemsGet(userItemsGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
         * @summary Remove user
         * @param {UserRemoveRequest} userRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRemove(userRemoveRequest, options) {
          return localVarFp.userRemove(userRemoveRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user.
         * @summary Update user information
         * @param {UserUpdateRequest} userUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdate(userUpdateRequest, options) {
          return localVarFp.userUpdate(userUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate(walletCreateRequest, options) {
          return localVarFp.walletCreate(walletCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest, options) {
          return localVarFp.walletGet(walletGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList(walletListRequest, options) {
          return localVarFp.walletList(walletListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest, options) {
          return localVarFp.walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet(walletTransactionGetRequest, options) {
          return localVarFp.walletTransactionGet(walletTransactionGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList(walletTransactionListRequest, options) {
          return localVarFp.walletTransactionList(walletTransactionListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options) {
          return localVarFp.watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options) {
          return localVarFp.watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options) {
          return localVarFp.watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options) {
          return localVarFp.watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options) {
          return localVarFp.watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options) {
          return localVarFp.watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options) {
          return localVarFp.watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options) {
          return localVarFp.watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options) {
          return localVarFp.watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options) {
          return localVarFp.watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options) {
          return localVarFp.watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options) {
          return localVarFp.watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options) {
          return localVarFp.watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options) {
          return localVarFp.watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options) {
          return localVarFp.watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options) {
          return localVarFp.watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options) {
          return localVarFp.watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options) {
          return localVarFp.watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options) {
          return localVarFp.watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options) {
          return localVarFp.watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options).then((request) => request(axios2, basePath));
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
          return localVarFp.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(axios2, basePath));
        }
      };
    };
    exports.PlaidApiFactory = PlaidApiFactory;
    var PlaidApi2 = class extends base_1.BaseAPI {
      /**
       * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
       * @summary Retrieve real-time balance data
       * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      accountsBalanceGet(accountsBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
       * @summary Retrieve accounts
       * @param {AccountsGetRequest} accountsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      accountsGet(accountsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
       * @summary Retrieve information about a Plaid application
       * @param {ApplicationGetRequest} applicationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      applicationGet(applicationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).applicationGet(applicationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
       * @summary Create Asset Report Audit Copy
       * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
       * @summary Retrieve an Asset Report Audit Copy
       * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
       * @summary Remove Asset Report Audit Copy
       * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
       * @summary Create an Asset Report
       * @param {AssetReportCreateRequest} assetReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportCreate(assetReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportCreate(assetReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
       * @summary Filter Asset Report
       * @param {AssetReportFilterRequest} assetReportFilterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportFilter(assetReportFilterRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportFilter(assetReportFilterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
       * @summary Retrieve an Asset Report
       * @param {AssetReportGetRequest} assetReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportGet(assetReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportGet(assetReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
       * @summary Retrieve a PDF Asset Report
       * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportPdfGet(assetReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
       * @summary Refresh an Asset Report
       * @param {AssetReportRefreshRequest} assetReportRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportRefresh(assetReportRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
       * @summary Delete an Asset Report
       * @param {AssetReportRemoveRequest} assetReportRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportRemove(assetReportRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRemove(assetReportRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
       * @summary Retrieve auth data
       * @param {AuthGetRequest} authGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      authGet(authGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).authGet(authGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
       * @summary Get balance of your Bank Transfer account
       * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
       * @summary Cancel a bank transfer
       * @param {BankTransferCancelRequest} bankTransferCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferCancel(bankTransferCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
       * @summary Create a bank transfer
       * @param {BankTransferCreateRequest} bankTransferCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferCreate(bankTransferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
       * @summary List bank transfer events
       * @param {BankTransferEventListRequest} bankTransferEventListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferEventList(bankTransferEventListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
       * @summary Sync bank transfer events
       * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferEventSync(bankTransferEventSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
       * @summary Retrieve a bank transfer
       * @param {BankTransferGetRequest} bankTransferGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferGet(bankTransferGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferGet(bankTransferGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
       * @summary List bank transfers
       * @param {BankTransferListRequest} bankTransferListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferList(bankTransferListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferList(bankTransferListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
       * @summary Migrate account into Bank Transfers
       * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
       * @summary Retrieve a sweep
       * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferSweepGet(bankTransferSweepGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
       * @summary List sweeps
       * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferSweepList(bankTransferSweepListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
       * @summary Evaluate risk of a bank account
       * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
       * @summary Get a Beacon Duplicate
       * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconDuplicateGet(beaconDuplicateGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconDuplicateGet(beaconDuplicateGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a fraud report for a given Beacon User.
       * @summary Create a Beacon Report
       * @param {BeaconReportCreateRequest} beaconReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportCreate(beaconReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportCreate(beaconReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a Beacon report for a given Beacon report id.
       * @summary Get a Beacon Report
       * @param {BeaconReportGetRequest} beaconReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportGet(beaconReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportGet(beaconReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
       * @summary List Beacon Reports for a Beacon User
       * @param {BeaconReportListRequest} beaconReportListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportList(beaconReportListRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportList(beaconReportListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
       * @summary Get a Beacon Report Syndication
       * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
       * @summary List Beacon Report Syndications for a Beacon User
       * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportSyndicationList(beaconReportSyndicationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportSyndicationList(beaconReportSyndicationListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
       * @summary Get Account Insights for a Beacon User
       * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
       * @summary Create a Beacon User
       * @param {BeaconUserCreateRequest} beaconUserCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserCreate(beaconUserCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserCreate(beaconUserCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
       * @summary Get a Beacon User
       * @param {BeaconUserGetRequest} beaconUserGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserGet(beaconUserGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserGet(beaconUserGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all changes to the Beacon User in reverse-chronological order.
       * @summary List a Beacon User\'s history
       * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserHistoryList(beaconUserHistoryListRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserHistoryList(beaconUserHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
       * @summary Review a Beacon User
       * @param {BeaconUserReviewRequest} beaconUserReviewRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserReview(beaconUserReviewRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserReview(beaconUserReviewRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
       * @summary Update the identity data of a Beacon User
       * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserUpdate(beaconUserUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserUpdate(beaconUserUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
       * @summary Get categories
       * @param {object} body
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      categoriesGet(body, options) {
        return exports.PlaidApiFp(this.configuration).categoriesGet(body, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
       * @summary Retrieve a PDF Reports
       * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      consumerReportPdfGet(consumerReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).consumerReportPdfGet(consumerReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/bank_income/create` creates a CRA report for income verification
       * @summary Create a CRA report for income verification
       * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craBankIncomeCreate(craBankIncomeCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craBankIncomeCreate(craBankIncomeCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
       * @summary Retrieve information from the bank accounts used for income verification
       * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craBankIncomeGet(craBankIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craBankIncomeGet(craBankIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.
       * @summary Create a Base Report
       * @param {CraBaseReportCreateRequest} craBaseReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craBaseReportCreate(craBaseReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craBaseReportCreate(craBaseReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/user/create`.
       * @summary Retrieve a Base Report
       * @param {CraBaseReportGetRequest} craBaseReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craBaseReportGet(craBaseReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craBaseReportGet(craBaseReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
       * @summary Retrieve a Base Report
       * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. Plaid Check automatically starts creating Consumer Report data after the user completes the Link process with a Plaid Check product, so you typically would only call this endpoint if you wish to generate an updated report, some time after the initial report was generated.
       * @summary Create a Consumer Report
       * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportCreate(craCheckReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportCreate(craCheckReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
       * @summary Retrieve cash flow information from your user\'s banks
       * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
       * @summary Retrieve network attributes for the user
       * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
       * @summary Retrieve cash flow insights from partners
       * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/check_report/pdf/get` retrieves the most recent Bank Income report (if it exists) followed by the most recent Base Report (if it exists) in PDF format.
       * @summary Retrieve Consumer Reports as a PDF
       * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportPdfGet(craCheckReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportPdfGet(craCheckReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/applications/register` registers loan applications and decisions.
       * @summary Register loan applications and decisions.
       * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/register` registers a list of loans to their applicants.
       * @summary Register a list of loans to their applicants.
       * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansRegister(cRALoansRegisterRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansRegister(cRALoansRegisterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
       * @summary Unregister a list of loans.
       * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansUnregister(craLoansUnregisterRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansUnregister(craLoansUnregisterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/update` updates loan information such as the status and payment history.
       * @summary Updates loan data.
       * @param {CraLoansUpdateRequest} craLoansUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansUpdate(craLoansUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansUpdate(craLoansUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
       * @summary Retrieve a Monitoring Insights Report
       * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every 14 days.
       * @summary Subscribe to Monitoring Insights
       * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options) {
        return exports.PlaidApiFp(this.configuration).craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
       * @summary Unsubscribe from Monitoring Insights
       * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options) {
        return exports.PlaidApiFp(this.configuration).craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/partner_insights/get` returns cash flow insights for a specified user.
       * @summary Retrieve cash flow insights from the bank accounts used for income verification
       * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craPartnerInsightsGet(craPartnerInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craPartnerInsightsGet(craPartnerInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
       * @summary Create payment token
       * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
       * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
       * @param {{ [key: string]: object; }} requestBody
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditAssetReportFreddieMacGet(requestBody, options) {
        return exports.PlaidApiFp(this.configuration).creditAssetReportFreddieMacGet(requestBody, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
       * @summary Create Asset or Income Report Audit Copy Token
       * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
       * @summary Update an Audit Copy Token
       * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
       * @summary Retrieve information from the bank accounts used for employment verification
       * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankEmploymentGet(creditBankEmploymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankEmploymentGet(creditBankEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
       * @summary Retrieve information from the bank accounts used for income verification
       * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomeGet(creditBankIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
       * @summary Retrieve information from the bank accounts used for income verification in PDF format
       * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
       * @summary Refresh a user\'s bank income information
       * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
       * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
       * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
       * @summary Retrieve data for a user\'s uploaded bank statements
       * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
       * @summary Retrieve a summary of an individual\'s employment information
       * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditEmploymentGet(creditEmploymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
       * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
       * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
       * @summary Retrieve a user\'s payroll information
       * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
       * @summary Update the parsing configuration for a document income verification
       * @param {{ [key: string]: object; }} requestBody
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeParsingConfigUpdate(requestBody, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeParsingConfigUpdate(requestBody, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
       * @summary Check income verification eligibility and optimize conversion
       * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
       * @summary Refresh a digital payroll income verification
       * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
       * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
       * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
       * @summary Create a relay token to share an Asset Report with a partner client
       * @param {CreditRelayCreateRequest} creditRelayCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayCreate(creditRelayCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayCreate(creditRelayCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
       * @summary Retrieve the reports associated with a relay token that was shared with you
       * @param {CreditRelayGetRequest} creditRelayGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayGet(creditRelayGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayGet(creditRelayGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
       * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
       * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayPdfGet(creditRelayPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayPdfGet(creditRelayPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
       * @summary Refresh a report of a relay token
       * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayRefresh(creditRelayRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayRefresh(creditRelayRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
       * @summary Remove relay token
       * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayRemove(creditRelayRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayRemove(creditRelayRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
       * @summary Remove an Audit Copy token
       * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
       * @summary Retrieve Link sessions for your user
       * @param {CreditSessionsGetRequest} creditSessionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditSessionsGet(creditSessionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditSessionsGet(creditSessionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve information about a dashboard user.
       * @summary Retrieve a dashboard user
       * @param {DashboardUserGetRequest} dashboardUserGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      dashboardUserGet(dashboardUserGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).dashboardUserGet(dashboardUserGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all dashboard users associated with your account.
       * @summary List dashboard users
       * @param {DashboardUserListRequest} dashboardUserListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      dashboardUserList(dashboardUserListRequest, options) {
        return exports.PlaidApiFp(this.configuration).dashboardUserList(dashboardUserListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
       * @summary Create a deposit switch without using Plaid Exchange
       * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
       * @summary Create a deposit switch
       * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchCreate(depositSwitchCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
       * @summary Retrieve a deposit switch
       * @param {DepositSwitchGetRequest} depositSwitchGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchGet(depositSwitchGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
       * @summary Create a deposit switch token
       * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
       * @summary Search employer database
       * @param {EmployersSearchRequest} employersSearchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      employersSearch(employersSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).employersSearch(employersSearchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
       * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
       * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      employmentVerificationGet(employmentVerificationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * A generic webhook receiver endpoint for FDX Event Notifications
       * @summary Webhook receiver for fdx notifications
       * @param {FDXNotification} fDXNotification
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      fdxNotifications(fDXNotification, options) {
        return exports.PlaidApiFp(this.configuration).fdxNotifications(fDXNotification, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get a specific recipient
       * @summary Get Recipient
       * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
       * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      getRecipient(recipientId, oAUTHSTATEID, options) {
        return exports.PlaidApiFp(this.configuration).getRecipient(recipientId, oAUTHSTATEID, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a list of Recipients
       * @summary Get Recipients
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      getRecipients(options) {
        return exports.PlaidApiFp(this.configuration).getRecipients(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/identity/documents/uploads/get` to retrieve document uploaded identity.
       * @summary Returns uploaded document identity
       * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
       * @summary Retrieve identity data
       * @param {IdentityGetRequest} identityGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityGet(identityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
       * @summary Retrieve identity match score
       * @param {IdentityMatchRequest} identityMatchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityMatch(identityMatchRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityMatch(identityMatchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh identity data
       * @param {IdentityRefreshRequest} identityRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityRefresh(identityRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityRefresh(identityRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
       * @summary Create autofill for an Identity Verification
       * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
       * @summary Create a new Identity Verification
       * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationCreate(identityVerificationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationCreate(identityVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve a previously created Identity Verification.
       * @summary Retrieve Identity Verification
       * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationGet(identityVerificationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationGet(identityVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Filter and list Identity Verifications created by your account
       * @summary List Identity Verifications
       * @param {IdentityVerificationListRequest} identityVerificationListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationList(identityVerificationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationList(identityVerificationListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Allow a customer to retry their Identity Verification
       * @summary Retry an Identity Verification
       * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationRetry(identityVerificationRetryRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationRetry(identityVerificationRetryRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
       * @summary (Deprecated) Create an income verification instance
       * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationCreate(incomeVerificationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
       * @summary (Deprecated) Download the original documents used for income verification
       * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
       * @summary (Deprecated) Retrieve information from the paystubs used for income verification
       * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
       * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
       * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
       * @summary (Deprecated) Retrieve information from the tax documents used for income verification
       * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
       * @summary Get details of all supported institutions
       * @param {InstitutionsGetRequest} institutionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      institutionsGet(institutionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsGet(institutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
       * @summary Get details of an institution
       * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      institutionsGetById(institutionsGetByIdRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
       * @summary Search institutions
       * @param {InstitutionsSearchRequest} institutionsSearchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      institutionsSearch(institutionsSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsSearch(institutionsSearchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
       * @summary Get data needed to authorize an investments transfer
       * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsAuthGet(investmentsAuthGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsAuthGet(investmentsAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
       * @summary Get Investment holdings
       * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh investment data
       * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsRefresh(investmentsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsRefresh(investmentsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
       * @summary Get investment transactions
       * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
       * @summary Invalidate access_token
       * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List a historical log of user consent events
       * @summary List a historical log of user consent events
       * @param {ItemActivityListRequest} itemActivityListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemActivityList(itemActivityListRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemActivityList(itemActivityListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List a user’s connected applications
       * @summary List a user’s connected applications
       * @param {ItemApplicationListRequest} itemApplicationListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemApplicationList(itemApplicationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationList(itemApplicationListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Enable consumers to update product access on selected accounts for an application.
       * @summary Update the scopes of access for a particular application
       * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
       * @summary Unlink a user’s connected application
       * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemApplicationUnlink(itemApplicationUnlinkRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationUnlink(itemApplicationUnlinkRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
       * @summary Create public token
       * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns information about the status of an Item.
       * @summary Retrieve an Item
       * @param {ItemGetRequest} itemGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemGet(itemGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemGet(itemGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
       * @summary Import Item
       * @param {ItemImportRequest} itemImportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemImport(itemImportRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemImport(itemImportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
       * @summary Exchange public token for an access token
       * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
       * @summary Remove an Item
       * @param {ItemRemoveRequest} itemRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemRemove(itemRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
       * @summary Update Webhook URL
       * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemWebhookUpdate(itemWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
       * @summary Retrieve Liabilities data
       * @param {LiabilitiesGetRequest} liabilitiesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      liabilitiesGet(liabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
       * @summary Create Hosted Link session
       * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkDeliveryCreate(linkDeliveryCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkDeliveryCreate(linkDeliveryCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
       * @summary Get Hosted Link session
       * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkDeliveryGet(linkDeliveryGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkDeliveryGet(linkDeliveryGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
       * @summary Exchange the Link Correlation Id for a Link Token
       * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/link/profile/eligibility/check` endpoint can be used to check whether a user with the supplied phone number has a saved profile that satisfies customer-defined eligibility requirements.
       * @summary Check profile eligibility
       * @param {LinkProfileEligibilityCheckRequest} linkProfileEligibilityCheckRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkProfileEligibilityCheck(linkProfileEligibilityCheckRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
       * @summary Create Link Token
       * @param {LinkTokenCreateRequest} linkTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkTokenCreate(linkTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
       * @summary Get Link Token
       * @param {LinkTokenGetRequest} linkTokenGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkTokenGet(linkTokenGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkTokenGet(linkTokenGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
       * @summary Retrieve network insights for the provided `access_tokens`
       * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      networkInsightsReportGet(networkInsightsReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).networkInsightsReportGet(networkInsightsReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
       * @summary Creates a new end customer for a Plaid reseller.
       * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerCreate(partnerCustomerCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerCreate(partnerCustomerCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
       * @summary Enables a Plaid reseller\'s end customer in the Production environment.
       * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerEnable(partnerCustomerEnableRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerEnable(partnerCustomerEnableRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
       * @summary Returns a Plaid reseller\'s end customer.
       * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerGet(partnerCustomerGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerGet(partnerCustomerGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
       * @summary Returns OAuth-institution registration information for a given end customer.
       * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
       * @summary Removes a Plaid reseller\'s end customer.
       * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerRemove(partnerCustomerRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerRemove(partnerCustomerRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
       * @summary Create payment consent
       * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
       * @summary Get payment consent
       * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
       * @summary Execute a single payment using consent
       * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
       * @summary Revoke payment consent
       * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
       * @summary Create a payment
       * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
       * @summary Get payment details
       * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
       * @summary List payments
       * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
       * @summary Reverse an existing payment
       * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
       * @summary Create payment recipient
       * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get details about a payment recipient you have previously created.
       * @summary Get payment recipient
       * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
       * @summary List payment recipients
       * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
       * @summary Create payment profile
       * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentProfileCreate(paymentProfileCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentProfileCreate(paymentProfileCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
       * @summary Get payment profile
       * @param {PaymentProfileGetRequest} paymentProfileGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentProfileGet(paymentProfileGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentProfileGet(paymentProfileGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
       * @summary Remove payment profile
       * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentProfileRemove(paymentProfileRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentProfileRemove(paymentProfileRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
       * @summary Retrieve the account associated with a processor token
       * @param {ProcessorAccountGetRequest} processorAccountGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorAccountGet(processorAccountGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorAccountGet(processorAccountGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
       * @summary Create Apex bank account token
       * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
       * @summary Retrieve Auth data
       * @param {ProcessorAuthGetRequest} processorAuthGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorAuthGet(processorAuthGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorAuthGet(processorAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
       * @summary Retrieve Balance data
       * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorBalanceGet(processorBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
       * @summary Create a bank transfer as a processor
       * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorBankTransferCreate(processorBankTransferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
       * @summary Retrieve Identity data
       * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorIdentityGet(processorIdentityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
       * @summary Retrieve identity match score
       * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorIdentityMatch(processorIdentityMatchRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorIdentityMatch(processorIdentityMatchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
       * @summary Retrieve Liabilities data
       * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorLiabilitiesGet(processorLiabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorLiabilitiesGet(processorLiabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
       * @summary Report whether you initiated an ACH transaction
       * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalDecisionReport(processorSignalDecisionReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalDecisionReport(processorSignalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
       * @summary Evaluate a planned ACH transaction
       * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalEvaluate(processorSignalEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalEvaluate(processorSignalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
       * @summary Opt-in a processor token to Signal
       * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalPrepare(processorSignalPrepareRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalPrepare(processorSignalPrepareRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
       * @summary Report a return for an ACH transaction
       * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalReturnReport(processorSignalReturnReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalReturnReport(processorSignalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
       * @summary Create Stripe bank account token
       * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
       * @summary Create processor token
       * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenCreate(processorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
       * @summary Get a processor token\'s product permissions
       * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
       * @summary Control a processor\'s access to products
       * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
       * @summary Update a processor token\'s webhook URL
       * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Get transaction data
       * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsGet(processorTransactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsGet(processorTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Fetch recurring transaction streams
       * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh transaction data
       * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsRefresh(processorTransactionsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsRefresh(processorTransactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Get incremental transaction updates on a processor token
       * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsSync(processorTransactionsSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsSync(processorTransactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns user permissioned profile data including identity and item access tokens.
       * @summary Retrieve a Profile
       * @param {ProfileGetRequest} profileGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      profileGet(profileGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).profileGet(profileGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
       * @summary Check a user\'s Plaid Network status
       * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      profileNetworkStatusGet(profileNetworkStatusGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).profileNetworkStatusGet(profileNetworkStatusGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
       * @summary Manually fire a bank income webhook in sandbox
       * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
       * @summary Manually fire a Bank Transfer webhook
       * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
       * @summary Simulate a bank transfer event in Sandbox
       * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
       * @summary Manually fire an Income webhook
       * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid sandbox `DEFAULT_UPDATE` responses include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
       * @summary Fire a test webhook
       * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
       * @summary Force a Sandbox Item into an error state
       * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
       * @summary Set verification status for Sandbox account
       * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Save the selected accounts when connecting to the Platypus Oauth institution
       * @summary Save the selected accounts when connecting to the Platypus Oauth institution
       * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
       * @summary Reset the login of a Payment Profile
       * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
       * @summary Create a test Item and processor token
       * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
       * @summary Create a test Item
       * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
       * @summary Manually fire a Transfer webhook
       * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
       * @summary Simulate a ledger deposit event in Sandbox
       * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
       * @summary Simulate converting pending balance to available balance
       * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
       * @summary Simulate a ledger withdraw event in Sandbox
       * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
       * @summary Simulate a refund event in Sandbox
       * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
       * @summary Trigger the creation of a repayment
       * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
       * @summary Simulate a transfer event in Sandbox
       * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
       * @summary Simulate creating a sweep
       * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
       * @summary Advance a test clock
       * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
       * @summary Create a test clock
       * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
       * @summary Get a test clock
       * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
       * @summary List test clocks
       * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
       * @summary Force item(s) for a Sandbox User into an error state
       * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxUserResetLogin(sandboxUserResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxUserResetLogin(sandboxUserResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * After calling `/signal/evaluate` (or `/accounts/balance/get`, for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta), call `/signal/decision/report` to report whether the transaction was initiated.
       * @summary Report whether you initiated an ACH transaction
       * @param {SignalDecisionReportRequest} signalDecisionReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalDecisionReport(signalDecisionReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
       * @summary Evaluate a planned ACH transaction
       * @param {SignalEvaluateRequest} signalEvaluateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalEvaluate(signalEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalEvaluate(signalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
       * @summary Opt-in an Item to Signal
       * @param {SignalPrepareRequest} signalPrepareRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalPrepare(signalPrepareRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalPrepare(signalPrepareRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` or (for participants in the [Balance Plus](http://plaid.com/docs/balance/balance-plus) beta) the `/accounts/balance/get` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
       * @summary Report a return for an ACH transaction
       * @param {SignalReturnReportRequest} signalReturnReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalReturnReport(signalReturnReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalReturnReport(signalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
       * @summary Retrieve a single statement.
       * @param {StatementsDownloadRequest} statementsDownloadRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      statementsDownload(statementsDownloadRequest, options) {
        return exports.PlaidApiFp(this.configuration).statementsDownload(statementsDownloadRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
       * @summary Retrieve a list of all statements associated with an item.
       * @param {StatementsListRequest} statementsListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      statementsList(statementsListRequest, options) {
        return exports.PlaidApiFp(this.configuration).statementsList(statementsListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
       * @summary Refresh statements data.
       * @param {StatementsRefreshRequest} statementsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      statementsRefresh(statementsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).statementsRefresh(statementsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
       * @summary enhance locally-held transaction data
       * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsEnhance(transactionsEnhanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
       * @summary Enrich locally-held transaction data
       * @param {TransactionsEnrichRequest} transactionsEnrichRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsEnrich(transactionsEnrichRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsEnrich(transactionsEnrichRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
       * @summary Get transaction data
       * @param {TransactionsGetRequest} transactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsGet(transactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
       * @summary Fetch recurring transaction streams
       * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRecurringGet(transactionsRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh transaction data
       * @param {TransactionsRefreshRequest} transactionsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRefresh(transactionsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
       * @summary Create transaction category rule
       * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRulesCreate(transactionsRulesCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
       * @summary Return a list of rules created for the Item associated with the access token.
       * @param {TransactionsRulesListRequest} transactionsRulesListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRulesList(transactionsRulesListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
       * @summary Remove transaction rule
       * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
       * @summary Get incremental transaction updates on an Item
       * @param {TransactionsSyncRequest} transactionsSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsSync(transactionsSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsSync(transactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
       * @summary Obtain user insights based on transactions sent through /transactions/enrich
       * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
       * @summary Cancel a transfer authorization
       * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferAuthorizationCancel(transferAuthorizationCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferAuthorizationCancel(transferAuthorizationCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:  - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.  - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization. - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
       * @summary Create a transfer authorization
       * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
       * @summary (Deprecated) Retrieve a balance held with Plaid
       * @param {TransferBalanceGetRequest} transferBalanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferBalanceGet(transferBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferBalanceGet(transferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
       * @summary Cancel a transfer
       * @param {TransferCancelRequest} transferCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferCancel(transferCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCancel(transferCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
       * @summary Get RTP eligibility information of a transfer
       * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferCapabilitiesGet(transferCapabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCapabilitiesGet(transferCapabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
       * @summary Get transfer product configuration
       * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferConfigurationGet(transferConfigurationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferConfigurationGet(transferConfigurationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
       * @summary Create a transfer
       * @param {TransferCreateRequest} transferCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferCreate(transferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCreate(transferCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
       * @summary Upload transfer diligence document on behalf of the originator
       * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
       * @summary Submit transfer diligence on behalf of the originator
       * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferDiligenceSubmit(transferDiligenceSubmitRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferDiligenceSubmit(transferDiligenceSubmitRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
       * @summary List transfer events
       * @param {TransferEventListRequest} transferEventListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferEventList(transferEventListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferEventList(transferEventListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
       * @summary Sync transfer events
       * @param {TransferEventSyncRequest} transferEventSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferEventSync(transferEventSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferEventSync(transferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
       * @summary Retrieve a transfer
       * @param {TransferGetRequest} transferGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferGet(transferGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferGet(transferGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
       * @summary Create a transfer intent object to invoke the Transfer UI
       * @param {TransferIntentCreateRequest} transferIntentCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferIntentCreate(transferIntentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
       * @summary Retrieve more information about a transfer intent
       * @param {TransferIntentGetRequest} transferIntentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferIntentGet(transferIntentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferIntentGet(transferIntentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
       * @summary Deposit funds into a Plaid Ledger balance
       * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerDeposit(transferLedgerDepositRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerDeposit(transferLedgerDepositRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
       * @summary Move available balance between the ledgers of the platform and one of its originators
       * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerDistribute(transferLedgerDistributeRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerDistribute(transferLedgerDistributeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
       * @summary Retrieve Plaid Ledger balance
       * @param {TransferLedgerGetRequest} transferLedgerGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerGet(transferLedgerGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerGet(transferLedgerGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
       * @summary Withdraw funds from a Plaid Ledger balance
       * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerWithdraw(transferLedgerWithdrawRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerWithdraw(transferLedgerWithdrawRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
       * @summary List transfers
       * @param {TransferListRequest} transferListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferList(transferListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferList(transferListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
       * @summary Get transfer product usage metrics
       * @param {TransferMetricsGetRequest} transferMetricsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferMetricsGet(transferMetricsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferMetricsGet(transferMetricsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
       * @summary Migrate account into Transfers
       * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferMigrateAccount(transferMigrateAccountRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
       * @summary Create a new originator
       * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorCreate(transferOriginatorCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorCreate(transferOriginatorCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
       * @summary Update the funding account associated with the originator
       * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
       * @summary Get status of an originator\'s onboarding
       * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorGet(transferOriginatorGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorGet(transferOriginatorGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
       * @summary Get status of all originators\' onboarding
       * @param {TransferOriginatorListRequest} transferOriginatorListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorList(transferOriginatorListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorList(transferOriginatorListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
       * @summary Create an originator for scaled platform customers
       * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
       * @summary Generate a Plaid-hosted onboarding UI URL.
       * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
       * @summary Cancel a recurring transfer.
       * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringCancel(transferRecurringCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringCancel(transferRecurringCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
       * @summary Create a recurring transfer
       * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringCreate(transferRecurringCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringCreate(transferRecurringCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
       * @summary Retrieve a recurring transfer
       * @param {TransferRecurringGetRequest} transferRecurringGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringGet(transferRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringGet(transferRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
       * @summary List recurring transfers
       * @param {TransferRecurringListRequest} transferRecurringListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringList(transferRecurringListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringList(transferRecurringListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
       * @summary Cancel a refund
       * @param {TransferRefundCancelRequest} transferRefundCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRefundCancel(transferRefundCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRefundCancel(transferRefundCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer\'s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
       * @summary Create a refund
       * @param {TransferRefundCreateRequest} transferRefundCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRefundCreate(transferRefundCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRefundCreate(transferRefundCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
       * @summary Retrieve a refund
       * @param {TransferRefundGetRequest} transferRefundGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRefundGet(transferRefundGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRefundGet(transferRefundGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
       * @summary Lists historical repayments
       * @param {TransferRepaymentListRequest} transferRepaymentListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRepaymentList(transferRepaymentListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
       * @summary List the returns included in a repayment
       * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
       * @summary Retrieve a sweep
       * @param {TransferSweepGetRequest} transferSweepGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferSweepGet(transferSweepGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferSweepGet(transferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
       * @summary List sweeps
       * @param {TransferSweepListRequest} transferSweepListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferSweepList(transferSweepListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferSweepList(transferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns user permissioned account data including identity and Item access tokens.
       * @summary Retrieve User Account
       * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userAccountSessionGet(userAccountSessionGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).userAccountSessionGet(userAccountSessionGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
       * @summary Create user
       * @param {UserCreateRequest} userCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userCreate(userCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).userCreate(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns Items associated with a User along with their corresponding statuses.
       * @summary Get Items associated with a User
       * @param {UserItemsGetRequest} userItemsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userItemsGet(userItemsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).userItemsGet(userItemsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
       * @summary Remove user
       * @param {UserRemoveRequest} userRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userRemove(userRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).userRemove(userRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user.
       * @summary Update user information
       * @param {UserUpdateRequest} userUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userUpdate(userUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).userUpdate(userUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create an e-wallet. The response is the newly created e-wallet object.
       * @summary Create an e-wallet
       * @param {WalletCreateRequest} walletCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletCreate(walletCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletCreate(walletCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch an e-wallet. The response includes the current balance.
       * @summary Fetch an e-wallet
       * @param {WalletGetRequest} walletGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletGet(walletGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletGet(walletGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint lists all e-wallets in descending order of creation.
       * @summary Fetch a list of e-wallets
       * @param {WalletListRequest} walletListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletList(walletListRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletList(walletListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
       * @summary Execute a transaction using an e-wallet
       * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletTransactionExecute(walletTransactionExecuteRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch a specific e-wallet transaction
       * @summary Fetch an e-wallet transaction
       * @param {WalletTransactionGetRequest} walletTransactionGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletTransactionGet(walletTransactionGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionGet(walletTransactionGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
       * @summary List e-wallet transactions
       * @param {WalletTransactionListRequest} walletTransactionListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletTransactionList(walletTransactionListRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionList(walletTransactionListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
       * @summary Create a watchlist screening for an entity
       * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve an entity watchlist screening.
       * @summary Get an entity screening
       * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
       * @summary List history for entity watchlist screenings
       * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all hits for the entity watchlist screening.
       * @summary List hits for entity watchlist screenings
       * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all entity screenings.
       * @summary List entity watchlist screenings
       * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get an entity watchlist screening program
       * @summary Get entity watchlist screening program
       * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all entity watchlist screening programs
       * @summary List entity watchlist screening programs
       * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
       * @summary Create a review for an entity watchlist screening
       * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
       * @summary List reviews for entity watchlist screenings
       * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update an entity watchlist screening.
       * @summary Update an entity screening
       * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
       * @summary Create a watchlist screening for a person
       * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve a previously created individual watchlist screening
       * @summary Retrieve an individual watchlist screening
       * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
       * @summary List history for individual watchlist screenings
       * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all hits found by Plaid for a particular individual watchlist screening.
       * @summary List hits for individual watchlist screening
       * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List previously created watchlist screenings for individuals
       * @summary List Individual Watchlist Screenings
       * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get an individual watchlist screening program
       * @summary Get individual watchlist screening program
       * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all individual watchlist screening programs
       * @summary List individual watchlist screening programs
       * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
       * @summary Create a review for an individual watchlist screening
       * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all reviews for the individual watchlist screening.
       * @summary List reviews for individual watchlist screenings
       * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
       * @summary Update individual watchlist screening
       * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
       * @summary Get webhook verification key
       * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.PlaidApi = PlaidApi2;
  }
});

// ../../node_modules/plaid/dist/configuration.js
var require_configuration = __commonJS({
  "../../node_modules/plaid/dist/configuration.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Configuration = exports.PlaidEnvironments = void 0;
    exports.PlaidEnvironments = {
      production: "https://production.plaid.com",
      sandbox: "https://sandbox.plaid.com"
    };
    var Configuration2 = class {
      constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions)
          this.baseOptions = {};
        if (!this.baseOptions.headers)
          this.baseOptions.headers = {};
        this.baseOptions.headers = Object.assign({ ["User-Agent"]: `Plaid Node v27.0.0`, ["Plaid-Version"]: "2020-09-14" }, this.baseOptions.headers);
      }
      /**
       * Check if the given MIME is a JSON MIME.
       * JSON MIME examples:
       *   application/json
       *   application/json; charset=UTF8
       *   APPLICATION/JSON
       *   application/vnd.company+json
       * @param mime - MIME (Multipurpose Internet Mail Extensions)
       * @return True if the given MIME is JSON, false otherwise.
       */
      isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
      }
    };
    exports.Configuration = Configuration2;
  }
});

// ../../node_modules/plaid/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/plaid/dist/index.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m2[k];
      } });
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_api(), exports);
    __exportStar(require_configuration(), exports);
  }
});

// ../../node_modules/loglevel/lib/loglevel.js
var require_loglevel = __commonJS({
  "../../node_modules/loglevel/lib/loglevel.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    (function(root, definition) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define(definition);
      } else if (typeof module === "object" && module.exports) {
        module.exports = definition();
      } else {
        root.log = definition();
      }
    })(exports, function() {
      "use strict";
      var noop2 = function() {
      };
      var undefinedType2 = "undefined";
      var isIE = typeof window !== undefinedType2 && typeof window.navigator !== undefinedType2 && /Trident\/|MSIE /.test(window.navigator.userAgent);
      var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ];
      var _loggersByName = {};
      var defaultLogger = null;
      function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === "function") {
          return method.bind(obj);
        } else {
          try {
            return Function.prototype.bind.call(method, obj);
          } catch (e2) {
            return function() {
              return Function.prototype.apply.apply(method, [obj, arguments]);
            };
          }
        }
      }
      function traceForIE() {
        if (console.log) {
          if (console.log.apply) {
            console.log.apply(console, arguments);
          } else {
            Function.prototype.apply.apply(console.log, [console, arguments]);
          }
        }
        if (console.trace)
          console.trace();
      }
      function realMethod(methodName) {
        if (methodName === "debug") {
          methodName = "log";
        }
        if (typeof console === undefinedType2) {
          return false;
        } else if (methodName === "trace" && isIE) {
          return traceForIE;
        } else if (console[methodName] !== void 0) {
          return bindMethod(console, methodName);
        } else if (console.log !== void 0) {
          return bindMethod(console, "log");
        } else {
          return noop2;
        }
      }
      function replaceLoggingMethods() {
        var level = this.getLevel();
        for (var i2 = 0; i2 < logMethods.length; i2++) {
          var methodName = logMethods[i2];
          this[methodName] = i2 < level ? noop2 : this.methodFactory(methodName, level, this.name);
        }
        this.log = this.debug;
        if (typeof console === undefinedType2 && level < this.levels.SILENT) {
          return "No console available for logging";
        }
      }
      function enableLoggingWhenConsoleArrives(methodName) {
        return function() {
          if (typeof console !== undefinedType2) {
            replaceLoggingMethods.call(this);
            this[methodName].apply(this, arguments);
          }
        };
      }
      function defaultMethodFactory(methodName, _level, _loggerName) {
        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
      }
      function Logger(name, factory) {
        var self2 = this;
        var inheritedLevel;
        var defaultLevel;
        var userLevel;
        var storageKey = "loglevel";
        if (typeof name === "string") {
          storageKey += ":" + name;
        } else if (typeof name === "symbol") {
          storageKey = void 0;
        }
        function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || "silent").toUpperCase();
          if (typeof window === undefinedType2 || !storageKey)
            return;
          try {
            window.localStorage[storageKey] = levelName;
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {
          }
        }
        function getPersistedLevel() {
          var storedLevel;
          if (typeof window === undefinedType2 || !storageKey)
            return;
          try {
            storedLevel = window.localStorage[storageKey];
          } catch (ignore) {
          }
          if (typeof storedLevel === undefinedType2) {
            try {
              var cookie = window.document.cookie;
              var cookieName = encodeURIComponent(storageKey);
              var location = cookie.indexOf(cookieName + "=");
              if (location !== -1) {
                storedLevel = /^([^;]+)/.exec(
                  cookie.slice(location + cookieName.length + 1)
                )[1];
              }
            } catch (ignore) {
            }
          }
          if (self2.levels[storedLevel] === void 0) {
            storedLevel = void 0;
          }
          return storedLevel;
        }
        function clearPersistedLevel() {
          if (typeof window === undefinedType2 || !storageKey)
            return;
          try {
            window.localStorage.removeItem(storageKey);
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {
          }
        }
        function normalizeLevel(input) {
          var level = input;
          if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
            level = self2.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
            return level;
          } else {
            throw new TypeError("log.setLevel() called with invalid level: " + input);
          }
        }
        self2.name = name;
        self2.levels = {
          "TRACE": 0,
          "DEBUG": 1,
          "INFO": 2,
          "WARN": 3,
          "ERROR": 4,
          "SILENT": 5
        };
        self2.methodFactory = factory || defaultMethodFactory;
        self2.getLevel = function() {
          if (userLevel != null) {
            return userLevel;
          } else if (defaultLevel != null) {
            return defaultLevel;
          } else {
            return inheritedLevel;
          }
        };
        self2.setLevel = function(level, persist) {
          userLevel = normalizeLevel(level);
          if (persist !== false) {
            persistLevelIfPossible(userLevel);
          }
          return replaceLoggingMethods.call(self2);
        };
        self2.setDefaultLevel = function(level) {
          defaultLevel = normalizeLevel(level);
          if (!getPersistedLevel()) {
            self2.setLevel(level, false);
          }
        };
        self2.resetLevel = function() {
          userLevel = null;
          clearPersistedLevel();
          replaceLoggingMethods.call(self2);
        };
        self2.enableAll = function(persist) {
          self2.setLevel(self2.levels.TRACE, persist);
        };
        self2.disableAll = function(persist) {
          self2.setLevel(self2.levels.SILENT, persist);
        };
        self2.rebuild = function() {
          if (defaultLogger !== self2) {
            inheritedLevel = normalizeLevel(defaultLogger.getLevel());
          }
          replaceLoggingMethods.call(self2);
          if (defaultLogger === self2) {
            for (var childName in _loggersByName) {
              _loggersByName[childName].rebuild();
            }
          }
        };
        inheritedLevel = normalizeLevel(
          defaultLogger ? defaultLogger.getLevel() : "WARN"
        );
        var initialLevel = getPersistedLevel();
        if (initialLevel != null) {
          userLevel = normalizeLevel(initialLevel);
        }
        replaceLoggingMethods.call(self2);
      }
      defaultLogger = new Logger();
      defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "symbol" && typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }
        var logger3 = _loggersByName[name];
        if (!logger3) {
          logger3 = _loggersByName[name] = new Logger(
            name,
            defaultLogger.methodFactory
          );
        }
        return logger3;
      };
      var _log = typeof window !== undefinedType2 ? window.log : void 0;
      defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType2 && window.log === defaultLogger) {
          window.log = _log;
        }
        return defaultLogger;
      };
      defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
      };
      defaultLogger["default"] = defaultLogger;
      return defaultLogger;
    });
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/TypesenseError.js
var require_TypesenseError = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/TypesenseError.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError = (
      /** @class */
      function(_super) {
        __extends(TypesenseError2, _super);
        function TypesenseError2(message) {
          var _newTarget = this.constructor;
          var _this = _super.call(this, message) || this;
          _this.name = _newTarget.name;
          Object.setPrototypeOf(_this, _newTarget.prototype);
          return _this;
        }
        return TypesenseError2;
      }(Error)
    );
    exports.default = TypesenseError;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/HTTPError.js
var require_HTTPError = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/HTTPError.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var HTTPError = (
      /** @class */
      function(_super) {
        __extends(HTTPError2, _super);
        function HTTPError2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return HTTPError2;
      }(TypesenseError_1.default)
    );
    exports.default = HTTPError;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/MissingConfigurationError.js
var require_MissingConfigurationError = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/MissingConfigurationError.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var MissingConfigurationError = (
      /** @class */
      function(_super) {
        __extends(MissingConfigurationError2, _super);
        function MissingConfigurationError2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return MissingConfigurationError2;
      }(TypesenseError_1.default)
    );
    exports.default = MissingConfigurationError;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/ObjectAlreadyExists.js
var require_ObjectAlreadyExists = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/ObjectAlreadyExists.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var ObjectAlreadyExists = (
      /** @class */
      function(_super) {
        __extends(ObjectAlreadyExists2, _super);
        function ObjectAlreadyExists2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return ObjectAlreadyExists2;
      }(TypesenseError_1.default)
    );
    exports.default = ObjectAlreadyExists;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/ObjectNotFound.js
var require_ObjectNotFound = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/ObjectNotFound.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var ObjectNotFound = (
      /** @class */
      function(_super) {
        __extends(ObjectNotFound2, _super);
        function ObjectNotFound2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return ObjectNotFound2;
      }(TypesenseError_1.default)
    );
    exports.default = ObjectNotFound;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/ObjectUnprocessable.js
var require_ObjectUnprocessable = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/ObjectUnprocessable.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var ObjectUnprocessable = (
      /** @class */
      function(_super) {
        __extends(ObjectUnprocessable2, _super);
        function ObjectUnprocessable2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return ObjectUnprocessable2;
      }(TypesenseError_1.default)
    );
    exports.default = ObjectUnprocessable;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/RequestMalformed.js
var require_RequestMalformed = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/RequestMalformed.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var RequestMalformed = (
      /** @class */
      function(_super) {
        __extends(RequestMalformed2, _super);
        function RequestMalformed2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return RequestMalformed2;
      }(TypesenseError_1.default)
    );
    exports.default = RequestMalformed;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/RequestUnauthorized.js
var require_RequestUnauthorized = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/RequestUnauthorized.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var RequestUnauthorized = (
      /** @class */
      function(_super) {
        __extends(RequestUnauthorized2, _super);
        function RequestUnauthorized2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return RequestUnauthorized2;
      }(TypesenseError_1.default)
    );
    exports.default = RequestUnauthorized;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/ServerError.js
var require_ServerError = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/ServerError.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var ServerError = (
      /** @class */
      function(_super) {
        __extends(ServerError2, _super);
        function ServerError2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return ServerError2;
      }(TypesenseError_1.default)
    );
    exports.default = ServerError;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/ImportError.js
var require_ImportError = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/ImportError.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var ImportError = (
      /** @class */
      function(_super) {
        __extends(ImportError2, _super);
        function ImportError2(message, importResults) {
          var _this = _super.call(this, message) || this;
          _this.importResults = importResults;
          return _this;
        }
        return ImportError2;
      }(TypesenseError_1.default)
    );
    exports.default = ImportError;
  }
});

// ../../node_modules/typesense/lib/Typesense/Errors/index.js
var require_Errors = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Errors/index.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImportError = exports.TypesenseError = exports.ServerError = exports.RequestUnauthorized = exports.RequestMalformed = exports.ObjectUnprocessable = exports.ObjectNotFound = exports.ObjectAlreadyExists = exports.MissingConfigurationError = exports.HTTPError = void 0;
    var HTTPError_1 = __importDefault(require_HTTPError());
    exports.HTTPError = HTTPError_1.default;
    var MissingConfigurationError_1 = __importDefault(require_MissingConfigurationError());
    exports.MissingConfigurationError = MissingConfigurationError_1.default;
    var ObjectAlreadyExists_1 = __importDefault(require_ObjectAlreadyExists());
    exports.ObjectAlreadyExists = ObjectAlreadyExists_1.default;
    var ObjectNotFound_1 = __importDefault(require_ObjectNotFound());
    exports.ObjectNotFound = ObjectNotFound_1.default;
    var ObjectUnprocessable_1 = __importDefault(require_ObjectUnprocessable());
    exports.ObjectUnprocessable = ObjectUnprocessable_1.default;
    var RequestMalformed_1 = __importDefault(require_RequestMalformed());
    exports.RequestMalformed = RequestMalformed_1.default;
    var RequestUnauthorized_1 = __importDefault(require_RequestUnauthorized());
    exports.RequestUnauthorized = RequestUnauthorized_1.default;
    var ServerError_1 = __importDefault(require_ServerError());
    exports.ServerError = ServerError_1.default;
    var ImportError_1 = __importDefault(require_ImportError());
    exports.ImportError = ImportError_1.default;
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    exports.TypesenseError = TypesenseError_1.default;
  }
});

// ../../node_modules/typesense/lib/Typesense/Configuration.js
var require_Configuration = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Configuration.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t[p2] = s2[p2];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var logger3 = __importStar(require_loglevel());
    var Errors_1 = require_Errors();
    var Configuration2 = (
      /** @class */
      function() {
        function Configuration3(options) {
          var _this = this;
          this.nodes = options.nodes || [];
          this.nodes = this.nodes.map(function(node) {
            return _this.setDefaultPathInNode(node);
          }).map(function(node) {
            return _this.setDefaultPortInNode(node);
          }).map(function(node) {
            return __assign({}, node);
          });
          if (options.randomizeNodes == null) {
            options.randomizeNodes = true;
          }
          if (options.randomizeNodes === true) {
            this.shuffleArray(this.nodes);
          }
          this.nearestNode = options.nearestNode;
          this.nearestNode = this.setDefaultPathInNode(this.nearestNode);
          this.nearestNode = this.setDefaultPortInNode(this.nearestNode);
          this.connectionTimeoutSeconds = options.connectionTimeoutSeconds || options.timeoutSeconds || 5;
          this.healthcheckIntervalSeconds = options.healthcheckIntervalSeconds || 60;
          this.numRetries = options.numRetries || this.nodes.length + (this.nearestNode == null ? 0 : 1) || 3;
          this.retryIntervalSeconds = options.retryIntervalSeconds || 0.1;
          this.apiKey = options.apiKey;
          this.sendApiKeyAsQueryParam = options.sendApiKeyAsQueryParam;
          this.cacheSearchResultsForSeconds = options.cacheSearchResultsForSeconds || 0;
          this.useServerSideSearchCache = options.useServerSideSearchCache || false;
          this.logger = options.logger || logger3;
          this.logLevel = options.logLevel || "warn";
          this.logger.setLevel(this.logLevel);
          this.additionalHeaders = options.additionalHeaders;
          this.httpAgent = options.httpAgent;
          this.httpsAgent = options.httpsAgent;
          this.showDeprecationWarnings(options);
          this.validate();
        }
        Configuration3.prototype.validate = function() {
          if (this.nodes == null || this.nodes.length === 0 || this.validateNodes()) {
            throw new Errors_1.MissingConfigurationError("Ensure that nodes[].protocol, nodes[].host and nodes[].port are set");
          }
          if (this.nearestNode != null && this.isNodeMissingAnyParameters(this.nearestNode)) {
            throw new Errors_1.MissingConfigurationError("Ensure that nearestNodes.protocol, nearestNodes.host and nearestNodes.port are set");
          }
          if (this.apiKey == null) {
            throw new Errors_1.MissingConfigurationError("Ensure that apiKey is set");
          }
          return true;
        };
        Configuration3.prototype.validateNodes = function() {
          var _this = this;
          return this.nodes.some(function(node) {
            return _this.isNodeMissingAnyParameters(node);
          });
        };
        Configuration3.prototype.isNodeMissingAnyParameters = function(node) {
          return !["protocol", "host", "port", "path"].every(function(key) {
            return node.hasOwnProperty(key);
          }) && node["url"] == null;
        };
        Configuration3.prototype.setDefaultPathInNode = function(node) {
          if (node != null && !node.hasOwnProperty("path")) {
            node["path"] = "";
          }
          return node;
        };
        Configuration3.prototype.setDefaultPortInNode = function(node) {
          if (node != null && !node.hasOwnProperty("port") && node.hasOwnProperty("protocol")) {
            switch (node["protocol"]) {
              case "https":
                node["port"] = 443;
                break;
              case "http":
                node["port"] = 80;
                break;
            }
          }
          return node;
        };
        Configuration3.prototype.showDeprecationWarnings = function(options) {
          if (options.timeoutSeconds) {
            this.logger.warn("Deprecation warning: timeoutSeconds is now renamed to connectionTimeoutSeconds");
          }
          if (options.masterNode) {
            this.logger.warn("Deprecation warning: masterNode is now consolidated to nodes, starting with Typesense Server v0.12");
          }
          if (options.readReplicaNodes) {
            this.logger.warn("Deprecation warning: readReplicaNodes is now consolidated to nodes, starting with Typesense Server v0.12");
          }
        };
        Configuration3.prototype.shuffleArray = function(array) {
          var _a2;
          for (var i2 = array.length - 1; i2 > 0; i2--) {
            var j = Math.floor(Math.random() * (i2 + 1));
            _a2 = [array[j], array[i2]], array[i2] = _a2[0], array[j] = _a2[1];
          }
        };
        return Configuration3;
      }()
    );
    exports.default = Configuration2;
  }
});

// ../../node_modules/typesense/lib/Typesense/ApiCall.js
var require_ApiCall = __commonJS({
  "../../node_modules/typesense/lib/Typesense/ApiCall.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var axios_1 = __importDefault(require_axios());
    var Errors_1 = require_Errors();
    var TypesenseError_1 = __importDefault(require_TypesenseError());
    var APIKEYHEADERNAME = "X-TYPESENSE-API-KEY";
    var HEALTHY = true;
    var UNHEALTHY = false;
    var ApiCall = (
      /** @class */
      function() {
        function ApiCall2(configuration) {
          this.configuration = configuration;
          this.apiKey = this.configuration.apiKey;
          this.nodes = this.configuration.nodes == null ? this.configuration.nodes : JSON.parse(JSON.stringify(this.configuration.nodes));
          this.nearestNode = this.configuration.nearestNode == null ? this.configuration.nearestNode : JSON.parse(JSON.stringify(this.configuration.nearestNode));
          this.connectionTimeoutSeconds = this.configuration.connectionTimeoutSeconds;
          this.healthcheckIntervalSeconds = this.configuration.healthcheckIntervalSeconds;
          this.numRetriesPerRequest = this.configuration.numRetries;
          this.retryIntervalSeconds = this.configuration.retryIntervalSeconds;
          this.sendApiKeyAsQueryParam = this.configuration.sendApiKeyAsQueryParam;
          this.additionalUserHeaders = this.configuration.additionalHeaders;
          this.logger = this.configuration.logger;
          this.initializeMetadataForNodes();
          this.currentNodeIndex = -1;
        }
        ApiCall2.prototype.get = function(endpoint, queryParameters, _a2) {
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          var _b = _a2 === void 0 ? {} : _a2, _c = _b.abortSignal, abortSignal = _c === void 0 ? null : _c, _d = _b.responseType, responseType = _d === void 0 ? void 0 : _d;
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_e) {
              return [2, this.performRequest("get", endpoint, {
                queryParameters,
                abortSignal,
                responseType
              })];
            });
          });
        };
        ApiCall2.prototype.delete = function(endpoint, queryParameters) {
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.performRequest("delete", endpoint, { queryParameters })];
            });
          });
        };
        ApiCall2.prototype.post = function(endpoint, bodyParameters, queryParameters, additionalHeaders) {
          if (bodyParameters === void 0) {
            bodyParameters = {};
          }
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          if (additionalHeaders === void 0) {
            additionalHeaders = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.performRequest("post", endpoint, {
                queryParameters,
                bodyParameters,
                additionalHeaders
              })];
            });
          });
        };
        ApiCall2.prototype.put = function(endpoint, bodyParameters, queryParameters) {
          if (bodyParameters === void 0) {
            bodyParameters = {};
          }
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.performRequest("put", endpoint, {
                queryParameters,
                bodyParameters
              })];
            });
          });
        };
        ApiCall2.prototype.patch = function(endpoint, bodyParameters, queryParameters) {
          if (bodyParameters === void 0) {
            bodyParameters = {};
          }
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.performRequest("patch", endpoint, {
                queryParameters,
                bodyParameters
              })];
            });
          });
        };
        ApiCall2.prototype.performRequest = function(requestType, endpoint, _a2) {
          var _b, _c, _d;
          var _e = _a2.queryParameters, queryParameters = _e === void 0 ? null : _e, _f = _a2.bodyParameters, bodyParameters = _f === void 0 ? null : _f, _g = _a2.additionalHeaders, additionalHeaders = _g === void 0 ? {} : _g, _h = _a2.abortSignal, abortSignal = _h === void 0 ? null : _h, _j = _a2.responseType, responseType = _j === void 0 ? void 0 : _j, _k = _a2.skipConnectionTimeout, skipConnectionTimeout = _k === void 0 ? false : _k;
          return __awaiter(this, void 0, void 0, function() {
            var requestNumber, lastException, _loop_1, this_1, numTries, state_1;
            return __generator(this, function(_l) {
              switch (_l.label) {
                case 0:
                  this.configuration.validate();
                  requestNumber = Date.now();
                  this.logger.debug("Request #".concat(requestNumber, ": Performing ").concat(requestType.toUpperCase(), " request: ").concat(endpoint));
                  _loop_1 = function(numTries2) {
                    var node, abortListener, requestOptions, cancelToken, source_1, response, error_1;
                    return __generator(this, function(_m) {
                      switch (_m.label) {
                        case 0:
                          node = this_1.getNextNode(requestNumber);
                          this_1.logger.debug("Request #".concat(requestNumber, ": Attempting ").concat(requestType.toUpperCase(), " request Try #").concat(numTries2, " to Node ").concat(node.index));
                          if (abortSignal && abortSignal.aborted) {
                            return [2, { value: Promise.reject(new Error("Request aborted by caller.")) }];
                          }
                          abortListener = void 0;
                          _m.label = 1;
                        case 1:
                          _m.trys.push([1, 3, 5, 6]);
                          requestOptions = {
                            method: requestType,
                            url: this_1.uriFor(endpoint, node),
                            headers: Object.assign({}, this_1.defaultHeaders(), additionalHeaders, this_1.additionalUserHeaders),
                            maxContentLength: Infinity,
                            maxBodyLength: Infinity,
                            responseType,
                            validateStatus: function(status) {
                              return status > 0;
                            },
                            transformResponse: [
                              function(data, headers) {
                                var transformedData = data;
                                if (headers !== void 0 && typeof data === "string" && headers["content-type"] && headers["content-type"].startsWith("application/json")) {
                                  transformedData = JSON.parse(data);
                                }
                                return transformedData;
                              }
                            ]
                          };
                          if (skipConnectionTimeout !== true) {
                            requestOptions.timeout = this_1.connectionTimeoutSeconds * 1e3;
                          }
                          if (queryParameters && Object.keys(queryParameters).length !== 0) {
                            requestOptions.params = queryParameters;
                          }
                          if (this_1.sendApiKeyAsQueryParam) {
                            requestOptions.params = requestOptions.params || {};
                            requestOptions.params["x-typesense-api-key"] = this_1.apiKey;
                          }
                          if (this_1.configuration.httpAgent) {
                            this_1.logger.debug("Request #".concat(requestNumber, ": Using custom httpAgent"));
                            requestOptions.httpAgent = this_1.configuration.httpAgent;
                          }
                          if (this_1.configuration.httpsAgent) {
                            this_1.logger.debug("Request #".concat(requestNumber, ": Using custom httpsAgent"));
                            requestOptions.httpsAgent = this_1.configuration.httpsAgent;
                          }
                          if (bodyParameters && (typeof bodyParameters === "string" && bodyParameters.length !== 0 || typeof bodyParameters === "object" && Object.keys(bodyParameters).length !== 0)) {
                            requestOptions.data = bodyParameters;
                          }
                          if (abortSignal) {
                            cancelToken = axios_1.default.CancelToken;
                            source_1 = cancelToken.source();
                            abortListener = function() {
                              return source_1.cancel();
                            };
                            abortSignal.addEventListener("abort", abortListener);
                            requestOptions.cancelToken = source_1.token;
                          }
                          return [4, (0, axios_1.default)(requestOptions)];
                        case 2:
                          response = _m.sent();
                          if (response.status >= 1 && response.status <= 499) {
                            this_1.setNodeHealthcheck(node, HEALTHY);
                          }
                          this_1.logger.debug("Request #".concat(requestNumber, ": Request to Node ").concat(node.index, " was made. Response Code was ").concat(response.status, "."));
                          if (response.status >= 200 && response.status < 300) {
                            return [2, { value: Promise.resolve(response.data) }];
                          } else if (response.status < 500) {
                            return [2, { value: Promise.reject(this_1.customErrorForResponse(response, (_b = response.data) === null || _b === void 0 ? void 0 : _b.message)) }];
                          } else {
                            throw this_1.customErrorForResponse(response, (_c = response.data) === null || _c === void 0 ? void 0 : _c.message);
                          }
                          return [3, 6];
                        case 3:
                          error_1 = _m.sent();
                          this_1.setNodeHealthcheck(node, UNHEALTHY);
                          lastException = error_1;
                          this_1.logger.warn("Request #".concat(requestNumber, ": Request to Node ").concat(node.index, ' failed due to "').concat(error_1.code, " ").concat(error_1.message).concat(error_1.response == null ? "" : " - " + JSON.stringify((_d = error_1.response) === null || _d === void 0 ? void 0 : _d.data), '"'));
                          this_1.logger.warn("Request #".concat(requestNumber, ": Sleeping for ").concat(this_1.retryIntervalSeconds, "s and then retrying request..."));
                          return [4, this_1.timer(this_1.retryIntervalSeconds)];
                        case 4:
                          _m.sent();
                          return [3, 6];
                        case 5:
                          if (abortSignal && abortListener) {
                            abortSignal.removeEventListener("abort", abortListener);
                          }
                          return [
                            7
                            /*endfinally*/
                          ];
                        case 6:
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  };
                  this_1 = this;
                  numTries = 1;
                  _l.label = 1;
                case 1:
                  if (!(numTries <= this.numRetriesPerRequest + 1))
                    return [3, 4];
                  return [5, _loop_1(numTries)];
                case 2:
                  state_1 = _l.sent();
                  if (typeof state_1 === "object")
                    return [2, state_1.value];
                  _l.label = 3;
                case 3:
                  numTries++;
                  return [3, 1];
                case 4:
                  this.logger.debug("Request #".concat(requestNumber, ": No retries left. Raising last error"));
                  return [2, Promise.reject(lastException)];
              }
            });
          });
        };
        ApiCall2.prototype.getNextNode = function(requestNumber) {
          if (requestNumber === void 0) {
            requestNumber = 0;
          }
          if (this.nearestNode != null) {
            this.logger.debug("Request #".concat(requestNumber, ": Nodes Health: Node ").concat(this.nearestNode.index, " is ").concat(this.nearestNode.isHealthy === true ? "Healthy" : "Unhealthy"));
            if (this.nearestNode.isHealthy === true || this.nodeDueForHealthcheck(this.nearestNode, requestNumber)) {
              this.logger.debug("Request #".concat(requestNumber, ": Updated current node to Node ").concat(this.nearestNode.index));
              return this.nearestNode;
            }
            this.logger.debug("Request #".concat(requestNumber, ": Falling back to individual nodes"));
          }
          this.logger.debug("Request #".concat(requestNumber, ": Nodes Health: ").concat(this.nodes.map(function(node) {
            return "Node ".concat(node.index, " is ").concat(node.isHealthy === true ? "Healthy" : "Unhealthy");
          }).join(" || ")));
          var candidateNode = this.nodes[0];
          for (var i2 = 0; i2 <= this.nodes.length; i2++) {
            this.currentNodeIndex = (this.currentNodeIndex + 1) % this.nodes.length;
            candidateNode = this.nodes[this.currentNodeIndex];
            if (candidateNode.isHealthy === true || this.nodeDueForHealthcheck(candidateNode, requestNumber)) {
              this.logger.debug("Request #".concat(requestNumber, ": Updated current node to Node ").concat(candidateNode.index));
              return candidateNode;
            }
          }
          this.logger.debug("Request #".concat(requestNumber, ": No healthy nodes were found. Returning the next node, Node ").concat(candidateNode.index));
          return candidateNode;
        };
        ApiCall2.prototype.nodeDueForHealthcheck = function(node, requestNumber) {
          if (requestNumber === void 0) {
            requestNumber = 0;
          }
          var isDueForHealthcheck = Date.now() - node.lastAccessTimestamp > this.healthcheckIntervalSeconds * 1e3;
          if (isDueForHealthcheck) {
            this.logger.debug("Request #".concat(requestNumber, ": Node ").concat(node.index, " has exceeded healtcheckIntervalSeconds of ").concat(this.healthcheckIntervalSeconds, ". Adding it back into rotation."));
          }
          return isDueForHealthcheck;
        };
        ApiCall2.prototype.initializeMetadataForNodes = function() {
          var _this = this;
          if (this.nearestNode != null) {
            this.nearestNode.index = "nearestNode";
            this.setNodeHealthcheck(this.nearestNode, HEALTHY);
          }
          this.nodes.forEach(function(node, i2) {
            node.index = i2;
            _this.setNodeHealthcheck(node, HEALTHY);
          });
        };
        ApiCall2.prototype.setNodeHealthcheck = function(node, isHealthy) {
          node.isHealthy = isHealthy;
          node.lastAccessTimestamp = Date.now();
        };
        ApiCall2.prototype.uriFor = function(endpoint, node) {
          if (node.url != null) {
            return "".concat(node.url).concat(endpoint);
          }
          return "".concat(node.protocol, "://").concat(node.host, ":").concat(node.port).concat(node.path).concat(endpoint);
        };
        ApiCall2.prototype.defaultHeaders = function() {
          var defaultHeaders = {};
          if (!this.sendApiKeyAsQueryParam) {
            defaultHeaders[APIKEYHEADERNAME] = this.apiKey;
          }
          defaultHeaders["Content-Type"] = "application/json";
          return defaultHeaders;
        };
        ApiCall2.prototype.timer = function(seconds) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, new Promise(function(resolve) {
                return setTimeout(resolve, seconds * 1e3);
              })];
            });
          });
        };
        ApiCall2.prototype.customErrorForResponse = function(response, messageFromServer) {
          var errorMessage = "Request failed with HTTP code ".concat(response.status);
          if (typeof messageFromServer === "string" && messageFromServer.trim() !== "") {
            errorMessage += " | Server said: ".concat(messageFromServer);
          }
          var error = new TypesenseError_1.default(errorMessage);
          if (response.status === 400) {
            error = new Errors_1.RequestMalformed(errorMessage);
          } else if (response.status === 401) {
            error = new Errors_1.RequestUnauthorized(errorMessage);
          } else if (response.status === 404) {
            error = new Errors_1.ObjectNotFound(errorMessage);
          } else if (response.status === 409) {
            error = new Errors_1.ObjectAlreadyExists(errorMessage);
          } else if (response.status === 422) {
            error = new Errors_1.ObjectUnprocessable(errorMessage);
          } else if (response.status >= 500 && response.status <= 599) {
            error = new Errors_1.ServerError(errorMessage);
          } else {
            error = new Errors_1.HTTPError(errorMessage);
          }
          error.httpStatus = response.status;
          return error;
        };
        return ApiCall2;
      }()
    );
    exports.default = ApiCall;
  }
});

// ../../node_modules/typesense/lib/Typesense/Collections.js
var require_Collections = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Collections.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/collections";
    var Collections = (
      /** @class */
      function() {
        function Collections2(apiCall) {
          this.apiCall = apiCall;
        }
        Collections2.prototype.create = function(schema, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.post(RESOURCEPATH, schema, options)];
            });
          });
        };
        Collections2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        Object.defineProperty(Collections2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Collections2;
      }()
    );
    exports.default = Collections;
  }
});

// ../../node_modules/typesense/lib/Typesense/RequestWithCache.js
var require_RequestWithCache = __commonJS({
  "../../node_modules/typesense/lib/Typesense/RequestWithCache.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i2 = 0, l3 = from.length, ar; i2 < l3; i2++) {
          if (ar || !(i2 in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i2);
            ar[i2] = from[i2];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var defaultCacheResponseForSeconds = 2 * 60;
    var defaultMaxSize = 100;
    var RequestWithCache = (
      /** @class */
      function() {
        function RequestWithCache2() {
          this.responseCache = /* @__PURE__ */ new Map();
          this.responsePromiseCache = /* @__PURE__ */ new Map();
        }
        RequestWithCache2.prototype.clearCache = function() {
          this.responseCache = /* @__PURE__ */ new Map();
          this.responsePromiseCache = /* @__PURE__ */ new Map();
        };
        RequestWithCache2.prototype.perform = function(requestContext, requestFunction, requestFunctionArguments, cacheOptions) {
          return __awaiter(this, void 0, void 0, function() {
            var _a2, cacheResponseForSeconds, _b, maxSize, isCacheDisabled, requestFunctionArgumentsJSON, cacheEntry, now, isEntryValid, cachePromiseEntry, isEntryValid, responsePromise, response, isCacheOverMaxSize, oldestEntry, isResponsePromiseCacheOverMaxSize, oldestEntry;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _a2 = cacheOptions.cacheResponseForSeconds, cacheResponseForSeconds = _a2 === void 0 ? defaultCacheResponseForSeconds : _a2, _b = cacheOptions.maxSize, maxSize = _b === void 0 ? defaultMaxSize : _b;
                  isCacheDisabled = cacheResponseForSeconds <= 0 || maxSize <= 0;
                  if (isCacheDisabled) {
                    return [2, requestFunction.call.apply(requestFunction, __spreadArray([requestContext], requestFunctionArguments, false))];
                  }
                  requestFunctionArgumentsJSON = JSON.stringify(requestFunctionArguments);
                  cacheEntry = this.responseCache.get(requestFunctionArgumentsJSON);
                  now = Date.now();
                  if (cacheEntry) {
                    isEntryValid = now - cacheEntry.requestTimestamp < cacheResponseForSeconds * 1e3;
                    if (isEntryValid) {
                      this.responseCache.delete(requestFunctionArgumentsJSON);
                      this.responseCache.set(requestFunctionArgumentsJSON, cacheEntry);
                      return [2, Promise.resolve(cacheEntry.response)];
                    } else {
                      this.responseCache.delete(requestFunctionArgumentsJSON);
                    }
                  }
                  cachePromiseEntry = this.responsePromiseCache.get(requestFunctionArgumentsJSON);
                  if (cachePromiseEntry) {
                    isEntryValid = now - cachePromiseEntry.requestTimestamp < cacheResponseForSeconds * 1e3;
                    if (isEntryValid) {
                      this.responsePromiseCache.delete(requestFunctionArgumentsJSON);
                      this.responsePromiseCache.set(requestFunctionArgumentsJSON, cachePromiseEntry);
                      return [2, cachePromiseEntry.responsePromise];
                    } else {
                      this.responsePromiseCache.delete(requestFunctionArgumentsJSON);
                    }
                  }
                  responsePromise = requestFunction.call.apply(requestFunction, __spreadArray([requestContext], requestFunctionArguments, false));
                  this.responsePromiseCache.set(requestFunctionArgumentsJSON, {
                    requestTimestamp: now,
                    responsePromise
                  });
                  return [4, responsePromise];
                case 1:
                  response = _c.sent();
                  this.responseCache.set(requestFunctionArgumentsJSON, {
                    requestTimestamp: now,
                    response
                  });
                  isCacheOverMaxSize = this.responseCache.size > maxSize;
                  if (isCacheOverMaxSize) {
                    oldestEntry = this.responseCache.keys().next().value;
                    this.responseCache.delete(oldestEntry);
                  }
                  isResponsePromiseCacheOverMaxSize = this.responsePromiseCache.size > maxSize;
                  if (isResponsePromiseCacheOverMaxSize) {
                    oldestEntry = this.responsePromiseCache.keys().next().value;
                    this.responsePromiseCache.delete(oldestEntry);
                  }
                  return [2, response];
              }
            });
          });
        };
        return RequestWithCache2;
      }()
    );
    exports.default = RequestWithCache;
  }
});

// ../../node_modules/typesense/lib/Typesense/SearchOnlyDocuments.js
var require_SearchOnlyDocuments = __commonJS({
  "../../node_modules/typesense/lib/Typesense/SearchOnlyDocuments.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SearchOnlyDocuments = void 0;
    var RequestWithCache_1 = __importDefault(require_RequestWithCache());
    var Collections_1 = __importDefault(require_Collections());
    var RESOURCEPATH = "/documents";
    var SearchOnlyDocuments = (
      /** @class */
      function() {
        function SearchOnlyDocuments2(collectionName, apiCall, configuration) {
          this.collectionName = collectionName;
          this.apiCall = apiCall;
          this.configuration = configuration;
          this.requestWithCache = new RequestWithCache_1.default();
        }
        SearchOnlyDocuments2.prototype.clearCache = function() {
          this.requestWithCache.clearCache();
        };
        SearchOnlyDocuments2.prototype.search = function(searchParameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2, _c = _b.cacheSearchResultsForSeconds, cacheSearchResultsForSeconds = _c === void 0 ? this.configuration.cacheSearchResultsForSeconds : _c, _d = _b.abortSignal, abortSignal = _d === void 0 ? null : _d;
          return __awaiter(this, void 0, void 0, function() {
            var additionalQueryParams, key, queryParams;
            return __generator(this, function(_e) {
              additionalQueryParams = {};
              if (this.configuration.useServerSideSearchCache === true) {
                additionalQueryParams["use_cache"] = true;
              }
              for (key in searchParameters) {
                if (Array.isArray(searchParameters[key])) {
                  additionalQueryParams[key] = searchParameters[key].join(",");
                }
              }
              queryParams = Object.assign({}, searchParameters, additionalQueryParams);
              return [2, this.requestWithCache.perform(this.apiCall, this.apiCall.get, [this.endpointPath("search"), queryParams, { abortSignal }], {
                cacheResponseForSeconds: cacheSearchResultsForSeconds
              })];
            });
          });
        };
        SearchOnlyDocuments2.prototype.endpointPath = function(operation) {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.collectionName).concat(RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(SearchOnlyDocuments2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return SearchOnlyDocuments2;
      }()
    );
    exports.SearchOnlyDocuments = SearchOnlyDocuments;
  }
});

// ../../node_modules/typesense/lib/Typesense/Documents.js
var require_Documents = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Documents.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Errors_1 = require_Errors();
    var SearchOnlyDocuments_1 = require_SearchOnlyDocuments();
    var Documents = (
      /** @class */
      function(_super) {
        __extends(Documents2, _super);
        function Documents2(collectionName, apiCall, configuration) {
          return _super.call(this, collectionName, apiCall, configuration) || this;
        }
        Documents2.prototype.create = function(document2, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (!document2)
                throw new Error("No document provided");
              return [2, this.apiCall.post(this.endpointPath(), document2, options)];
            });
          });
        };
        Documents2.prototype.upsert = function(document2, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (!document2)
                throw new Error("No document provided");
              return [2, this.apiCall.post(this.endpointPath(), document2, Object.assign({}, options, { action: "upsert" }))];
            });
          });
        };
        Documents2.prototype.update = function(document2, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (!document2)
                throw new Error("No document provided");
              if (options["filter_by"] != null) {
                return [2, this.apiCall.patch(this.endpointPath(), document2, Object.assign({}, options))];
              } else {
                return [2, this.apiCall.post(this.endpointPath(), document2, Object.assign({}, options, { action: "update" }))];
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        Documents2.prototype.delete = function(query) {
          if (query === void 0) {
            query = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath(), query)];
            });
          });
        };
        Documents2.prototype.createMany = function(documents, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              this.configuration.logger.warn("createMany is deprecated and will be removed in a future version. Use import instead, which now takes both an array of documents or a JSONL string of documents");
              return [2, this.import(documents, options)];
            });
          });
        };
        Documents2.prototype.import = function(documents, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var documentsInJSONLFormat, resultsInJSONLFormat, resultsInJSONFormat, failedItems;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  if (Array.isArray(documents)) {
                    try {
                      documentsInJSONLFormat = documents.map(function(document2) {
                        return JSON.stringify(document2);
                      }).join("\n");
                    } catch (error) {
                      if (RangeError instanceof error && (error === null || error === void 0 ? void 0 : error.includes("Too many properties to enumerate"))) {
                        throw new Error("".concat(error, "\n          It looks like you have reached a Node.js limit that restricts the number of keys in an Object: https://stackoverflow.com/questions/9282869/are-there-limits-to-the-number-of-properties-in-a-javascript-object\n\n          Please try reducing the number of keys in your document, or using CURL to import your data.\n          "));
                      }
                      throw new Error(error);
                    }
                  } else {
                    documentsInJSONLFormat = documents;
                  }
                  return [4, this.apiCall.performRequest("post", this.endpointPath("import"), {
                    queryParameters: options,
                    bodyParameters: documentsInJSONLFormat,
                    additionalHeaders: { "Content-Type": "text/plain" },
                    skipConnectionTimeout: true
                    // We never want to client-side-timeout on an import and retry, since imports are syncronous and we want to let them take as long as it takes to complete fully
                  })];
                case 1:
                  resultsInJSONLFormat = _a2.sent();
                  if (Array.isArray(documents)) {
                    resultsInJSONFormat = resultsInJSONLFormat.split("\n").map(function(r) {
                      return JSON.parse(r);
                    });
                    failedItems = resultsInJSONFormat.filter(function(r) {
                      return r.success === false;
                    });
                    if (failedItems.length > 0) {
                      throw new Errors_1.ImportError("".concat(resultsInJSONFormat.length - failedItems.length, " documents imported successfully, ").concat(failedItems.length, " documents failed during import. Use `error.importResults` from the raised exception to get a detailed error reason for each document."), resultsInJSONFormat);
                    } else {
                      return [2, resultsInJSONFormat];
                    }
                  } else {
                    return [2, resultsInJSONLFormat];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Documents2.prototype.export = function(options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath("export"), options)];
            });
          });
        };
        Documents2.prototype.exportStream = function(options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath("export"), options, {
                responseType: "stream"
              })];
            });
          });
        };
        return Documents2;
      }(SearchOnlyDocuments_1.SearchOnlyDocuments)
    );
    exports.default = Documents;
  }
});

// ../../node_modules/typesense/lib/Typesense/Overrides.js
var require_Overrides = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Overrides.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Collections_1 = __importDefault(require_Collections());
    var RESOURCEPATH = "/overrides";
    var Overrides = (
      /** @class */
      function() {
        function Overrides2(collectionName, apiCall) {
          this.collectionName = collectionName;
          this.apiCall = apiCall;
        }
        Overrides2.prototype.upsert = function(overrideId, params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(overrideId), params)];
            });
          });
        };
        Overrides2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Overrides2.prototype.endpointPath = function(operation) {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.collectionName).concat(Overrides2.RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(Overrides2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Overrides2;
      }()
    );
    exports.default = Overrides;
  }
});

// ../../node_modules/typesense/lib/Typesense/Override.js
var require_Override = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Override.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Collections_1 = __importDefault(require_Collections());
    var Overrides_1 = __importDefault(require_Overrides());
    var Override = (
      /** @class */
      function() {
        function Override2(collectionName, overrideId, apiCall) {
          this.collectionName = collectionName;
          this.overrideId = overrideId;
          this.apiCall = apiCall;
        }
        Override2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Override2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Override2.prototype.endpointPath = function() {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.collectionName).concat(Overrides_1.default.RESOURCEPATH, "/").concat(this.overrideId);
        };
        return Override2;
      }()
    );
    exports.default = Override;
  }
});

// ../../node_modules/typesense/lib/Typesense/Synonyms.js
var require_Synonyms = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Synonyms.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Collections_1 = __importDefault(require_Collections());
    var RESOURCEPATH = "/synonyms";
    var Synonyms = (
      /** @class */
      function() {
        function Synonyms2(collectionName, apiCall) {
          this.collectionName = collectionName;
          this.apiCall = apiCall;
        }
        Synonyms2.prototype.upsert = function(synonymId, params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(synonymId), params)];
            });
          });
        };
        Synonyms2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Synonyms2.prototype.endpointPath = function(operation) {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.collectionName).concat(Synonyms2.RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(Synonyms2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Synonyms2;
      }()
    );
    exports.default = Synonyms;
  }
});

// ../../node_modules/typesense/lib/Typesense/Synonym.js
var require_Synonym = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Synonym.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Collections_1 = __importDefault(require_Collections());
    var Synonyms_1 = __importDefault(require_Synonyms());
    var Synonym = (
      /** @class */
      function() {
        function Synonym2(collectionName, synonymId, apiCall) {
          this.collectionName = collectionName;
          this.synonymId = synonymId;
          this.apiCall = apiCall;
        }
        Synonym2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Synonym2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Synonym2.prototype.endpointPath = function() {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.collectionName).concat(Synonyms_1.default.RESOURCEPATH, "/").concat(this.synonymId);
        };
        return Synonym2;
      }()
    );
    exports.default = Synonym;
  }
});

// ../../node_modules/typesense/lib/Typesense/Document.js
var require_Document = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Document.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Document = void 0;
    var Collections_1 = __importDefault(require_Collections());
    var Documents_1 = __importDefault(require_Documents());
    var Document = (
      /** @class */
      function() {
        function Document2(collectionName, documentId, apiCall) {
          this.collectionName = collectionName;
          this.documentId = documentId;
          this.apiCall = apiCall;
        }
        Document2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Document2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Document2.prototype.update = function(partialDocument, options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.patch(this.endpointPath(), partialDocument, options)];
            });
          });
        };
        Document2.prototype.endpointPath = function() {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.collectionName).concat(Documents_1.default.RESOURCEPATH, "/").concat(this.documentId);
        };
        return Document2;
      }()
    );
    exports.Document = Document;
  }
});

// ../../node_modules/typesense/lib/Typesense/Collection.js
var require_Collection = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Collection.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Collections_1 = __importDefault(require_Collections());
    var Documents_1 = __importDefault(require_Documents());
    var Errors_1 = require_Errors();
    var Overrides_1 = __importDefault(require_Overrides());
    var Override_1 = __importDefault(require_Override());
    var Synonyms_1 = __importDefault(require_Synonyms());
    var Synonym_1 = __importDefault(require_Synonym());
    var Document_1 = require_Document();
    var Collection = (
      /** @class */
      function() {
        function Collection2(name, apiCall, configuration) {
          this.name = name;
          this.apiCall = apiCall;
          this.configuration = configuration;
          this.individualDocuments = {};
          this.individualOverrides = {};
          this.individualSynonyms = {};
          this.name = name;
          this.apiCall = apiCall;
          this.configuration = configuration;
          this._documents = new Documents_1.default(this.name, this.apiCall, this.configuration);
          this._overrides = new Overrides_1.default(this.name, this.apiCall);
          this._synonyms = new Synonyms_1.default(this.name, this.apiCall);
        }
        Collection2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Collection2.prototype.update = function(schema) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.patch(this.endpointPath(), schema)];
            });
          });
        };
        Collection2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Collection2.prototype.exists = function() {
          return __awaiter(this, void 0, void 0, function() {
            var e_1;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  _a2.trys.push([0, 2, , 3]);
                  return [4, this.retrieve()];
                case 1:
                  _a2.sent();
                  return [2, true];
                case 2:
                  e_1 = _a2.sent();
                  if (e_1 instanceof Errors_1.ObjectNotFound)
                    return [2, false];
                  throw e_1;
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Collection2.prototype.documents = function(documentId) {
          if (!documentId) {
            return this._documents;
          } else {
            if (this.individualDocuments[documentId] === void 0) {
              this.individualDocuments[documentId] = new Document_1.Document(this.name, documentId, this.apiCall);
            }
            return this.individualDocuments[documentId];
          }
        };
        Collection2.prototype.overrides = function(overrideId) {
          if (overrideId === void 0) {
            return this._overrides;
          } else {
            if (this.individualOverrides[overrideId] === void 0) {
              this.individualOverrides[overrideId] = new Override_1.default(this.name, overrideId, this.apiCall);
            }
            return this.individualOverrides[overrideId];
          }
        };
        Collection2.prototype.synonyms = function(synonymId) {
          if (synonymId === void 0) {
            return this._synonyms;
          } else {
            if (this.individualSynonyms[synonymId] === void 0) {
              this.individualSynonyms[synonymId] = new Synonym_1.default(this.name, synonymId, this.apiCall);
            }
            return this.individualSynonyms[synonymId];
          }
        };
        Collection2.prototype.endpointPath = function() {
          return "".concat(Collections_1.default.RESOURCEPATH, "/").concat(this.name);
        };
        return Collection2;
      }()
    );
    exports.default = Collection;
  }
});

// ../../node_modules/typesense/lib/Typesense/Aliases.js
var require_Aliases = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Aliases.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/aliases";
    var Aliases = (
      /** @class */
      function() {
        function Aliases2(apiCall) {
          this.apiCall = apiCall;
        }
        Aliases2.prototype.upsert = function(name, mapping) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(name), mapping)];
            });
          });
        };
        Aliases2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        Aliases2.prototype.endpointPath = function(aliasName) {
          return "".concat(Aliases2.RESOURCEPATH, "/").concat(aliasName);
        };
        Object.defineProperty(Aliases2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Aliases2;
      }()
    );
    exports.default = Aliases;
  }
});

// ../../node_modules/typesense/lib/Typesense/Alias.js
var require_Alias = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Alias.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Aliases_1 = __importDefault(require_Aliases());
    var Alias = (
      /** @class */
      function() {
        function Alias2(name, apiCall) {
          this.name = name;
          this.apiCall = apiCall;
        }
        Alias2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Alias2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Alias2.prototype.endpointPath = function() {
          return "".concat(Aliases_1.default.RESOURCEPATH, "/").concat(this.name);
        };
        return Alias2;
      }()
    );
    exports.default = Alias;
  }
});

// (disabled):crypto
var require_crypto = __commonJS({
  "(disabled):crypto"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// ../../node_modules/typesense/lib/Typesense/Keys.js
var require_Keys = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Keys.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var crypto_1 = require_crypto();
    var RESOURCEPATH = "/keys";
    var Keys = (
      /** @class */
      function() {
        function Keys2(apiCall) {
          this.apiCall = apiCall;
          this.apiCall = apiCall;
        }
        Keys2.prototype.create = function(params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.post(Keys2.RESOURCEPATH, params)];
            });
          });
        };
        Keys2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        Keys2.prototype.generateScopedSearchKey = function(searchKey, parameters) {
          var paramsJSON = JSON.stringify(parameters);
          var digest = Buffer.from((0, crypto_1.createHmac)("sha256", searchKey).update(paramsJSON).digest("base64"));
          var keyPrefix = searchKey.substr(0, 4);
          var rawScopedKey = "".concat(digest).concat(keyPrefix).concat(paramsJSON);
          return Buffer.from(rawScopedKey).toString("base64");
        };
        Object.defineProperty(Keys2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Keys2;
      }()
    );
    exports.default = Keys;
  }
});

// ../../node_modules/typesense/lib/Typesense/Key.js
var require_Key = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Key.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Keys_1 = __importDefault(require_Keys());
    var Key = (
      /** @class */
      function() {
        function Key2(id, apiCall) {
          this.id = id;
          this.apiCall = apiCall;
        }
        Key2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Key2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Key2.prototype.endpointPath = function() {
          return "".concat(Keys_1.default.RESOURCEPATH, "/").concat(this.id);
        };
        return Key2;
      }()
    );
    exports.default = Key;
  }
});

// ../../node_modules/typesense/lib/Typesense/Debug.js
var require_Debug = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Debug.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/debug";
    var Debug = (
      /** @class */
      function() {
        function Debug2(apiCall) {
          this.apiCall = apiCall;
        }
        Debug2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        return Debug2;
      }()
    );
    exports.default = Debug;
  }
});

// ../../node_modules/typesense/lib/Typesense/Metrics.js
var require_Metrics = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Metrics.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/metrics.json";
    var Metrics = (
      /** @class */
      function() {
        function Metrics2(apiCall) {
          this.apiCall = apiCall;
        }
        Metrics2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        return Metrics2;
      }()
    );
    exports.default = Metrics;
  }
});

// ../../node_modules/typesense/lib/Typesense/Health.js
var require_Health = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Health.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/health";
    var Health = (
      /** @class */
      function() {
        function Health2(apiCall) {
          this.apiCall = apiCall;
        }
        Health2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        return Health2;
      }()
    );
    exports.default = Health;
  }
});

// ../../node_modules/typesense/lib/Typesense/Operations.js
var require_Operations = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Operations.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/operations";
    var Operations = (
      /** @class */
      function() {
        function Operations2(apiCall) {
          this.apiCall = apiCall;
        }
        Operations2.prototype.perform = function(operationName, queryParameters) {
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.post("".concat(RESOURCEPATH, "/").concat(operationName), {}, queryParameters)];
            });
          });
        };
        return Operations2;
      }()
    );
    exports.default = Operations;
  }
});

// ../../node_modules/typesense/lib/Typesense/MultiSearch.js
var require_MultiSearch = __commonJS({
  "../../node_modules/typesense/lib/Typesense/MultiSearch.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RequestWithCache_1 = __importDefault(require_RequestWithCache());
    var RESOURCEPATH = "/multi_search";
    var MultiSearch = (
      /** @class */
      function() {
        function MultiSearch2(apiCall, configuration, useTextContentType) {
          if (useTextContentType === void 0) {
            useTextContentType = false;
          }
          this.apiCall = apiCall;
          this.configuration = configuration;
          this.useTextContentType = useTextContentType;
          this.requestWithCache = new RequestWithCache_1.default();
        }
        MultiSearch2.prototype.clearCache = function() {
          this.requestWithCache.clearCache();
        };
        MultiSearch2.prototype.perform = function(searchRequests, commonParams, _a2) {
          if (commonParams === void 0) {
            commonParams = {};
          }
          var _b = _a2 === void 0 ? {} : _a2, _c = _b.cacheSearchResultsForSeconds, cacheSearchResultsForSeconds = _c === void 0 ? this.configuration.cacheSearchResultsForSeconds : _c;
          return __awaiter(this, void 0, void 0, function() {
            var additionalHeaders, additionalQueryParams, queryParams;
            return __generator(this, function(_d) {
              additionalHeaders = {};
              if (this.useTextContentType) {
                additionalHeaders["content-type"] = "text/plain";
              }
              additionalQueryParams = {};
              if (this.configuration.useServerSideSearchCache === true) {
                additionalQueryParams["use_cache"] = true;
              }
              queryParams = Object.assign({}, commonParams, additionalQueryParams);
              return [2, this.requestWithCache.perform(this.apiCall, this.apiCall.post, [RESOURCEPATH, searchRequests, queryParams, additionalHeaders], { cacheResponseForSeconds: cacheSearchResultsForSeconds })];
            });
          });
        };
        return MultiSearch2;
      }()
    );
    exports.default = MultiSearch;
  }
});

// ../../node_modules/typesense/lib/Typesense/Presets.js
var require_Presets = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Presets.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/presets";
    var Presets = (
      /** @class */
      function() {
        function Presets2(apiCall) {
          this.apiCall = apiCall;
        }
        Presets2.prototype.upsert = function(presetId, params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(presetId), params)];
            });
          });
        };
        Presets2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Presets2.prototype.endpointPath = function(operation) {
          return "".concat(Presets2.RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(Presets2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Presets2;
      }()
    );
    exports.default = Presets;
  }
});

// ../../node_modules/typesense/lib/Typesense/Preset.js
var require_Preset = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Preset.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Presets_1 = __importDefault(require_Presets());
    var Preset = (
      /** @class */
      function() {
        function Preset2(presetId, apiCall) {
          this.presetId = presetId;
          this.apiCall = apiCall;
        }
        Preset2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Preset2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Preset2.prototype.endpointPath = function() {
          return "".concat(Presets_1.default.RESOURCEPATH, "/").concat(this.presetId);
        };
        return Preset2;
      }()
    );
    exports.default = Preset;
  }
});

// ../../node_modules/typesense/lib/Typesense/AnalyticsRules.js
var require_AnalyticsRules = __commonJS({
  "../../node_modules/typesense/lib/Typesense/AnalyticsRules.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/analytics/rules";
    var AnalyticsRules = (
      /** @class */
      function() {
        function AnalyticsRules2(apiCall) {
          this.apiCall = apiCall;
          this.apiCall = apiCall;
        }
        AnalyticsRules2.prototype.upsert = function(name, params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(name), params)];
            });
          });
        };
        AnalyticsRules2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        AnalyticsRules2.prototype.endpointPath = function(operation) {
          return "".concat(AnalyticsRules2.RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(AnalyticsRules2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return AnalyticsRules2;
      }()
    );
    exports.default = AnalyticsRules;
  }
});

// ../../node_modules/typesense/lib/Typesense/AnalyticsRule.js
var require_AnalyticsRule = __commonJS({
  "../../node_modules/typesense/lib/Typesense/AnalyticsRule.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AnalyticsRules_1 = __importDefault(require_AnalyticsRules());
    var AnalyticsRule = (
      /** @class */
      function() {
        function AnalyticsRule2(name, apiCall) {
          this.name = name;
          this.apiCall = apiCall;
        }
        AnalyticsRule2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        AnalyticsRule2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        AnalyticsRule2.prototype.endpointPath = function() {
          return "".concat(AnalyticsRules_1.default.RESOURCEPATH, "/").concat(this.name);
        };
        return AnalyticsRule2;
      }()
    );
    exports.default = AnalyticsRule;
  }
});

// ../../node_modules/typesense/lib/Typesense/Analytics.js
var require_Analytics = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Analytics.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AnalyticsRules_1 = __importDefault(require_AnalyticsRules());
    var AnalyticsRule_1 = __importDefault(require_AnalyticsRule());
    var RESOURCEPATH = "/analytics";
    var Analytics = (
      /** @class */
      function() {
        function Analytics2(apiCall) {
          this.apiCall = apiCall;
          this.individualAnalyticsRules = {};
          this.apiCall = apiCall;
          this._analyticsRules = new AnalyticsRules_1.default(this.apiCall);
        }
        Analytics2.prototype.rules = function(id) {
          if (id === void 0) {
            return this._analyticsRules;
          } else {
            if (this.individualAnalyticsRules[id] === void 0) {
              this.individualAnalyticsRules[id] = new AnalyticsRule_1.default(id, this.apiCall);
            }
            return this.individualAnalyticsRules[id];
          }
        };
        Object.defineProperty(Analytics2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Analytics2;
      }()
    );
    exports.default = Analytics;
  }
});

// ../../node_modules/typesense/lib/Typesense/Stopwords.js
var require_Stopwords = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Stopwords.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/stopwords";
    var Stopwords = (
      /** @class */
      function() {
        function Stopwords2(apiCall) {
          this.apiCall = apiCall;
        }
        Stopwords2.prototype.upsert = function(stopwordId, params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(stopwordId), params)];
            });
          });
        };
        Stopwords2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Stopwords2.prototype.endpointPath = function(operation) {
          return "".concat(Stopwords2.RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(Stopwords2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Stopwords2;
      }()
    );
    exports.default = Stopwords;
  }
});

// ../../node_modules/typesense/lib/Typesense/Stopword.js
var require_Stopword = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Stopword.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Stopwords_1 = __importDefault(require_Stopwords());
    var Stopword = (
      /** @class */
      function() {
        function Stopword2(stopwordId, apiCall) {
          this.stopwordId = stopwordId;
          this.apiCall = apiCall;
        }
        Stopword2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Stopword2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Stopword2.prototype.endpointPath = function() {
          return "".concat(Stopwords_1.default.RESOURCEPATH, "/").concat(this.stopwordId);
        };
        return Stopword2;
      }()
    );
    exports.default = Stopword;
  }
});

// ../../node_modules/typesense/lib/Typesense/ConversationModels.js
var require_ConversationModels = __commonJS({
  "../../node_modules/typesense/lib/Typesense/ConversationModels.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var RESOURCEPATH = "/conversations/models";
    var ConversationModels = (
      /** @class */
      function() {
        function ConversationModels2(apiCall) {
          this.apiCall = apiCall;
          this.apiCall = apiCall;
        }
        ConversationModels2.prototype.create = function(params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.post(this.endpointPath(), params)];
            });
          });
        };
        ConversationModels2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        ConversationModels2.prototype.endpointPath = function(operation) {
          return "".concat(ConversationModels2.RESOURCEPATH).concat(operation === void 0 ? "" : "/" + operation);
        };
        Object.defineProperty(ConversationModels2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return ConversationModels2;
      }()
    );
    exports.default = ConversationModels;
  }
});

// ../../node_modules/typesense/lib/Typesense/ConversationModel.js
var require_ConversationModel = __commonJS({
  "../../node_modules/typesense/lib/Typesense/ConversationModel.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConversationModels_1 = __importDefault(require_ConversationModels());
    var ConversationModel = (
      /** @class */
      function() {
        function ConversationModel2(id, apiCall) {
          this.id = id;
          this.apiCall = apiCall;
        }
        ConversationModel2.prototype.update = function(params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(), params)];
            });
          });
        };
        ConversationModel2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        ConversationModel2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        ConversationModel2.prototype.endpointPath = function() {
          return "".concat(ConversationModels_1.default.RESOURCEPATH, "/").concat(this.id);
        };
        return ConversationModel2;
      }()
    );
    exports.default = ConversationModel;
  }
});

// ../../node_modules/typesense/lib/Typesense/Conversations.js
var require_Conversations = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Conversations.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConversationModels_1 = __importDefault(require_ConversationModels());
    var ConversationModel_1 = __importDefault(require_ConversationModel());
    var RESOURCEPATH = "/conversations";
    var Conversations = (
      /** @class */
      function() {
        function Conversations2(apiCall) {
          this.apiCall = apiCall;
          this.individualConversationModels = {};
          this.apiCall = apiCall;
          this._conversationsModels = new ConversationModels_1.default(this.apiCall);
        }
        Conversations2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(RESOURCEPATH)];
            });
          });
        };
        Conversations2.prototype.models = function(id) {
          if (id === void 0) {
            return this._conversationsModels;
          } else {
            if (this.individualConversationModels[id] === void 0) {
              this.individualConversationModels[id] = new ConversationModel_1.default(id, this.apiCall);
            }
            return this.individualConversationModels[id];
          }
        };
        Object.defineProperty(Conversations2, "RESOURCEPATH", {
          get: function() {
            return RESOURCEPATH;
          },
          enumerable: false,
          configurable: true
        });
        return Conversations2;
      }()
    );
    exports.default = Conversations;
  }
});

// ../../node_modules/typesense/lib/Typesense/Conversation.js
var require_Conversation = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Conversation.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y2, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n2) {
        return function(v2) {
          return step([n2, v2]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
              return t;
            if (y2 = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y2 = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e2) {
            op = [6, e2];
            y2 = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Conversations_1 = __importDefault(require_Conversations());
    var Conversation = (
      /** @class */
      function() {
        function Conversation2(id, apiCall) {
          this.id = id;
          this.apiCall = apiCall;
        }
        Conversation2.prototype.retrieve = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.get(this.endpointPath())];
            });
          });
        };
        Conversation2.prototype.update = function(params) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.put(this.endpointPath(), params)];
            });
          });
        };
        Conversation2.prototype.delete = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              return [2, this.apiCall.delete(this.endpointPath())];
            });
          });
        };
        Conversation2.prototype.endpointPath = function() {
          return "".concat(Conversations_1.default.RESOURCEPATH, "/").concat(this.id);
        };
        return Conversation2;
      }()
    );
    exports.default = Conversation;
  }
});

// ../../node_modules/typesense/lib/Typesense/Client.js
var require_Client = __commonJS({
  "../../node_modules/typesense/lib/Typesense/Client.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Configuration_1 = __importDefault(require_Configuration());
    var ApiCall_1 = __importDefault(require_ApiCall());
    var Collections_1 = __importDefault(require_Collections());
    var Collection_1 = __importDefault(require_Collection());
    var Aliases_1 = __importDefault(require_Aliases());
    var Alias_1 = __importDefault(require_Alias());
    var Keys_1 = __importDefault(require_Keys());
    var Key_1 = __importDefault(require_Key());
    var Debug_1 = __importDefault(require_Debug());
    var Metrics_1 = __importDefault(require_Metrics());
    var Health_1 = __importDefault(require_Health());
    var Operations_1 = __importDefault(require_Operations());
    var MultiSearch_1 = __importDefault(require_MultiSearch());
    var Presets_1 = __importDefault(require_Presets());
    var Preset_1 = __importDefault(require_Preset());
    var Analytics_1 = __importDefault(require_Analytics());
    var Stopwords_1 = __importDefault(require_Stopwords());
    var Stopword_1 = __importDefault(require_Stopword());
    var Conversations_1 = __importDefault(require_Conversations());
    var Conversation_1 = __importDefault(require_Conversation());
    var Client = (
      /** @class */
      function() {
        function Client2(options) {
          var _a2;
          options.sendApiKeyAsQueryParam = (_a2 = options.sendApiKeyAsQueryParam) !== null && _a2 !== void 0 ? _a2 : false;
          this.configuration = new Configuration_1.default(options);
          this.apiCall = new ApiCall_1.default(this.configuration);
          this.debug = new Debug_1.default(this.apiCall);
          this.metrics = new Metrics_1.default(this.apiCall);
          this.health = new Health_1.default(this.apiCall);
          this.operations = new Operations_1.default(this.apiCall);
          this.multiSearch = new MultiSearch_1.default(this.apiCall, this.configuration);
          this._collections = new Collections_1.default(this.apiCall);
          this.individualCollections = {};
          this._aliases = new Aliases_1.default(this.apiCall);
          this.individualAliases = {};
          this._keys = new Keys_1.default(this.apiCall);
          this.individualKeys = {};
          this._presets = new Presets_1.default(this.apiCall);
          this.individualPresets = {};
          this._stopwords = new Stopwords_1.default(this.apiCall);
          this.individualStopwords = {};
          this.analytics = new Analytics_1.default(this.apiCall);
          this._conversations = new Conversations_1.default(this.apiCall);
          this.individualConversations = {};
        }
        Client2.prototype.collections = function(collectionName) {
          if (collectionName === void 0) {
            return this._collections;
          } else {
            if (this.individualCollections[collectionName] === void 0) {
              this.individualCollections[collectionName] = new Collection_1.default(collectionName, this.apiCall, this.configuration);
            }
            return this.individualCollections[collectionName];
          }
        };
        Client2.prototype.aliases = function(aliasName) {
          if (aliasName === void 0) {
            return this._aliases;
          } else {
            if (this.individualAliases[aliasName] === void 0) {
              this.individualAliases[aliasName] = new Alias_1.default(aliasName, this.apiCall);
            }
            return this.individualAliases[aliasName];
          }
        };
        Client2.prototype.keys = function(id) {
          if (id === void 0) {
            return this._keys;
          } else {
            if (this.individualKeys[id] === void 0) {
              this.individualKeys[id] = new Key_1.default(id, this.apiCall);
            }
            return this.individualKeys[id];
          }
        };
        Client2.prototype.presets = function(id) {
          if (id === void 0) {
            return this._presets;
          } else {
            if (this.individualPresets[id] === void 0) {
              this.individualPresets[id] = new Preset_1.default(id, this.apiCall);
            }
            return this.individualPresets[id];
          }
        };
        Client2.prototype.stopwords = function(id) {
          if (id === void 0) {
            return this._stopwords;
          } else {
            if (this.individualStopwords[id] === void 0) {
              this.individualStopwords[id] = new Stopword_1.default(id, this.apiCall);
            }
            return this.individualStopwords[id];
          }
        };
        Client2.prototype.conversations = function(id) {
          if (id === void 0) {
            return this._conversations;
          } else {
            if (this.individualConversations[id] === void 0) {
              this.individualConversations[id] = new Conversation_1.default(id, this.apiCall);
            }
            return this.individualConversations[id];
          }
        };
        return Client2;
      }()
    );
    exports.default = Client;
  }
});

// ../../node_modules/typesense/lib/Typesense/SearchOnlyCollection.js
var require_SearchOnlyCollection = __commonJS({
  "../../node_modules/typesense/lib/Typesense/SearchOnlyCollection.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SearchOnlyCollection = void 0;
    var SearchOnlyDocuments_1 = require_SearchOnlyDocuments();
    var SearchOnlyCollection = (
      /** @class */
      function() {
        function SearchOnlyCollection2(name, apiCall, configuration) {
          this.name = name;
          this.apiCall = apiCall;
          this.configuration = configuration;
          this._documents = new SearchOnlyDocuments_1.SearchOnlyDocuments(this.name, this.apiCall, this.configuration);
        }
        SearchOnlyCollection2.prototype.documents = function() {
          return this._documents;
        };
        return SearchOnlyCollection2;
      }()
    );
    exports.SearchOnlyCollection = SearchOnlyCollection;
  }
});

// ../../node_modules/typesense/lib/Typesense/SearchClient.js
var require_SearchClient = __commonJS({
  "../../node_modules/typesense/lib/Typesense/SearchClient.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Configuration_1 = __importDefault(require_Configuration());
    var ApiCall_1 = __importDefault(require_ApiCall());
    var MultiSearch_1 = __importDefault(require_MultiSearch());
    var SearchOnlyCollection_1 = require_SearchOnlyCollection();
    var SearchClient2 = (
      /** @class */
      function() {
        function SearchClient3(options) {
          var _a2;
          options.sendApiKeyAsQueryParam = (_a2 = options.sendApiKeyAsQueryParam) !== null && _a2 !== void 0 ? _a2 : true;
          if (options.sendApiKeyAsQueryParam === true && (options.apiKey || "").length > 2e3) {
            console.warn("[typesense] API Key is longer than 2000 characters which is over the allowed limit, so disabling sending it as a query parameter.");
            options.sendApiKeyAsQueryParam = false;
          }
          this.configuration = new Configuration_1.default(options);
          this.apiCall = new ApiCall_1.default(this.configuration);
          this.multiSearch = new MultiSearch_1.default(this.apiCall, this.configuration, true);
          this.individualCollections = {};
        }
        SearchClient3.prototype.clearCache = function() {
          this.multiSearch.clearCache();
          Object.entries(this.individualCollections).forEach(function(_a2) {
            var _ = _a2[0], collection = _a2[1];
            collection.documents().clearCache();
          });
        };
        SearchClient3.prototype.collections = function(collectionName) {
          if (!collectionName) {
            throw new Error("Typesense.SearchClient only supports search operations, so the collectionName that needs to be searched must be specified. Use Typesense.Client if you need to access the collection object.");
          } else {
            if (this.individualCollections[collectionName] === void 0) {
              this.individualCollections[collectionName] = new SearchOnlyCollection_1.SearchOnlyCollection(collectionName, this.apiCall, this.configuration);
            }
            return this.individualCollections[collectionName];
          }
        };
        return SearchClient3;
      }()
    );
    exports.default = SearchClient2;
  }
});

// ../../node_modules/typesense/lib/Typesense.js
var require_Typesense = __commonJS({
  "../../node_modules/typesense/lib/Typesense.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m2[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Errors = exports.SearchClient = exports.Client = void 0;
    var Client_1 = __importDefault(require_Client());
    exports.Client = Client_1.default;
    var SearchClient_1 = __importDefault(require_SearchClient());
    exports.SearchClient = SearchClient_1.default;
    var Errors = __importStar(require_Errors());
    exports.Errors = Errors;
    exports.default = { Client: Client_1.default, SearchClient: SearchClient_1.default, Errors };
  }
});

// .wrangler/tmp/bundle-cVVNnv/middleware-loader.entry.ts
init_checked_fetch();
init_modules_watch_stub();

// .wrangler/tmp/bundle-cVVNnv/middleware-insertion-facade.js
init_checked_fetch();
init_modules_watch_stub();

// src/index.ts
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/@hono/swagger-ui/dist/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/helper/html/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/html.js
init_checked_fetch();
init_modules_watch_stub();
var HtmlEscapedCallbackPhase = {
  Stringify: 1,
  BeforeStream: 2,
  Stream: 3
};
var raw = (value, callbacks) => {
  const escapedString = new String(value);
  escapedString.isEscaped = true;
  escapedString.callbacks = callbacks;
  return escapedString;
};
var escapeRe = /[&<>'"]/;
var stringBufferToString = async (buffer, callbacks) => {
  let str = "";
  callbacks ||= [];
  const resolvedBuffer = await Promise.all(buffer);
  for (let i2 = resolvedBuffer.length - 1; ; i2--) {
    str += resolvedBuffer[i2];
    i2--;
    if (i2 < 0) {
      break;
    }
    let r = resolvedBuffer[i2];
    if (typeof r === "object") {
      callbacks.push(...r.callbacks || []);
    }
    const isEscaped = r.isEscaped;
    r = await (typeof r === "object" ? r.toString() : r);
    if (typeof r === "object") {
      callbacks.push(...r.callbacks || []);
    }
    if (r.isEscaped ?? isEscaped) {
      str += r;
    } else {
      const buf = [str];
      escapeToBuffer(r, buf);
      str = buf[0];
    }
  }
  return raw(str, callbacks);
};
var escapeToBuffer = (str, buffer) => {
  const match = str.search(escapeRe);
  if (match === -1) {
    buffer[0] += str;
    return;
  }
  let escape;
  let index;
  let lastIndex = 0;
  for (index = match; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escape = "&quot;";
        break;
      case 39:
        escape = "&#39;";
        break;
      case 38:
        escape = "&amp;";
        break;
      case 60:
        escape = "&lt;";
        break;
      case 62:
        escape = "&gt;";
        break;
      default:
        continue;
    }
    buffer[0] += str.substring(lastIndex, index) + escape;
    lastIndex = index + 1;
  }
  buffer[0] += str.substring(lastIndex, index);
};
var resolveCallbackSync = (str) => {
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return str;
  }
  const buffer = [str];
  const context = {};
  callbacks.forEach((c2) => c2({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));
  return buffer[0];
};
var resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {
  if (typeof str === "object" && !(str instanceof String)) {
    if (!(str instanceof Promise)) {
      str = str.toString();
    }
    if (str instanceof Promise) {
      str = await str;
    }
  }
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return Promise.resolve(str);
  }
  if (buffer) {
    buffer[0] += str;
  } else {
    buffer = [str];
  }
  const resStr = Promise.all(callbacks.map((c2) => c2({ phase, buffer, context }))).then(
    (res) => Promise.all(
      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))
    ).then(() => buffer[0])
  );
  if (preserveCallbacks) {
    return raw(await resStr, callbacks);
  } else {
    return resStr;
  }
};

// ../../node_modules/hono/dist/helper/html/index.js
var html = (strings, ...values) => {
  const buffer = [""];
  for (let i2 = 0, len = strings.length - 1; i2 < len; i2++) {
    buffer[0] += strings[i2];
    const children = values[i2] instanceof Array ? values[i2].flat(Infinity) : [values[i2]];
    for (let i22 = 0, len2 = children.length; i22 < len2; i22++) {
      const child = children[i22];
      if (typeof child === "string") {
        escapeToBuffer(child, buffer);
      } else if (typeof child === "number") {
        ;
        buffer[0] += child;
      } else if (typeof child === "boolean" || child === null || child === void 0) {
        continue;
      } else if (typeof child === "object" && child.isEscaped) {
        if (child.callbacks) {
          buffer.unshift("", child);
        } else {
          const tmp = child.toString();
          if (tmp instanceof Promise) {
            buffer.unshift("", tmp);
          } else {
            buffer[0] += tmp;
          }
        }
      } else if (child instanceof Promise) {
        buffer.unshift("", child);
      } else {
        escapeToBuffer(child.toString(), buffer);
      }
    }
  }
  buffer[0] += strings[strings.length - 1];
  return buffer.length === 1 ? "callbacks" in buffer ? raw(resolveCallbackSync(raw(buffer[0], buffer.callbacks))) : raw(buffer[0]) : stringBufferToString(buffer, buffer.callbacks);
};

// ../../node_modules/@hono/swagger-ui/dist/index.js
var RENDER_TYPE = {
  STRING_ARRAY: "string_array",
  STRING: "string",
  JSON_STRING: "json_string",
  RAW: "raw"
};
var RENDER_TYPE_MAP = {
  configUrl: RENDER_TYPE.STRING,
  deepLinking: RENDER_TYPE.RAW,
  presets: RENDER_TYPE.STRING_ARRAY,
  plugins: RENDER_TYPE.STRING_ARRAY,
  spec: RENDER_TYPE.JSON_STRING,
  url: RENDER_TYPE.STRING,
  urls: RENDER_TYPE.JSON_STRING,
  layout: RENDER_TYPE.STRING,
  docExpansion: RENDER_TYPE.STRING,
  maxDisplayedTags: RENDER_TYPE.RAW,
  operationsSorter: RENDER_TYPE.RAW,
  requestInterceptor: RENDER_TYPE.RAW,
  responseInterceptor: RENDER_TYPE.RAW,
  persistAuthorization: RENDER_TYPE.RAW,
  defaultModelsExpandDepth: RENDER_TYPE.RAW,
  defaultModelExpandDepth: RENDER_TYPE.RAW,
  defaultModelRendering: RENDER_TYPE.STRING,
  displayRequestDuration: RENDER_TYPE.RAW,
  filter: RENDER_TYPE.RAW,
  showExtensions: RENDER_TYPE.RAW,
  showCommonExtensions: RENDER_TYPE.RAW,
  queryConfigEnabled: RENDER_TYPE.RAW,
  displayOperationId: RENDER_TYPE.RAW,
  tagsSorter: RENDER_TYPE.RAW,
  onComplete: RENDER_TYPE.RAW,
  syntaxHighlight: RENDER_TYPE.JSON_STRING,
  tryItOutEnabled: RENDER_TYPE.RAW,
  requestSnippetsEnabled: RENDER_TYPE.RAW,
  requestSnippets: RENDER_TYPE.JSON_STRING,
  oauth2RedirectUrl: RENDER_TYPE.STRING,
  showMutabledRequest: RENDER_TYPE.RAW,
  request: RENDER_TYPE.JSON_STRING,
  supportedSubmitMethods: RENDER_TYPE.JSON_STRING,
  validatorUrl: RENDER_TYPE.STRING,
  withCredentials: RENDER_TYPE.RAW,
  modelPropertyMacro: RENDER_TYPE.RAW,
  parameterMacro: RENDER_TYPE.RAW
};
var renderSwaggerUIOptions = (options) => {
  const optionsStrings = Object.entries(options).map(([k, v2]) => {
    const key = k;
    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.STRING) {
      return `${key}: '${v2}'`;
    }
    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.STRING_ARRAY) {
      if (!Array.isArray(v2)) {
        return "";
      }
      return `${key}: [${v2.map((ve) => `${ve}`).join(",")}]`;
    }
    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.JSON_STRING) {
      return `${key}: ${JSON.stringify(v2)}`;
    }
    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.RAW) {
      return `${key}: ${v2}`;
    }
    return "";
  }).join(",");
  return optionsStrings;
};
var remoteAssets = ({ version }) => {
  const url = `https://cdn.jsdelivr.net/npm/swagger-ui-dist${version !== void 0 ? `@${version}` : ""}`;
  return {
    css: [`${url}/swagger-ui.css`],
    js: [`${url}/swagger-ui-bundle.js`]
  };
};
var _a;
var SwaggerUI = (options) => {
  const asset = remoteAssets({ version: options?.version });
  delete options.version;
  if (options.manuallySwaggerUIHtml) {
    return options.manuallySwaggerUIHtml(asset);
  }
  const optionsStrings = renderSwaggerUIOptions(options);
  return `
    <div>
      <div id="swagger-ui"></div>
      ${asset.css.map((url) => html`<link rel="stylesheet" href="${url}" />`)}
      ${asset.js.map((url) => html(_a || (_a = __template(['<script src="', '" crossorigin="anonymous"><\/script>'])), url))}
      <script>
        window.onload = () => {
          window.ui = SwaggerUIBundle({
            dom_id: '#swagger-ui',${optionsStrings},
          })
        }
      <\/script>
    </div>
  `;
};
var middleware = (options) => async (c2) => {
  return c2.html(
    /* html */
    `
      <html lang="en">
        <head>
          <meta charset="utf-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <meta name="description" content="SwaggerUI" />
          <title>SwaggerUI</title>
        </head>
        <body>
          ${SwaggerUI(options)}
        </body>
      </html>
    `
  );
};

// ../../node_modules/@hono/zod-openapi/dist/index.mjs
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/@asteasolutions/zod-to-openapi/dist/index.mjs
init_checked_fetch();
init_modules_watch_stub();
function __rest(s2, e2) {
  var t = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t[p2[i2]] = s2[p2[i2]];
    }
  return t;
}
function isZodType(schema, typeName) {
  var _a2;
  return ((_a2 = schema === null || schema === void 0 ? void 0 : schema._def) === null || _a2 === void 0 ? void 0 : _a2.typeName) === typeName;
}
function isAnyZodType(schema) {
  return "_def" in schema;
}
function preserveMetadataFromModifier(zod, modifier) {
  const zodModifier = zod.ZodType.prototype[modifier];
  zod.ZodType.prototype[modifier] = function(...args) {
    const result = zodModifier.apply(this, args);
    result._def.openapi = this._def.openapi;
    return result;
  };
}
function extendZodWithOpenApi(zod) {
  if (typeof zod.ZodType.prototype.openapi !== "undefined") {
    return;
  }
  zod.ZodType.prototype.openapi = function(refOrOpenapi, metadata) {
    var _a2, _b, _c, _d, _e, _f;
    const openapi = typeof refOrOpenapi === "string" ? metadata : refOrOpenapi;
    const _g = openapi !== null && openapi !== void 0 ? openapi : {}, { param } = _g, restOfOpenApi = __rest(_g, ["param"]);
    const _internal = Object.assign(Object.assign({}, (_a2 = this._def.openapi) === null || _a2 === void 0 ? void 0 : _a2._internal), typeof refOrOpenapi === "string" ? { refId: refOrOpenapi } : void 0);
    const resultMetadata = Object.assign(Object.assign(Object.assign({}, (_b = this._def.openapi) === null || _b === void 0 ? void 0 : _b.metadata), restOfOpenApi), ((_d = (_c = this._def.openapi) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.param) || param ? {
      param: Object.assign(Object.assign({}, (_f = (_e = this._def.openapi) === null || _e === void 0 ? void 0 : _e.metadata) === null || _f === void 0 ? void 0 : _f.param), param)
    } : void 0);
    const result = new this.constructor(Object.assign(Object.assign({}, this._def), { openapi: Object.assign(Object.assign({}, Object.keys(_internal).length > 0 ? { _internal } : void 0), Object.keys(resultMetadata).length > 0 ? { metadata: resultMetadata } : void 0) }));
    if (isZodType(this, "ZodObject")) {
      const originalExtend = this.extend;
      result.extend = function(...args) {
        var _a3, _b2, _c2, _d2, _e2, _f2;
        const extendedResult = originalExtend.apply(this, args);
        extendedResult._def.openapi = {
          _internal: {
            extendedFrom: ((_b2 = (_a3 = this._def.openapi) === null || _a3 === void 0 ? void 0 : _a3._internal) === null || _b2 === void 0 ? void 0 : _b2.refId) ? { refId: (_d2 = (_c2 = this._def.openapi) === null || _c2 === void 0 ? void 0 : _c2._internal) === null || _d2 === void 0 ? void 0 : _d2.refId, schema: this } : (_e2 = this._def.openapi) === null || _e2 === void 0 ? void 0 : _e2._internal.extendedFrom
          },
          metadata: (_f2 = extendedResult._def.openapi) === null || _f2 === void 0 ? void 0 : _f2.metadata
        };
        return extendedResult;
      };
    }
    return result;
  };
  preserveMetadataFromModifier(zod, "optional");
  preserveMetadataFromModifier(zod, "nullable");
  preserveMetadataFromModifier(zod, "default");
  preserveMetadataFromModifier(zod, "transform");
  preserveMetadataFromModifier(zod, "refine");
  const zodDeepPartial = zod.ZodObject.prototype.deepPartial;
  zod.ZodObject.prototype.deepPartial = function() {
    const initialShape = this._def.shape();
    const result = zodDeepPartial.apply(this);
    const resultShape = result._def.shape();
    Object.entries(resultShape).forEach(([key, value]) => {
      var _a2, _b;
      value._def.openapi = (_b = (_a2 = initialShape[key]) === null || _a2 === void 0 ? void 0 : _a2._def) === null || _b === void 0 ? void 0 : _b.openapi;
    });
    result._def.openapi = void 0;
    return result;
  };
  const zodPick = zod.ZodObject.prototype.pick;
  zod.ZodObject.prototype.pick = function(...args) {
    const result = zodPick.apply(this, args);
    result._def.openapi = void 0;
    return result;
  };
  const zodOmit = zod.ZodObject.prototype.omit;
  zod.ZodObject.prototype.omit = function(...args) {
    const result = zodOmit.apply(this, args);
    result._def.openapi = void 0;
    return result;
  };
}
function isEqual(x, y2) {
  if (x === null || x === void 0 || y2 === null || y2 === void 0) {
    return x === y2;
  }
  if (x === y2 || x.valueOf() === y2.valueOf()) {
    return true;
  }
  if (Array.isArray(x)) {
    if (!Array.isArray(y2)) {
      return false;
    }
    if (x.length !== y2.length) {
      return false;
    }
  }
  if (!(x instanceof Object) || !(y2 instanceof Object)) {
    return false;
  }
  const keysX = Object.keys(x);
  return Object.keys(y2).every((keyY) => keysX.indexOf(keyY) !== -1) && keysX.every((key) => isEqual(x[key], y2[key]));
}
var ObjectSet = class {
  constructor() {
    this.buckets = /* @__PURE__ */ new Map();
  }
  put(value) {
    const hashCode = this.hashCodeOf(value);
    const itemsByCode = this.buckets.get(hashCode);
    if (!itemsByCode) {
      this.buckets.set(hashCode, [value]);
      return;
    }
    const alreadyHasItem = itemsByCode.some((_) => isEqual(_, value));
    if (!alreadyHasItem) {
      itemsByCode.push(value);
    }
  }
  contains(value) {
    const hashCode = this.hashCodeOf(value);
    const itemsByCode = this.buckets.get(hashCode);
    if (!itemsByCode) {
      return false;
    }
    return itemsByCode.some((_) => isEqual(_, value));
  }
  values() {
    return [...this.buckets.values()].flat();
  }
  stats() {
    let totalBuckets = 0;
    let totalValues = 0;
    let collisions = 0;
    for (const bucket of this.buckets.values()) {
      totalBuckets += 1;
      totalValues += bucket.length;
      if (bucket.length > 1) {
        collisions += 1;
      }
    }
    const hashEffectiveness = totalBuckets / totalValues;
    return { totalBuckets, collisions, totalValues, hashEffectiveness };
  }
  hashCodeOf(object) {
    let hashCode = 0;
    if (Array.isArray(object)) {
      for (let i2 = 0; i2 < object.length; i2++) {
        hashCode ^= this.hashCodeOf(object[i2]) * i2;
      }
      return hashCode;
    }
    if (typeof object === "string") {
      for (let i2 = 0; i2 < object.length; i2++) {
        hashCode ^= object.charCodeAt(i2) * i2;
      }
      return hashCode;
    }
    if (typeof object === "number") {
      return object;
    }
    if (typeof object === "object") {
      for (const [key, value] of Object.entries(object)) {
        hashCode ^= this.hashCodeOf(key) + this.hashCodeOf(value !== null && value !== void 0 ? value : "");
      }
    }
    return hashCode;
  }
};
function isNil(value) {
  return value === null || value === void 0;
}
function mapValues(object, mapper) {
  const result = {};
  Object.entries(object).forEach(([key, value]) => {
    result[key] = mapper(value);
  });
  return result;
}
function omit(object, keys) {
  const result = {};
  Object.entries(object).forEach(([key, value]) => {
    if (!keys.some((keyToOmit) => keyToOmit === key)) {
      result[key] = value;
    }
  });
  return result;
}
function omitBy(object, predicate) {
  const result = {};
  Object.entries(object).forEach(([key, value]) => {
    if (!predicate(value, key)) {
      result[key] = value;
    }
  });
  return result;
}
function compact(arr) {
  return arr.filter((elem) => !isNil(elem));
}
var objectEquals = isEqual;
function uniq(values) {
  const set = new ObjectSet();
  values.forEach((value) => set.put(value));
  return [...set.values()];
}
function isString(val) {
  return typeof val === "string";
}
var OpenAPIRegistry = class {
  constructor(parents) {
    this.parents = parents;
    this._definitions = [];
  }
  get definitions() {
    var _a2, _b;
    const parentDefinitions = (_b = (_a2 = this.parents) === null || _a2 === void 0 ? void 0 : _a2.flatMap((par) => par.definitions)) !== null && _b !== void 0 ? _b : [];
    return [...parentDefinitions, ...this._definitions];
  }
  /**
   * Registers a new component schema under /components/schemas/${name}
   */
  register(refId, zodSchema) {
    const schemaWithRefId = this.schemaWithRefId(refId, zodSchema);
    this._definitions.push({ type: "schema", schema: schemaWithRefId });
    return schemaWithRefId;
  }
  /**
   * Registers a new parameter schema under /components/parameters/${name}
   */
  registerParameter(refId, zodSchema) {
    var _a2, _b, _c;
    const schemaWithRefId = this.schemaWithRefId(refId, zodSchema);
    const currentMetadata = (_a2 = schemaWithRefId._def.openapi) === null || _a2 === void 0 ? void 0 : _a2.metadata;
    const schemaWithMetadata = schemaWithRefId.openapi(Object.assign(Object.assign({}, currentMetadata), { param: Object.assign(Object.assign({}, currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.param), { name: (_c = (_b = currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.param) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : refId }) }));
    this._definitions.push({
      type: "parameter",
      schema: schemaWithMetadata
    });
    return schemaWithMetadata;
  }
  /**
   * Registers a new path that would be generated under paths:
   */
  registerPath(route) {
    this._definitions.push({
      type: "route",
      route
    });
  }
  /**
   * Registers a new webhook that would be generated under webhooks:
   */
  registerWebhook(webhook) {
    this._definitions.push({
      type: "webhook",
      webhook
    });
  }
  /**
   * Registers a raw OpenAPI component. Use this if you have a simple object instead of a Zod schema.
   *
   * @param type The component type, e.g. `schemas`, `responses`, `securitySchemes`, etc.
   * @param name The name of the object, it is the key under the component
   *             type in the resulting OpenAPI document
   * @param component The actual object to put there
   */
  registerComponent(type, name, component) {
    this._definitions.push({
      type: "component",
      componentType: type,
      name,
      component
    });
    return {
      name,
      ref: { $ref: `#/components/${type}/${name}` }
    };
  }
  schemaWithRefId(refId, zodSchema) {
    return zodSchema.openapi(refId);
  }
};
var ZodToOpenAPIError = class {
  constructor(message) {
    this.message = message;
  }
};
var ConflictError = class extends ZodToOpenAPIError {
  constructor(message, data) {
    super(message);
    this.data = data;
  }
};
var MissingParameterDataError = class extends ZodToOpenAPIError {
  constructor(data) {
    super(`Missing parameter data, please specify \`${data.missingField}\` and other OpenAPI parameter props using the \`param\` field of \`ZodSchema.openapi\``);
    this.data = data;
  }
};
function enhanceMissingParametersError(action, paramsToAdd) {
  try {
    return action();
  } catch (error) {
    if (error instanceof MissingParameterDataError) {
      throw new MissingParameterDataError(Object.assign(Object.assign({}, error.data), paramsToAdd));
    }
    throw error;
  }
}
var UnknownZodTypeError = class extends ZodToOpenAPIError {
  constructor(data) {
    super(`Unknown zod object type, please specify \`type\` and other OpenAPI props using \`ZodSchema.openapi\`.`);
    this.data = data;
  }
};
var Metadata = class {
  static getMetadata(zodSchema) {
    var _a2;
    const innerSchema = this.unwrapChained(zodSchema);
    const metadata = zodSchema._def.openapi ? zodSchema._def.openapi : innerSchema._def.openapi;
    const zodDescription = (_a2 = zodSchema.description) !== null && _a2 !== void 0 ? _a2 : innerSchema.description;
    return {
      _internal: metadata === null || metadata === void 0 ? void 0 : metadata._internal,
      metadata: Object.assign({ description: zodDescription }, metadata === null || metadata === void 0 ? void 0 : metadata.metadata)
    };
  }
  static getInternalMetadata(zodSchema) {
    const innerSchema = this.unwrapChained(zodSchema);
    const openapi = zodSchema._def.openapi ? zodSchema._def.openapi : innerSchema._def.openapi;
    return openapi === null || openapi === void 0 ? void 0 : openapi._internal;
  }
  static getParamMetadata(zodSchema) {
    var _a2, _b;
    const innerSchema = this.unwrapChained(zodSchema);
    const metadata = zodSchema._def.openapi ? zodSchema._def.openapi : innerSchema._def.openapi;
    const zodDescription = (_a2 = zodSchema.description) !== null && _a2 !== void 0 ? _a2 : innerSchema.description;
    return {
      _internal: metadata === null || metadata === void 0 ? void 0 : metadata._internal,
      metadata: Object.assign(Object.assign({}, metadata === null || metadata === void 0 ? void 0 : metadata.metadata), {
        // A description provided from .openapi() should be taken with higher precedence
        param: Object.assign({ description: zodDescription }, (_b = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _b === void 0 ? void 0 : _b.param)
      })
    };
  }
  /**
   * A method that omits all custom keys added to the regular OpenAPI
   * metadata properties
   */
  static buildSchemaMetadata(metadata) {
    return omitBy(omit(metadata, ["param"]), isNil);
  }
  static buildParameterMetadata(metadata) {
    return omitBy(metadata, isNil);
  }
  static applySchemaMetadata(initialData, metadata) {
    return omitBy(Object.assign(Object.assign({}, initialData), this.buildSchemaMetadata(metadata)), isNil);
  }
  static getRefId(zodSchema) {
    var _a2;
    return (_a2 = this.getInternalMetadata(zodSchema)) === null || _a2 === void 0 ? void 0 : _a2.refId;
  }
  static unwrapChained(schema) {
    return this.unwrapUntil(schema);
  }
  static getDefaultValue(zodSchema) {
    const unwrapped = this.unwrapUntil(zodSchema, "ZodDefault");
    return unwrapped === null || unwrapped === void 0 ? void 0 : unwrapped._def.defaultValue();
  }
  static unwrapUntil(schema, typeName) {
    if (typeName && isZodType(schema, typeName)) {
      return schema;
    }
    if (isZodType(schema, "ZodOptional") || isZodType(schema, "ZodNullable") || isZodType(schema, "ZodBranded")) {
      return this.unwrapUntil(schema.unwrap(), typeName);
    }
    if (isZodType(schema, "ZodDefault") || isZodType(schema, "ZodReadonly")) {
      return this.unwrapUntil(schema._def.innerType, typeName);
    }
    if (isZodType(schema, "ZodEffects")) {
      return this.unwrapUntil(schema._def.schema, typeName);
    }
    if (isZodType(schema, "ZodPipeline")) {
      return this.unwrapUntil(schema._def.in, typeName);
    }
    return typeName ? void 0 : schema;
  }
  static isOptionalSchema(zodSchema) {
    if (isZodType(zodSchema, "ZodEffects")) {
      return this.isOptionalSchema(zodSchema._def.schema);
    }
    return zodSchema.isOptional();
  }
};
var ArrayTransformer = class {
  transform(zodSchema, mapNullableType, mapItems) {
    var _a2, _b;
    const itemType = zodSchema._def.type;
    return Object.assign(Object.assign({}, mapNullableType("array")), { items: mapItems(itemType), minItems: (_a2 = zodSchema._def.minLength) === null || _a2 === void 0 ? void 0 : _a2.value, maxItems: (_b = zodSchema._def.maxLength) === null || _b === void 0 ? void 0 : _b.value });
  }
};
var BigIntTransformer = class {
  transform(mapNullableType) {
    return Object.assign(Object.assign({}, mapNullableType("string")), { pattern: `^d+$` });
  }
};
var DiscriminatedUnionTransformer = class {
  transform(zodSchema, isNullable, mapNullableOfArray, mapItem, generateSchemaRef) {
    const options = [...zodSchema.options.values()];
    const optionSchema = options.map(mapItem);
    if (isNullable) {
      return {
        oneOf: mapNullableOfArray(optionSchema, isNullable)
      };
    }
    return {
      oneOf: optionSchema,
      discriminator: this.mapDiscriminator(options, zodSchema.discriminator, generateSchemaRef)
    };
  }
  mapDiscriminator(zodObjects, discriminator, generateSchemaRef) {
    if (zodObjects.some((obj) => Metadata.getRefId(obj) === void 0)) {
      return void 0;
    }
    const mapping = {};
    zodObjects.forEach((obj) => {
      var _a2;
      const refId = Metadata.getRefId(obj);
      const value = (_a2 = obj.shape) === null || _a2 === void 0 ? void 0 : _a2[discriminator];
      if (isZodType(value, "ZodEnum") || isZodType(value, "ZodNativeEnum")) {
        const keys = Object.values(value.enum).filter(isString);
        keys.forEach((enumValue) => {
          mapping[enumValue] = generateSchemaRef(refId);
        });
        return;
      }
      const literalValue = value === null || value === void 0 ? void 0 : value._def.value;
      if (typeof literalValue !== "string") {
        throw new Error(`Discriminator ${discriminator} could not be found in one of the values of a discriminated union`);
      }
      mapping[literalValue] = generateSchemaRef(refId);
    });
    return {
      propertyName: discriminator,
      mapping
    };
  }
};
var EnumTransformer = class {
  transform(zodSchema, mapNullableType) {
    return Object.assign(Object.assign({}, mapNullableType("string")), { enum: zodSchema._def.values });
  }
};
var IntersectionTransformer = class {
  transform(zodSchema, isNullable, mapNullableOfArray, mapItem) {
    const subtypes = this.flattenIntersectionTypes(zodSchema);
    const allOfSchema = {
      allOf: subtypes.map(mapItem)
    };
    if (isNullable) {
      return {
        anyOf: mapNullableOfArray([allOfSchema], isNullable)
      };
    }
    return allOfSchema;
  }
  flattenIntersectionTypes(schema) {
    if (!isZodType(schema, "ZodIntersection")) {
      return [schema];
    }
    const leftSubTypes = this.flattenIntersectionTypes(schema._def.left);
    const rightSubTypes = this.flattenIntersectionTypes(schema._def.right);
    return [...leftSubTypes, ...rightSubTypes];
  }
};
var LiteralTransformer = class {
  transform(zodSchema, mapNullableType) {
    return Object.assign(Object.assign({}, mapNullableType(typeof zodSchema._def.value)), { enum: [zodSchema._def.value] });
  }
};
function enumInfo(enumObject) {
  const keysExceptReverseMappings = Object.keys(enumObject).filter((key) => typeof enumObject[enumObject[key]] !== "number");
  const values = keysExceptReverseMappings.map((key) => enumObject[key]);
  const numericCount = values.filter((_) => typeof _ === "number").length;
  const type = numericCount === 0 ? "string" : numericCount === values.length ? "numeric" : "mixed";
  return { values, type };
}
var NativeEnumTransformer = class {
  transform(zodSchema, mapNullableType) {
    const { type, values } = enumInfo(zodSchema._def.values);
    if (type === "mixed") {
      throw new ZodToOpenAPIError("Enum has mixed string and number values, please specify the OpenAPI type manually");
    }
    return Object.assign(Object.assign({}, mapNullableType(type === "numeric" ? "integer" : "string")), { enum: values });
  }
};
var NumberTransformer = class {
  transform(zodSchema, mapNullableType, getNumberChecks) {
    return Object.assign(Object.assign({}, mapNullableType(zodSchema.isInt ? "integer" : "number")), getNumberChecks(zodSchema._def.checks));
  }
};
var ObjectTransformer = class {
  transform(zodSchema, defaultValue, mapNullableType, mapItem) {
    var _a2;
    const extendedFrom = (_a2 = Metadata.getInternalMetadata(zodSchema)) === null || _a2 === void 0 ? void 0 : _a2.extendedFrom;
    const required = this.requiredKeysOf(zodSchema);
    const properties = mapValues(zodSchema._def.shape(), mapItem);
    if (!extendedFrom) {
      return Object.assign(Object.assign(Object.assign(Object.assign({}, mapNullableType("object")), { properties, default: defaultValue }), required.length > 0 ? { required } : {}), this.generateAdditionalProperties(zodSchema, mapItem));
    }
    const parent = extendedFrom.schema;
    mapItem(parent);
    const keysRequiredByParent = this.requiredKeysOf(parent);
    const propsOfParent = mapValues(parent === null || parent === void 0 ? void 0 : parent._def.shape(), mapItem);
    const propertiesToAdd = Object.fromEntries(Object.entries(properties).filter(([key, type]) => {
      return !objectEquals(propsOfParent[key], type);
    }));
    const additionallyRequired = required.filter((prop) => !keysRequiredByParent.includes(prop));
    const objectData = Object.assign(Object.assign(Object.assign(Object.assign({}, mapNullableType("object")), { default: defaultValue, properties: propertiesToAdd }), additionallyRequired.length > 0 ? { required: additionallyRequired } : {}), this.generateAdditionalProperties(zodSchema, mapItem));
    return {
      allOf: [
        { $ref: `#/components/schemas/${extendedFrom.refId}` },
        objectData
      ]
    };
  }
  generateAdditionalProperties(zodSchema, mapItem) {
    const unknownKeysOption = zodSchema._def.unknownKeys;
    const catchallSchema = zodSchema._def.catchall;
    if (isZodType(catchallSchema, "ZodNever")) {
      if (unknownKeysOption === "strict") {
        return { additionalProperties: false };
      }
      return {};
    }
    return { additionalProperties: mapItem(catchallSchema) };
  }
  requiredKeysOf(objectSchema) {
    return Object.entries(objectSchema._def.shape()).filter(([_key, type]) => !Metadata.isOptionalSchema(type)).map(([key, _type]) => key);
  }
};
var RecordTransformer = class {
  transform(zodSchema, mapNullableType, mapItem) {
    const propertiesType = zodSchema._def.valueType;
    const keyType = zodSchema._def.keyType;
    const propertiesSchema = mapItem(propertiesType);
    if (isZodType(keyType, "ZodEnum") || isZodType(keyType, "ZodNativeEnum")) {
      const keys = Object.values(keyType.enum).filter(isString);
      const properties = keys.reduce((acc, curr) => Object.assign(Object.assign({}, acc), { [curr]: propertiesSchema }), {});
      return Object.assign(Object.assign({}, mapNullableType("object")), { properties });
    }
    return Object.assign(Object.assign({}, mapNullableType("object")), { additionalProperties: propertiesSchema });
  }
};
var StringTransformer = class {
  transform(zodSchema, mapNullableType) {
    var _a2, _b, _c;
    const regexCheck = this.getZodStringCheck(zodSchema, "regex");
    const length = (_a2 = this.getZodStringCheck(zodSchema, "length")) === null || _a2 === void 0 ? void 0 : _a2.value;
    const maxLength = Number.isFinite(zodSchema.minLength) ? (_b = zodSchema.minLength) !== null && _b !== void 0 ? _b : void 0 : void 0;
    const minLength = Number.isFinite(zodSchema.maxLength) ? (_c = zodSchema.maxLength) !== null && _c !== void 0 ? _c : void 0 : void 0;
    return Object.assign(Object.assign({}, mapNullableType("string")), {
      // FIXME: https://github.com/colinhacks/zod/commit/d78047e9f44596a96d637abb0ce209cd2732d88c
      minLength: length !== null && length !== void 0 ? length : maxLength,
      maxLength: length !== null && length !== void 0 ? length : minLength,
      format: this.mapStringFormat(zodSchema),
      pattern: regexCheck === null || regexCheck === void 0 ? void 0 : regexCheck.regex.source
    });
  }
  /**
   * Attempts to map Zod strings to known formats
   * https://json-schema.org/understanding-json-schema/reference/string.html#built-in-formats
   */
  mapStringFormat(zodString) {
    if (zodString.isUUID) {
      return "uuid";
    }
    if (zodString.isEmail) {
      return "email";
    }
    if (zodString.isURL) {
      return "uri";
    }
    if (zodString.isDatetime) {
      return "date-time";
    }
    return void 0;
  }
  getZodStringCheck(zodString, kind) {
    return zodString._def.checks.find((check) => {
      return check.kind === kind;
    });
  }
};
var TupleTransformer = class {
  constructor(versionSpecifics) {
    this.versionSpecifics = versionSpecifics;
  }
  transform(zodSchema, mapNullableType, mapItem) {
    const { items } = zodSchema._def;
    const schemas = items.map(mapItem);
    return Object.assign(Object.assign({}, mapNullableType("array")), this.versionSpecifics.mapTupleItems(schemas));
  }
};
var UnionTransformer = class {
  transform(zodSchema, mapNullableOfArray, mapItem) {
    const options = this.flattenUnionTypes(zodSchema);
    const schemas = options.map((schema) => {
      const optionToGenerate = this.unwrapNullable(schema);
      return mapItem(optionToGenerate);
    });
    return {
      anyOf: mapNullableOfArray(schemas)
    };
  }
  flattenUnionTypes(schema) {
    if (!isZodType(schema, "ZodUnion")) {
      return [schema];
    }
    const options = schema._def.options;
    return options.flatMap((option) => this.flattenUnionTypes(option));
  }
  unwrapNullable(schema) {
    if (isZodType(schema, "ZodNullable")) {
      return this.unwrapNullable(schema.unwrap());
    }
    return schema;
  }
};
var OpenApiTransformer = class {
  constructor(versionSpecifics) {
    this.versionSpecifics = versionSpecifics;
    this.objectTransformer = new ObjectTransformer();
    this.stringTransformer = new StringTransformer();
    this.numberTransformer = new NumberTransformer();
    this.bigIntTransformer = new BigIntTransformer();
    this.literalTransformer = new LiteralTransformer();
    this.enumTransformer = new EnumTransformer();
    this.nativeEnumTransformer = new NativeEnumTransformer();
    this.arrayTransformer = new ArrayTransformer();
    this.unionTransformer = new UnionTransformer();
    this.discriminatedUnionTransformer = new DiscriminatedUnionTransformer();
    this.intersectionTransformer = new IntersectionTransformer();
    this.recordTransformer = new RecordTransformer();
    this.tupleTransformer = new TupleTransformer(versionSpecifics);
  }
  transform(zodSchema, isNullable, mapItem, generateSchemaRef, defaultValue) {
    if (isZodType(zodSchema, "ZodNull")) {
      return this.versionSpecifics.nullType;
    }
    if (isZodType(zodSchema, "ZodUnknown") || isZodType(zodSchema, "ZodAny")) {
      return this.versionSpecifics.mapNullableType(void 0, isNullable);
    }
    if (isZodType(zodSchema, "ZodObject")) {
      return this.objectTransformer.transform(
        zodSchema,
        defaultValue,
        // verified on TS level from input
        // verified on TS level from input
        (_) => this.versionSpecifics.mapNullableType(_, isNullable),
        mapItem
      );
    }
    const schema = this.transformSchemaWithoutDefault(zodSchema, isNullable, mapItem, generateSchemaRef);
    return Object.assign(Object.assign({}, schema), { default: defaultValue });
  }
  transformSchemaWithoutDefault(zodSchema, isNullable, mapItem, generateSchemaRef) {
    if (isZodType(zodSchema, "ZodUnknown") || isZodType(zodSchema, "ZodAny")) {
      return this.versionSpecifics.mapNullableType(void 0, isNullable);
    }
    if (isZodType(zodSchema, "ZodString")) {
      return this.stringTransformer.transform(zodSchema, (schema) => this.versionSpecifics.mapNullableType(schema, isNullable));
    }
    if (isZodType(zodSchema, "ZodNumber")) {
      return this.numberTransformer.transform(zodSchema, (schema) => this.versionSpecifics.mapNullableType(schema, isNullable), (_) => this.versionSpecifics.getNumberChecks(_));
    }
    if (isZodType(zodSchema, "ZodBigInt")) {
      return this.bigIntTransformer.transform((schema) => this.versionSpecifics.mapNullableType(schema, isNullable));
    }
    if (isZodType(zodSchema, "ZodBoolean")) {
      return this.versionSpecifics.mapNullableType("boolean", isNullable);
    }
    if (isZodType(zodSchema, "ZodLiteral")) {
      return this.literalTransformer.transform(zodSchema, (schema) => this.versionSpecifics.mapNullableType(schema, isNullable));
    }
    if (isZodType(zodSchema, "ZodEnum")) {
      return this.enumTransformer.transform(zodSchema, (schema) => this.versionSpecifics.mapNullableType(schema, isNullable));
    }
    if (isZodType(zodSchema, "ZodNativeEnum")) {
      return this.nativeEnumTransformer.transform(zodSchema, (schema) => this.versionSpecifics.mapNullableType(schema, isNullable));
    }
    if (isZodType(zodSchema, "ZodArray")) {
      return this.arrayTransformer.transform(zodSchema, (_) => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);
    }
    if (isZodType(zodSchema, "ZodTuple")) {
      return this.tupleTransformer.transform(zodSchema, (_) => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);
    }
    if (isZodType(zodSchema, "ZodUnion")) {
      return this.unionTransformer.transform(zodSchema, (_) => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem);
    }
    if (isZodType(zodSchema, "ZodDiscriminatedUnion")) {
      return this.discriminatedUnionTransformer.transform(zodSchema, isNullable, (_) => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem, generateSchemaRef);
    }
    if (isZodType(zodSchema, "ZodIntersection")) {
      return this.intersectionTransformer.transform(zodSchema, isNullable, (_) => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem);
    }
    if (isZodType(zodSchema, "ZodRecord")) {
      return this.recordTransformer.transform(zodSchema, (_) => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);
    }
    if (isZodType(zodSchema, "ZodDate")) {
      return this.versionSpecifics.mapNullableType("string", isNullable);
    }
    const refId = Metadata.getRefId(zodSchema);
    throw new UnknownZodTypeError({
      currentSchema: zodSchema._def,
      schemaName: refId
    });
  }
};
var OpenAPIGenerator = class {
  constructor(definitions, versionSpecifics) {
    this.definitions = definitions;
    this.versionSpecifics = versionSpecifics;
    this.schemaRefs = {};
    this.paramRefs = {};
    this.pathRefs = {};
    this.rawComponents = [];
    this.openApiTransformer = new OpenApiTransformer(versionSpecifics);
    this.sortDefinitions();
  }
  generateDocumentData() {
    this.definitions.forEach((definition) => this.generateSingle(definition));
    return {
      components: this.buildComponents(),
      paths: this.pathRefs
    };
  }
  generateComponents() {
    this.definitions.forEach((definition) => this.generateSingle(definition));
    return {
      components: this.buildComponents()
    };
  }
  buildComponents() {
    var _a2, _b;
    const rawComponents = {};
    this.rawComponents.forEach(({ componentType, name, component }) => {
      var _a3;
      (_a3 = rawComponents[componentType]) !== null && _a3 !== void 0 ? _a3 : rawComponents[componentType] = {};
      rawComponents[componentType][name] = component;
    });
    return Object.assign(Object.assign({}, rawComponents), { schemas: Object.assign(Object.assign({}, (_a2 = rawComponents.schemas) !== null && _a2 !== void 0 ? _a2 : {}), this.schemaRefs), parameters: Object.assign(Object.assign({}, (_b = rawComponents.parameters) !== null && _b !== void 0 ? _b : {}), this.paramRefs) });
  }
  sortDefinitions() {
    const generationOrder = [
      "schema",
      "parameter",
      "component",
      "route"
    ];
    this.definitions.sort((left, right) => {
      if (!("type" in left)) {
        if (!("type" in right)) {
          return 0;
        }
        return -1;
      }
      if (!("type" in right)) {
        return 1;
      }
      const leftIndex = generationOrder.findIndex((type) => type === left.type);
      const rightIndex = generationOrder.findIndex((type) => type === right.type);
      return leftIndex - rightIndex;
    });
  }
  generateSingle(definition) {
    if (!("type" in definition)) {
      this.generateSchemaWithRef(definition);
      return;
    }
    switch (definition.type) {
      case "parameter":
        this.generateParameterDefinition(definition.schema);
        return;
      case "schema":
        this.generateSchemaWithRef(definition.schema);
        return;
      case "route":
        this.generateSingleRoute(definition.route);
        return;
      case "component":
        this.rawComponents.push(definition);
        return;
    }
  }
  generateParameterDefinition(zodSchema) {
    const refId = Metadata.getRefId(zodSchema);
    const result = this.generateParameter(zodSchema);
    if (refId) {
      this.paramRefs[refId] = result;
    }
    return result;
  }
  getParameterRef(schemaMetadata, external) {
    var _a2, _b, _c, _d, _e;
    const parameterMetadata = (_a2 = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata.metadata) === null || _a2 === void 0 ? void 0 : _a2.param;
    const existingRef = ((_b = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata._internal) === null || _b === void 0 ? void 0 : _b.refId) ? this.paramRefs[(_c = schemaMetadata._internal) === null || _c === void 0 ? void 0 : _c.refId] : void 0;
    if (!((_d = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata._internal) === null || _d === void 0 ? void 0 : _d.refId) || !existingRef) {
      return void 0;
    }
    if (parameterMetadata && existingRef.in !== parameterMetadata.in || (external === null || external === void 0 ? void 0 : external.in) && existingRef.in !== external.in) {
      throw new ConflictError(`Conflicting location for parameter ${existingRef.name}`, {
        key: "in",
        values: compact([
          existingRef.in,
          external === null || external === void 0 ? void 0 : external.in,
          parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.in
        ])
      });
    }
    if (parameterMetadata && existingRef.name !== parameterMetadata.name || (external === null || external === void 0 ? void 0 : external.name) && existingRef.name !== (external === null || external === void 0 ? void 0 : external.name)) {
      throw new ConflictError(`Conflicting names for parameter`, {
        key: "name",
        values: compact([
          existingRef.name,
          external === null || external === void 0 ? void 0 : external.name,
          parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.name
        ])
      });
    }
    return {
      $ref: `#/components/parameters/${(_e = schemaMetadata._internal) === null || _e === void 0 ? void 0 : _e.refId}`
    };
  }
  generateInlineParameters(zodSchema, location) {
    var _a2;
    const metadata = Metadata.getMetadata(zodSchema);
    const parameterMetadata = (_a2 = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a2 === void 0 ? void 0 : _a2.param;
    const referencedSchema = this.getParameterRef(metadata, { in: location });
    if (referencedSchema) {
      return [referencedSchema];
    }
    if (isZodType(zodSchema, "ZodObject")) {
      const propTypes = zodSchema._def.shape();
      const parameters = Object.entries(propTypes).map(([key, schema]) => {
        var _a3, _b;
        const innerMetadata = Metadata.getMetadata(schema);
        const referencedSchema2 = this.getParameterRef(innerMetadata, {
          in: location,
          name: key
        });
        if (referencedSchema2) {
          return referencedSchema2;
        }
        const innerParameterMetadata = (_a3 = innerMetadata === null || innerMetadata === void 0 ? void 0 : innerMetadata.metadata) === null || _a3 === void 0 ? void 0 : _a3.param;
        if ((innerParameterMetadata === null || innerParameterMetadata === void 0 ? void 0 : innerParameterMetadata.name) && innerParameterMetadata.name !== key) {
          throw new ConflictError(`Conflicting names for parameter`, {
            key: "name",
            values: [key, innerParameterMetadata.name]
          });
        }
        if ((innerParameterMetadata === null || innerParameterMetadata === void 0 ? void 0 : innerParameterMetadata.in) && innerParameterMetadata.in !== location) {
          throw new ConflictError(`Conflicting location for parameter ${(_b = innerParameterMetadata.name) !== null && _b !== void 0 ? _b : key}`, {
            key: "in",
            values: [location, innerParameterMetadata.in]
          });
        }
        return this.generateParameter(schema.openapi({ param: { name: key, in: location } }));
      });
      return parameters;
    }
    if ((parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.in) && parameterMetadata.in !== location) {
      throw new ConflictError(`Conflicting location for parameter ${parameterMetadata.name}`, {
        key: "in",
        values: [location, parameterMetadata.in]
      });
    }
    return [
      this.generateParameter(zodSchema.openapi({ param: { in: location } }))
    ];
  }
  generateSimpleParameter(zodSchema) {
    var _a2;
    const metadata = Metadata.getParamMetadata(zodSchema);
    const paramMetadata = (_a2 = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a2 === void 0 ? void 0 : _a2.param;
    const required = !Metadata.isOptionalSchema(zodSchema) && !zodSchema.isNullable();
    const schema = this.generateSchemaWithRef(zodSchema);
    return Object.assign({
      schema,
      required
    }, paramMetadata ? Metadata.buildParameterMetadata(paramMetadata) : {});
  }
  generateParameter(zodSchema) {
    var _a2;
    const metadata = Metadata.getMetadata(zodSchema);
    const paramMetadata = (_a2 = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a2 === void 0 ? void 0 : _a2.param;
    const paramName = paramMetadata === null || paramMetadata === void 0 ? void 0 : paramMetadata.name;
    const paramLocation = paramMetadata === null || paramMetadata === void 0 ? void 0 : paramMetadata.in;
    if (!paramName) {
      throw new MissingParameterDataError({ missingField: "name" });
    }
    if (!paramLocation) {
      throw new MissingParameterDataError({
        missingField: "in",
        paramName
      });
    }
    const baseParameter = this.generateSimpleParameter(zodSchema);
    return Object.assign(Object.assign({}, baseParameter), { in: paramLocation, name: paramName });
  }
  generateSchemaWithMetadata(zodSchema) {
    var _a2;
    const innerSchema = Metadata.unwrapChained(zodSchema);
    const metadata = Metadata.getMetadata(zodSchema);
    const defaultValue = Metadata.getDefaultValue(zodSchema);
    const result = ((_a2 = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a2 === void 0 ? void 0 : _a2.type) ? { type: metadata === null || metadata === void 0 ? void 0 : metadata.metadata.type } : this.toOpenAPISchema(innerSchema, zodSchema.isNullable(), defaultValue);
    return (metadata === null || metadata === void 0 ? void 0 : metadata.metadata) ? Metadata.applySchemaMetadata(result, metadata.metadata) : omitBy(result, isNil);
  }
  /**
   * Same as above but applies nullable
   */
  constructReferencedOpenAPISchema(zodSchema) {
    var _a2;
    const metadata = Metadata.getMetadata(zodSchema);
    const innerSchema = Metadata.unwrapChained(zodSchema);
    const defaultValue = Metadata.getDefaultValue(zodSchema);
    const isNullableSchema = zodSchema.isNullable();
    if ((_a2 = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a2 === void 0 ? void 0 : _a2.type) {
      return this.versionSpecifics.mapNullableType(metadata.metadata.type, isNullableSchema);
    }
    return this.toOpenAPISchema(innerSchema, isNullableSchema, defaultValue);
  }
  /**
   * Generates an OpenAPI SchemaObject or a ReferenceObject with all the provided metadata applied
   */
  generateSimpleSchema(zodSchema) {
    var _a2;
    const metadata = Metadata.getMetadata(zodSchema);
    const refId = Metadata.getRefId(zodSchema);
    if (!refId || !this.schemaRefs[refId]) {
      return this.generateSchemaWithMetadata(zodSchema);
    }
    const schemaRef = this.schemaRefs[refId];
    const referenceObject = {
      $ref: this.generateSchemaRef(refId)
    };
    const newMetadata = omitBy(Metadata.buildSchemaMetadata((_a2 = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) !== null && _a2 !== void 0 ? _a2 : {}), (value, key) => value === void 0 || objectEquals(value, schemaRef[key]));
    if (newMetadata.type) {
      return {
        allOf: [referenceObject, newMetadata]
      };
    }
    const newSchemaMetadata = omitBy(this.constructReferencedOpenAPISchema(zodSchema), (value, key) => value === void 0 || objectEquals(value, schemaRef[key]));
    const appliedMetadata = Metadata.applySchemaMetadata(newSchemaMetadata, newMetadata);
    if (Object.keys(appliedMetadata).length > 0) {
      return {
        allOf: [referenceObject, appliedMetadata]
      };
    }
    return referenceObject;
  }
  /**
   * Same as `generateSchema` but if the new schema is added into the
   * referenced schemas, it would return a ReferenceObject and not the
   * whole result.
   *
   * Should be used for nested objects, arrays, etc.
   */
  generateSchemaWithRef(zodSchema) {
    const refId = Metadata.getRefId(zodSchema);
    const result = this.generateSimpleSchema(zodSchema);
    if (refId && this.schemaRefs[refId] === void 0) {
      this.schemaRefs[refId] = result;
      return { $ref: this.generateSchemaRef(refId) };
    }
    return result;
  }
  generateSchemaRef(refId) {
    return `#/components/schemas/${refId}`;
  }
  getRequestBody(requestBody) {
    if (!requestBody) {
      return;
    }
    const { content } = requestBody, rest = __rest(requestBody, ["content"]);
    const requestBodyContent = this.getBodyContent(content);
    return Object.assign(Object.assign({}, rest), { content: requestBodyContent });
  }
  getParameters(request) {
    if (!request) {
      return [];
    }
    const { headers } = request;
    const query = this.cleanParameter(request.query);
    const params = this.cleanParameter(request.params);
    const cookies = this.cleanParameter(request.cookies);
    const queryParameters = enhanceMissingParametersError(() => query ? this.generateInlineParameters(query, "query") : [], { location: "query" });
    const pathParameters = enhanceMissingParametersError(() => params ? this.generateInlineParameters(params, "path") : [], { location: "path" });
    const cookieParameters = enhanceMissingParametersError(() => cookies ? this.generateInlineParameters(cookies, "cookie") : [], { location: "cookie" });
    const headerParameters = enhanceMissingParametersError(() => {
      if (Array.isArray(headers)) {
        return headers.flatMap((header) => this.generateInlineParameters(header, "header"));
      }
      const cleanHeaders = this.cleanParameter(headers);
      return cleanHeaders ? this.generateInlineParameters(cleanHeaders, "header") : [];
    }, { location: "header" });
    return [
      ...pathParameters,
      ...queryParameters,
      ...headerParameters,
      ...cookieParameters
    ];
  }
  cleanParameter(schema) {
    if (!schema) {
      return void 0;
    }
    return isZodType(schema, "ZodEffects") ? this.cleanParameter(schema._def.schema) : schema;
  }
  generatePath(route) {
    const { method, path, request, responses } = route, pathItemConfig = __rest(route, ["method", "path", "request", "responses"]);
    const generatedResponses = mapValues(responses, (response) => {
      return this.getResponse(response);
    });
    const parameters = enhanceMissingParametersError(() => this.getParameters(request), { route: `${method} ${path}` });
    const requestBody = this.getRequestBody(request === null || request === void 0 ? void 0 : request.body);
    const routeDoc = {
      [method]: Object.assign(Object.assign(Object.assign(Object.assign({}, pathItemConfig), parameters.length > 0 ? {
        parameters: [...pathItemConfig.parameters || [], ...parameters]
      } : {}), requestBody ? { requestBody } : {}), { responses: generatedResponses })
    };
    return routeDoc;
  }
  generateSingleRoute(route) {
    const routeDoc = this.generatePath(route);
    this.pathRefs[route.path] = Object.assign(Object.assign({}, this.pathRefs[route.path]), routeDoc);
    return routeDoc;
  }
  getResponse(_a2) {
    var { content, headers } = _a2, rest = __rest(_a2, ["content", "headers"]);
    const responseContent = content ? { content: this.getBodyContent(content) } : {};
    if (!headers) {
      return Object.assign(Object.assign({}, rest), responseContent);
    }
    const responseHeaders = isZodType(headers, "ZodObject") ? this.getResponseHeaders(headers) : (
      // This is input data so it is okay to cast in the common generator
      // since this is the user's responsibility to keep it correct
      headers
    );
    return Object.assign(Object.assign(Object.assign({}, rest), { headers: responseHeaders }), responseContent);
  }
  getResponseHeaders(headers) {
    const schemaShape = headers._def.shape();
    const responseHeaders = mapValues(schemaShape, (_) => this.generateSimpleParameter(_));
    return responseHeaders;
  }
  getBodyContent(content) {
    return mapValues(content, (config) => {
      if (!config || !isAnyZodType(config.schema)) {
        return config;
      }
      const { schema: configSchema } = config, rest = __rest(config, ["schema"]);
      const schema = this.generateSchemaWithRef(configSchema);
      return Object.assign({ schema }, rest);
    });
  }
  toOpenAPISchema(zodSchema, isNullable, defaultValue) {
    return this.openApiTransformer.transform(zodSchema, isNullable, (_) => this.generateSchemaWithRef(_), (_) => this.generateSchemaRef(_), defaultValue);
  }
};
var OpenApiGeneratorV30Specifics = class {
  get nullType() {
    return { nullable: true };
  }
  mapNullableOfArray(objects, isNullable) {
    if (isNullable) {
      return [...objects, this.nullType];
    }
    return objects;
  }
  mapNullableType(type, isNullable) {
    return Object.assign(Object.assign({}, type ? { type } : void 0), isNullable ? this.nullType : void 0);
  }
  mapTupleItems(schemas) {
    const uniqueSchemas = uniq(schemas);
    return {
      items: uniqueSchemas.length === 1 ? uniqueSchemas[0] : { anyOf: uniqueSchemas },
      minItems: schemas.length,
      maxItems: schemas.length
    };
  }
  getNumberChecks(checks) {
    return Object.assign({}, ...checks.map((check) => {
      switch (check.kind) {
        case "min":
          return check.inclusive ? { minimum: Number(check.value) } : { minimum: Number(check.value), exclusiveMinimum: true };
        case "max":
          return check.inclusive ? { maximum: Number(check.value) } : { maximum: Number(check.value), exclusiveMaximum: true };
        default:
          return {};
      }
    }));
  }
};
var OpenApiGeneratorV3 = class {
  constructor(definitions) {
    const specifics = new OpenApiGeneratorV30Specifics();
    this.generator = new OpenAPIGenerator(definitions, specifics);
  }
  generateDocument(config) {
    const baseData = this.generator.generateDocumentData();
    return Object.assign(Object.assign({}, config), baseData);
  }
  generateComponents() {
    return this.generator.generateComponents();
  }
};
var OpenApiGeneratorV31Specifics = class {
  get nullType() {
    return { type: "null" };
  }
  mapNullableOfArray(objects, isNullable) {
    if (isNullable) {
      return [...objects, this.nullType];
    }
    return objects;
  }
  mapNullableType(type, isNullable) {
    if (!type) {
      return {};
    }
    if (isNullable) {
      return {
        type: Array.isArray(type) ? [...type, "null"] : [type, "null"]
      };
    }
    return {
      type
    };
  }
  mapTupleItems(schemas) {
    return {
      prefixItems: schemas
    };
  }
  getNumberChecks(checks) {
    return Object.assign({}, ...checks.map((check) => {
      switch (check.kind) {
        case "min":
          return check.inclusive ? { minimum: Number(check.value) } : { exclusiveMinimum: Number(check.value) };
        case "max":
          return check.inclusive ? { maximum: Number(check.value) } : { exclusiveMaximum: Number(check.value) };
        default:
          return {};
      }
    }));
  }
};
function isWebhookDefinition(definition) {
  return "type" in definition && definition.type === "webhook";
}
var OpenApiGeneratorV31 = class {
  constructor(definitions) {
    this.definitions = definitions;
    this.webhookRefs = {};
    const specifics = new OpenApiGeneratorV31Specifics();
    this.generator = new OpenAPIGenerator(this.definitions, specifics);
  }
  generateDocument(config) {
    const baseDocument = this.generator.generateDocumentData();
    this.definitions.filter(isWebhookDefinition).forEach((definition) => this.generateSingleWebhook(definition.webhook));
    return Object.assign(Object.assign(Object.assign({}, config), baseDocument), { webhooks: this.webhookRefs });
  }
  generateComponents() {
    return this.generator.generateComponents();
  }
  generateSingleWebhook(route) {
    const routeDoc = this.generator.generatePath(route);
    this.webhookRefs[route.path] = Object.assign(Object.assign({}, this.webhookRefs[route.path]), routeDoc);
    return routeDoc;
  }
};

// ../../node_modules/@hono/zod-validator/dist/esm/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/validator/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/validator/validator.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/helper/cookie/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/cookie.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/url.js
init_checked_fetch();
init_modules_watch_stub();
var splitPath = (path) => {
  const paths = path.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
};
var splitRoutingPath = (routePath) => {
  const { groups, path } = extractGroupsFromPath(routePath);
  const paths = splitPath(path);
  return replaceGroupMarks(paths, groups);
};
var extractGroupsFromPath = (path) => {
  const groups = [];
  path = path.replace(/\{[^}]+\}/g, (match, index) => {
    const mark = `@${index}`;
    groups.push([mark, match]);
    return mark;
  });
  return { groups, path };
};
var replaceGroupMarks = (paths, groups) => {
  for (let i2 = groups.length - 1; i2 >= 0; i2--) {
    const [mark] = groups[i2];
    for (let j = paths.length - 1; j >= 0; j--) {
      if (paths[j].includes(mark)) {
        paths[j] = paths[j].replace(mark, groups[i2][1]);
        break;
      }
    }
  }
  return paths;
};
var patternCache = {};
var getPattern = (label) => {
  if (label === "*") {
    return "*";
  }
  const match = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match) {
    if (!patternCache[label]) {
      if (match[2]) {
        patternCache[label] = [label, match[1], new RegExp("^" + match[2] + "$")];
      } else {
        patternCache[label] = [label, match[1], true];
      }
    }
    return patternCache[label];
  }
  return null;
};
var tryDecodeURI = (str) => {
  try {
    return decodeURI(str);
  } catch {
    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {
      try {
        return decodeURI(match);
      } catch {
        return match;
      }
    });
  }
};
var getPath = (request) => {
  const url = request.url;
  const start = url.indexOf("/", 8);
  let i2 = start;
  for (; i2 < url.length; i2++) {
    const charCode = url.charCodeAt(i2);
    if (charCode === 37) {
      const queryIndex = url.indexOf("?", i2);
      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);
      return tryDecodeURI(path.includes("%25") ? path.replace(/%25/g, "%2525") : path);
    } else if (charCode === 63) {
      break;
    }
  }
  return url.slice(start, i2);
};
var getPathNoStrict = (request) => {
  const result = getPath(request);
  return result.length > 1 && result[result.length - 1] === "/" ? result.slice(0, -1) : result;
};
var mergePath = (...paths) => {
  let p2 = "";
  let endsWithSlash = false;
  for (let path of paths) {
    if (p2[p2.length - 1] === "/") {
      p2 = p2.slice(0, -1);
      endsWithSlash = true;
    }
    if (path[0] !== "/") {
      path = `/${path}`;
    }
    if (path === "/" && endsWithSlash) {
      p2 = `${p2}/`;
    } else if (path !== "/") {
      p2 = `${p2}${path}`;
    }
    if (path === "/" && p2 === "") {
      p2 = "/";
    }
  }
  return p2;
};
var checkOptionalParameter = (path) => {
  if (!path.match(/\:.+\?$/)) {
    return null;
  }
  const segments = path.split("/");
  const results = [];
  let basePath = "";
  segments.forEach((segment) => {
    if (segment !== "" && !/\:/.test(segment)) {
      basePath += "/" + segment;
    } else if (/\:/.test(segment)) {
      if (/\?/.test(segment)) {
        if (results.length === 0 && basePath === "") {
          results.push("/");
        } else {
          results.push(basePath);
        }
        const optionalSegment = segment.replace("?", "");
        basePath += "/" + optionalSegment;
        results.push(basePath);
      } else {
        basePath += "/" + segment;
      }
    }
  });
  return results.filter((v2, i2, a2) => a2.indexOf(v2) === i2);
};
var _decodeURI = (value) => {
  if (!/[%+]/.test(value)) {
    return value;
  }
  if (value.indexOf("+") !== -1) {
    value = value.replace(/\+/g, " ");
  }
  return /%/.test(value) ? decodeURIComponent_(value) : value;
};
var _getQueryParam = (url, key, multiple) => {
  let encoded;
  if (!multiple && key && !/[%+]/.test(key)) {
    let keyIndex2 = url.indexOf(`?${key}`, 8);
    if (keyIndex2 === -1) {
      keyIndex2 = url.indexOf(`&${key}`, 8);
    }
    while (keyIndex2 !== -1) {
      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);
      if (trailingKeyCode === 61) {
        const valueIndex = keyIndex2 + key.length + 2;
        const endIndex = url.indexOf("&", valueIndex);
        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));
      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {
        return "";
      }
      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);
    }
    encoded = /[%+]/.test(url);
    if (!encoded) {
      return void 0;
    }
  }
  const results = {};
  encoded ??= /[%+]/.test(url);
  let keyIndex = url.indexOf("?", 8);
  while (keyIndex !== -1) {
    const nextKeyIndex = url.indexOf("&", keyIndex + 1);
    let valueIndex = url.indexOf("=", keyIndex);
    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {
      valueIndex = -1;
    }
    let name = url.slice(
      keyIndex + 1,
      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex
    );
    if (encoded) {
      name = _decodeURI(name);
    }
    keyIndex = nextKeyIndex;
    if (name === "") {
      continue;
    }
    let value;
    if (valueIndex === -1) {
      value = "";
    } else {
      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);
      if (encoded) {
        value = _decodeURI(value);
      }
    }
    if (multiple) {
      if (!(results[name] && Array.isArray(results[name]))) {
        results[name] = [];
      }
      ;
      results[name].push(value);
    } else {
      results[name] ??= value;
    }
  }
  return key ? results[key] : results;
};
var getQueryParam = _getQueryParam;
var getQueryParams = (url, key) => {
  return _getQueryParam(url, key, true);
};
var decodeURIComponent_ = decodeURIComponent;

// ../../node_modules/hono/dist/utils/cookie.js
var validCookieNameRegEx = /^[\w!#$%&'*.^`|~+-]+$/;
var validCookieValueRegEx = /^[ !#-:<-[\]-~]*$/;
var parse = (cookie, name) => {
  const pairs = cookie.trim().split(";");
  return pairs.reduce((parsedCookie, pairStr) => {
    pairStr = pairStr.trim();
    const valueStartPos = pairStr.indexOf("=");
    if (valueStartPos === -1) {
      return parsedCookie;
    }
    const cookieName = pairStr.substring(0, valueStartPos).trim();
    if (name && name !== cookieName || !validCookieNameRegEx.test(cookieName)) {
      return parsedCookie;
    }
    let cookieValue = pairStr.substring(valueStartPos + 1).trim();
    if (cookieValue.startsWith('"') && cookieValue.endsWith('"')) {
      cookieValue = cookieValue.slice(1, -1);
    }
    if (validCookieValueRegEx.test(cookieValue)) {
      parsedCookie[cookieName] = decodeURIComponent_(cookieValue);
    }
    return parsedCookie;
  }, {});
};

// ../../node_modules/hono/dist/helper/cookie/index.js
var getCookie = (c2, key, prefix) => {
  const cookie = c2.req.raw.headers.get("Cookie");
  if (typeof key === "string") {
    if (!cookie) {
      return void 0;
    }
    let finalKey = key;
    if (prefix === "secure") {
      finalKey = "__Secure-" + key;
    } else if (prefix === "host") {
      finalKey = "__Host-" + key;
    }
    const obj2 = parse(cookie, finalKey);
    return obj2[finalKey];
  }
  if (!cookie) {
    return {};
  }
  const obj = parse(cookie);
  return obj;
};

// ../../node_modules/hono/dist/http-exception.js
init_checked_fetch();
init_modules_watch_stub();
var HTTPException = class extends Error {
  res;
  status;
  constructor(status = 500, options) {
    super(options?.message, { cause: options?.cause });
    this.res = options?.res;
    this.status = status;
  }
  getResponse() {
    if (this.res) {
      const newResponse = new Response(this.res.body, {
        status: this.status,
        headers: this.res.headers
      });
      return newResponse;
    }
    return new Response(this.message, {
      status: this.status
    });
  }
};

// ../../node_modules/hono/dist/utils/buffer.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/crypto.js
init_checked_fetch();
init_modules_watch_stub();
var sha256 = async (data) => {
  const algorithm = { name: "SHA-256", alias: "sha256" };
  const hash = await createHash(data, algorithm);
  return hash;
};
var createHash = async (data, algorithm) => {
  let sourceBuffer;
  if (data instanceof ReadableStream) {
    let body = "";
    const reader = data.getReader();
    await reader?.read().then(async (chuck) => {
      const value = await createHash(chuck.value || "", algorithm);
      body += value;
    });
    return body;
  }
  if (ArrayBuffer.isView(data) || data instanceof ArrayBuffer) {
    sourceBuffer = data;
  } else {
    if (typeof data === "object") {
      data = JSON.stringify(data);
    }
    sourceBuffer = new TextEncoder().encode(String(data));
  }
  if (crypto && crypto.subtle) {
    const buffer = await crypto.subtle.digest(
      {
        name: algorithm.name
      },
      sourceBuffer
    );
    const hash = Array.prototype.map.call(new Uint8Array(buffer), (x) => ("00" + x.toString(16)).slice(-2)).join("");
    return hash;
  }
  return null;
};

// ../../node_modules/hono/dist/utils/buffer.js
var timingSafeEqual = async (a2, b2, hashFunction) => {
  if (!hashFunction) {
    hashFunction = sha256;
  }
  const [sa, sb] = await Promise.all([hashFunction(a2), hashFunction(b2)]);
  if (!sa || !sb) {
    return false;
  }
  return sa === sb && a2 === b2;
};
var bufferToFormData = (arrayBuffer, contentType) => {
  const response = new Response(arrayBuffer, {
    headers: {
      "Content-Type": contentType
    }
  });
  return response.formData();
};

// ../../node_modules/hono/dist/validator/validator.js
var jsonRegex = /^application\/([a-z-\.]+\+)?json(;\s*[a-zA-Z0-9\-]+\=([^;]+))*$/;
var multipartRegex = /^multipart\/form-data(;\s?boundary=[a-zA-Z0-9'"()+_,\-./:=?]+)?$/;
var urlencodedRegex = /^application\/x-www-form-urlencoded(;\s*[a-zA-Z0-9\-]+\=([^;]+))*$/;
var validator = (target, validationFunc) => {
  return async (c2, next) => {
    let value = {};
    const contentType = c2.req.header("Content-Type");
    switch (target) {
      case "json":
        if (!contentType || !jsonRegex.test(contentType)) {
          break;
        }
        try {
          value = await c2.req.json();
        } catch {
          const message = "Malformed JSON in request body";
          throw new HTTPException(400, { message });
        }
        break;
      case "form": {
        if (!contentType || !(multipartRegex.test(contentType) || urlencodedRegex.test(contentType))) {
          break;
        }
        let formData;
        if (c2.req.bodyCache.formData) {
          formData = await c2.req.bodyCache.formData;
        } else {
          try {
            const arrayBuffer = await c2.req.arrayBuffer();
            formData = await bufferToFormData(arrayBuffer, contentType);
            c2.req.bodyCache.formData = formData;
          } catch (e2) {
            let message = "Malformed FormData request.";
            message += e2 instanceof Error ? ` ${e2.message}` : ` ${String(e2)}`;
            throw new HTTPException(400, { message });
          }
        }
        const form = {};
        formData.forEach((value2, key) => {
          if (key.endsWith("[]")) {
            ;
            (form[key] ??= []).push(value2);
          } else if (Array.isArray(form[key])) {
            ;
            form[key].push(value2);
          } else if (key in form) {
            form[key] = [form[key], value2];
          } else {
            form[key] = value2;
          }
        });
        value = form;
        break;
      }
      case "query":
        value = Object.fromEntries(
          Object.entries(c2.req.queries()).map(([k, v2]) => {
            return v2.length === 1 ? [k, v2[0]] : [k, v2];
          })
        );
        break;
      case "param":
        value = c2.req.param();
        break;
      case "header":
        value = c2.req.header();
        break;
      case "cookie":
        value = getCookie(c2);
        break;
    }
    const res = await validationFunc(value, c2);
    if (res instanceof Response) {
      return res;
    }
    c2.req.addValidatedData(target, res);
    await next();
  };
};

// ../../node_modules/@hono/zod-validator/dist/esm/index.js
var zValidator = (target, schema, hook) => (
  // @ts-expect-error not typed well
  validator(target, async (value, c2) => {
    const result = await schema.safeParseAsync(value);
    if (hook) {
      const hookResult = await hook({ data: value, ...result }, c2);
      if (hookResult) {
        if (hookResult instanceof Response) {
          return hookResult;
        }
        if ("response" in hookResult) {
          return hookResult.response;
        }
      }
    }
    if (!result.success) {
      return c2.json(result, 400);
    }
    return result.data;
  })
);

// ../../node_modules/hono/dist/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/hono.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/hono-base.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/compose.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/context.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/request.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/body.js
init_checked_fetch();
init_modules_watch_stub();
var parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {
  const { all: all3 = false, dot = false } = options;
  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;
  const contentType = headers.get("Content-Type");
  if (contentType?.startsWith("multipart/form-data") || contentType?.startsWith("application/x-www-form-urlencoded")) {
    return parseFormData(request, { all: all3, dot });
  }
  return {};
};
async function parseFormData(request, options) {
  const formData = await request.formData();
  if (formData) {
    return convertFormDataToBodyData(formData, options);
  }
  return {};
}
function convertFormDataToBodyData(formData, options) {
  const form = /* @__PURE__ */ Object.create(null);
  formData.forEach((value, key) => {
    const shouldParseAllValues = options.all || key.endsWith("[]");
    if (!shouldParseAllValues) {
      form[key] = value;
    } else {
      handleParsingAllValues(form, key, value);
    }
  });
  if (options.dot) {
    Object.entries(form).forEach(([key, value]) => {
      const shouldParseDotValues = key.includes(".");
      if (shouldParseDotValues) {
        handleParsingNestedValues(form, key, value);
        delete form[key];
      }
    });
  }
  return form;
}
var handleParsingAllValues = (form, key, value) => {
  if (form[key] !== void 0) {
    if (Array.isArray(form[key])) {
      ;
      form[key].push(value);
    } else {
      form[key] = [form[key], value];
    }
  } else {
    form[key] = value;
  }
};
var handleParsingNestedValues = (form, key, value) => {
  let nestedForm = form;
  const keys = key.split(".");
  keys.forEach((key2, index) => {
    if (index === keys.length - 1) {
      nestedForm[key2] = value;
    } else {
      if (!nestedForm[key2] || typeof nestedForm[key2] !== "object" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {
        nestedForm[key2] = /* @__PURE__ */ Object.create(null);
      }
      nestedForm = nestedForm[key2];
    }
  });
};

// ../../node_modules/hono/dist/request.js
var HonoRequest = class {
  raw;
  #validatedData;
  #matchResult;
  routeIndex = 0;
  path;
  bodyCache = {};
  constructor(request, path = "/", matchResult = [[]]) {
    this.raw = request;
    this.path = path;
    this.#matchResult = matchResult;
    this.#validatedData = {};
  }
  param(key) {
    return key ? this.getDecodedParam(key) : this.getAllDecodedParams();
  }
  getDecodedParam(key) {
    const paramKey = this.#matchResult[0][this.routeIndex][1][key];
    const param = this.getParamValue(paramKey);
    return param ? /\%/.test(param) ? decodeURIComponent_(param) : param : void 0;
  }
  getAllDecodedParams() {
    const decoded = {};
    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);
    for (const key of keys) {
      const value = this.getParamValue(this.#matchResult[0][this.routeIndex][1][key]);
      if (value && typeof value === "string") {
        decoded[key] = /\%/.test(value) ? decodeURIComponent_(value) : value;
      }
    }
    return decoded;
  }
  getParamValue(paramKey) {
    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;
  }
  query(key) {
    return getQueryParam(this.url, key);
  }
  queries(key) {
    return getQueryParams(this.url, key);
  }
  header(name) {
    if (name) {
      return this.raw.headers.get(name.toLowerCase()) ?? void 0;
    }
    const headerData = {};
    this.raw.headers.forEach((value, key) => {
      headerData[key] = value;
    });
    return headerData;
  }
  async parseBody(options) {
    return this.bodyCache.parsedBody ??= await parseBody(this, options);
  }
  cachedBody = (key) => {
    const { bodyCache, raw: raw2 } = this;
    const cachedBody = bodyCache[key];
    if (cachedBody) {
      return cachedBody;
    }
    const anyCachedKey = Object.keys(bodyCache)[0];
    if (anyCachedKey) {
      return bodyCache[anyCachedKey].then((body) => {
        if (anyCachedKey === "json") {
          body = JSON.stringify(body);
        }
        return new Response(body)[key]();
      });
    }
    return bodyCache[key] = raw2[key]();
  };
  json() {
    return this.cachedBody("json");
  }
  text() {
    return this.cachedBody("text");
  }
  arrayBuffer() {
    return this.cachedBody("arrayBuffer");
  }
  blob() {
    return this.cachedBody("blob");
  }
  formData() {
    return this.cachedBody("formData");
  }
  addValidatedData(target, data) {
    this.#validatedData[target] = data;
  }
  valid(target) {
    return this.#validatedData[target];
  }
  get url() {
    return this.raw.url;
  }
  get method() {
    return this.raw.method;
  }
  get matchedRoutes() {
    return this.#matchResult[0].map(([[, route]]) => route);
  }
  get routePath() {
    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;
  }
};

// ../../node_modules/hono/dist/context.js
var TEXT_PLAIN = "text/plain; charset=UTF-8";
var setHeaders = (headers, map = {}) => {
  Object.entries(map).forEach(([key, value]) => headers.set(key, value));
  return headers;
};
var Context = class {
  #rawRequest;
  #req;
  env = {};
  #var;
  finalized = false;
  error;
  #status = 200;
  #executionCtx;
  #headers;
  #preparedHeaders;
  #res;
  #isFresh = true;
  #layout;
  #renderer;
  #notFoundHandler;
  #matchResult;
  #path;
  constructor(req, options) {
    this.#rawRequest = req;
    if (options) {
      this.#executionCtx = options.executionCtx;
      this.env = options.env;
      this.#notFoundHandler = options.notFoundHandler;
      this.#path = options.path;
      this.#matchResult = options.matchResult;
    }
  }
  get req() {
    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);
    return this.#req;
  }
  get event() {
    if (this.#executionCtx && "respondWith" in this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no FetchEvent");
    }
  }
  get executionCtx() {
    if (this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no ExecutionContext");
    }
  }
  get res() {
    this.#isFresh = false;
    return this.#res ||= new Response("404 Not Found", { status: 404 });
  }
  set res(_res) {
    this.#isFresh = false;
    if (this.#res && _res) {
      try {
        for (const [k, v2] of this.#res.headers.entries()) {
          if (k === "content-type") {
            continue;
          }
          if (k === "set-cookie") {
            const cookies = this.#res.headers.getSetCookie();
            _res.headers.delete("set-cookie");
            for (const cookie of cookies) {
              _res.headers.append("set-cookie", cookie);
            }
          } else {
            _res.headers.set(k, v2);
          }
        }
      } catch (e2) {
        if (e2 instanceof TypeError && e2.message.includes("immutable")) {
          this.res = new Response(_res.body, {
            headers: _res.headers,
            status: _res.status
          });
          return;
        } else {
          throw e2;
        }
      }
    }
    this.#res = _res;
    this.finalized = true;
  }
  render = (...args) => {
    this.#renderer ??= (content) => this.html(content);
    return this.#renderer(...args);
  };
  setLayout = (layout) => this.#layout = layout;
  getLayout = () => this.#layout;
  setRenderer = (renderer) => {
    this.#renderer = renderer;
  };
  header = (name, value, options) => {
    if (value === void 0) {
      if (this.#headers) {
        this.#headers.delete(name);
      } else if (this.#preparedHeaders) {
        delete this.#preparedHeaders[name.toLocaleLowerCase()];
      }
      if (this.finalized) {
        this.res.headers.delete(name);
      }
      return;
    }
    if (options?.append) {
      if (!this.#headers) {
        this.#isFresh = false;
        this.#headers = new Headers(this.#preparedHeaders);
        this.#preparedHeaders = {};
      }
      this.#headers.append(name, value);
    } else {
      if (this.#headers) {
        this.#headers.set(name, value);
      } else {
        this.#preparedHeaders ??= {};
        this.#preparedHeaders[name.toLowerCase()] = value;
      }
    }
    if (this.finalized) {
      if (options?.append) {
        this.res.headers.append(name, value);
      } else {
        this.res.headers.set(name, value);
      }
    }
  };
  status = (status) => {
    this.#isFresh = false;
    this.#status = status;
  };
  set = (key, value) => {
    this.#var ??= /* @__PURE__ */ new Map();
    this.#var.set(key, value);
  };
  get = (key) => {
    return this.#var ? this.#var.get(key) : void 0;
  };
  get var() {
    if (!this.#var) {
      return {};
    }
    return Object.fromEntries(this.#var);
  }
  newResponse = (data, arg, headers) => {
    if (this.#isFresh && !headers && !arg && this.#status === 200) {
      return new Response(data, {
        headers: this.#preparedHeaders
      });
    }
    if (arg && typeof arg !== "number") {
      const header = new Headers(arg.headers);
      if (this.#headers) {
        this.#headers.forEach((v2, k) => {
          if (k === "set-cookie") {
            header.append(k, v2);
          } else {
            header.set(k, v2);
          }
        });
      }
      const headers2 = setHeaders(header, this.#preparedHeaders);
      return new Response(data, {
        headers: headers2,
        status: arg.status ?? this.#status
      });
    }
    const status = typeof arg === "number" ? arg : this.#status;
    this.#preparedHeaders ??= {};
    this.#headers ??= new Headers();
    setHeaders(this.#headers, this.#preparedHeaders);
    if (this.#res) {
      this.#res.headers.forEach((v2, k) => {
        if (k === "set-cookie") {
          this.#headers?.append(k, v2);
        } else {
          this.#headers?.set(k, v2);
        }
      });
      setHeaders(this.#headers, this.#preparedHeaders);
    }
    headers ??= {};
    for (const [k, v2] of Object.entries(headers)) {
      if (typeof v2 === "string") {
        this.#headers.set(k, v2);
      } else {
        this.#headers.delete(k);
        for (const v22 of v2) {
          this.#headers.append(k, v22);
        }
      }
    }
    return new Response(data, {
      status,
      headers: this.#headers
    });
  };
  body = (data, arg, headers) => {
    return typeof arg === "number" ? this.newResponse(data, arg, headers) : this.newResponse(data, arg);
  };
  text = (text, arg, headers) => {
    if (!this.#preparedHeaders) {
      if (this.#isFresh && !headers && !arg) {
        return new Response(text);
      }
      this.#preparedHeaders = {};
    }
    this.#preparedHeaders["content-type"] = TEXT_PLAIN;
    return typeof arg === "number" ? this.newResponse(text, arg, headers) : this.newResponse(text, arg);
  };
  json = (object, arg, headers) => {
    const body = JSON.stringify(object);
    this.#preparedHeaders ??= {};
    this.#preparedHeaders["content-type"] = "application/json; charset=UTF-8";
    return typeof arg === "number" ? this.newResponse(body, arg, headers) : this.newResponse(body, arg);
  };
  html = (html2, arg, headers) => {
    this.#preparedHeaders ??= {};
    this.#preparedHeaders["content-type"] = "text/html; charset=UTF-8";
    if (typeof html2 === "object") {
      return resolveCallback(html2, HtmlEscapedCallbackPhase.Stringify, false, {}).then((html22) => {
        return typeof arg === "number" ? this.newResponse(html22, arg, headers) : this.newResponse(html22, arg);
      });
    }
    return typeof arg === "number" ? this.newResponse(html2, arg, headers) : this.newResponse(html2, arg);
  };
  redirect = (location, status) => {
    this.#headers ??= new Headers();
    this.#headers.set("Location", location);
    return this.newResponse(null, status ?? 302);
  };
  notFound = () => {
    this.#notFoundHandler ??= () => new Response();
    return this.#notFoundHandler(this);
  };
};

// ../../node_modules/hono/dist/compose.js
var compose = (middleware2, onError, onNotFound) => {
  return (context, next) => {
    let index = -1;
    return dispatch(0);
    async function dispatch(i2) {
      if (i2 <= index) {
        throw new Error("next() called multiple times");
      }
      index = i2;
      let res;
      let isError4 = false;
      let handler;
      if (middleware2[i2]) {
        handler = middleware2[i2][0][0];
        if (context instanceof Context) {
          context.req.routeIndex = i2;
        }
      } else {
        handler = i2 === middleware2.length && next || void 0;
      }
      if (!handler) {
        if (context instanceof Context && context.finalized === false && onNotFound) {
          res = await onNotFound(context);
        }
      } else {
        try {
          res = await handler(context, () => {
            return dispatch(i2 + 1);
          });
        } catch (err) {
          if (err instanceof Error && context instanceof Context && onError) {
            context.error = err;
            res = await onError(err, context);
            isError4 = true;
          } else {
            throw err;
          }
        }
      }
      if (res && (context.finalized === false || isError4)) {
        context.res = res;
      }
      return context;
    }
  };
};

// ../../node_modules/hono/dist/router.js
init_checked_fetch();
init_modules_watch_stub();
var METHOD_NAME_ALL = "ALL";
var METHOD_NAME_ALL_LOWERCASE = "all";
var METHODS = ["get", "post", "put", "delete", "options", "patch"];
var MESSAGE_MATCHER_IS_ALREADY_BUILT = "Can not add a route since the matcher is already built.";
var UnsupportedPathError = class extends Error {
};

// ../../node_modules/hono/dist/hono-base.js
var COMPOSED_HANDLER = Symbol("composedHandler");
var notFoundHandler = (c2) => {
  return c2.text("404 Not Found", 404);
};
var errorHandler = (err, c2) => {
  if ("getResponse" in err) {
    return err.getResponse();
  }
  console.error(err);
  return c2.text("Internal Server Error", 500);
};
var Hono = class {
  get;
  post;
  put;
  delete;
  options;
  patch;
  all;
  on;
  use;
  router;
  getPath;
  _basePath = "/";
  #path = "/";
  routes = [];
  constructor(options = {}) {
    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];
    allMethods.forEach((method) => {
      this[method] = (args1, ...args) => {
        if (typeof args1 === "string") {
          this.#path = args1;
        } else {
          this.addRoute(method, this.#path, args1);
        }
        args.forEach((handler) => {
          if (typeof handler !== "string") {
            this.addRoute(method, this.#path, handler);
          }
        });
        return this;
      };
    });
    this.on = (method, path, ...handlers) => {
      for (const p2 of [path].flat()) {
        this.#path = p2;
        for (const m2 of [method].flat()) {
          handlers.map((handler) => {
            this.addRoute(m2.toUpperCase(), this.#path, handler);
          });
        }
      }
      return this;
    };
    this.use = (arg1, ...handlers) => {
      if (typeof arg1 === "string") {
        this.#path = arg1;
      } else {
        this.#path = "*";
        handlers.unshift(arg1);
      }
      handlers.forEach((handler) => {
        this.addRoute(METHOD_NAME_ALL, this.#path, handler);
      });
      return this;
    };
    const strict = options.strict ?? true;
    delete options.strict;
    Object.assign(this, options);
    this.getPath = strict ? options.getPath ?? getPath : getPathNoStrict;
  }
  clone() {
    const clone = new Hono({
      router: this.router,
      getPath: this.getPath
    });
    clone.routes = this.routes;
    return clone;
  }
  notFoundHandler = notFoundHandler;
  errorHandler = errorHandler;
  route(path, app8) {
    const subApp = this.basePath(path);
    app8.routes.map((r) => {
      let handler;
      if (app8.errorHandler === errorHandler) {
        handler = r.handler;
      } else {
        handler = async (c2, next) => (await compose([], app8.errorHandler)(c2, () => r.handler(c2, next))).res;
        handler[COMPOSED_HANDLER] = r.handler;
      }
      subApp.addRoute(r.method, r.path, handler);
    });
    return this;
  }
  basePath(path) {
    const subApp = this.clone();
    subApp._basePath = mergePath(this._basePath, path);
    return subApp;
  }
  onError = (handler) => {
    this.errorHandler = handler;
    return this;
  };
  notFound = (handler) => {
    this.notFoundHandler = handler;
    return this;
  };
  mount(path, applicationHandler, options) {
    let replaceRequest;
    let optionHandler;
    if (options) {
      if (typeof options === "function") {
        optionHandler = options;
      } else {
        optionHandler = options.optionHandler;
        replaceRequest = options.replaceRequest;
      }
    }
    const getOptions = optionHandler ? (c2) => {
      const options2 = optionHandler(c2);
      return Array.isArray(options2) ? options2 : [options2];
    } : (c2) => {
      let executionContext = void 0;
      try {
        executionContext = c2.executionCtx;
      } catch {
      }
      return [c2.env, executionContext];
    };
    replaceRequest ||= (() => {
      const mergedPath = mergePath(this._basePath, path);
      const pathPrefixLength = mergedPath === "/" ? 0 : mergedPath.length;
      return (request) => {
        const url = new URL(request.url);
        url.pathname = url.pathname.slice(pathPrefixLength) || "/";
        return new Request(url, request);
      };
    })();
    const handler = async (c2, next) => {
      const res = await applicationHandler(replaceRequest(c2.req.raw), ...getOptions(c2));
      if (res) {
        return res;
      }
      await next();
    };
    this.addRoute(METHOD_NAME_ALL, mergePath(path, "*"), handler);
    return this;
  }
  addRoute(method, path, handler) {
    method = method.toUpperCase();
    path = mergePath(this._basePath, path);
    const r = { path, method, handler };
    this.router.add(method, path, [handler, r]);
    this.routes.push(r);
  }
  matchRoute(method, path) {
    return this.router.match(method, path);
  }
  handleError(err, c2) {
    if (err instanceof Error) {
      return this.errorHandler(err, c2);
    }
    throw err;
  }
  dispatch(request, executionCtx, env2, method) {
    if (method === "HEAD") {
      return (async () => new Response(null, await this.dispatch(request, executionCtx, env2, "GET")))();
    }
    const path = this.getPath(request, { env: env2 });
    const matchResult = this.matchRoute(method, path);
    const c2 = new Context(request, {
      path,
      matchResult,
      env: env2,
      executionCtx,
      notFoundHandler: this.notFoundHandler
    });
    if (matchResult[0].length === 1) {
      let res;
      try {
        res = matchResult[0][0][0][0](c2, async () => {
          c2.res = await this.notFoundHandler(c2);
        });
      } catch (err) {
        return this.handleError(err, c2);
      }
      return res instanceof Promise ? res.then(
        (resolved) => resolved || (c2.finalized ? c2.res : this.notFoundHandler(c2))
      ).catch((err) => this.handleError(err, c2)) : res ?? this.notFoundHandler(c2);
    }
    const composed = compose(matchResult[0], this.errorHandler, this.notFoundHandler);
    return (async () => {
      try {
        const context = await composed(c2);
        if (!context.finalized) {
          throw new Error(
            "Context is not finalized. Did you forget to return a Response object or `await next()`?"
          );
        }
        return context.res;
      } catch (err) {
        return this.handleError(err, c2);
      }
    })();
  }
  fetch = (request, ...rest) => {
    return this.dispatch(request, rest[1], rest[0], request.method);
  };
  request = (input, requestInit, Env, executionCtx) => {
    if (input instanceof Request) {
      if (requestInit !== void 0) {
        input = new Request(input, requestInit);
      }
      return this.fetch(input, Env, executionCtx);
    }
    input = input.toString();
    const path = /^https?:\/\//.test(input) ? input : `http://localhost${mergePath("/", input)}`;
    const req = new Request(path, requestInit);
    return this.fetch(req, Env, executionCtx);
  };
  fire = () => {
    addEventListener("fetch", (event) => {
      event.respondWith(this.dispatch(event.request, event, void 0, event.request.method));
    });
  };
};

// ../../node_modules/hono/dist/router/reg-exp-router/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/router/reg-exp-router/router.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/router/reg-exp-router/node.js
init_checked_fetch();
init_modules_watch_stub();
var LABEL_REG_EXP_STR = "[^/]+";
var ONLY_WILDCARD_REG_EXP_STR = ".*";
var TAIL_WILDCARD_REG_EXP_STR = "(?:|/.*)";
var PATH_ERROR = Symbol();
var regExpMetaChars = new Set(".\\+*[^]$()");
function compareKey(a2, b2) {
  if (a2.length === 1) {
    return b2.length === 1 ? a2 < b2 ? -1 : 1 : -1;
  }
  if (b2.length === 1) {
    return 1;
  }
  if (a2 === ONLY_WILDCARD_REG_EXP_STR || a2 === TAIL_WILDCARD_REG_EXP_STR) {
    return 1;
  } else if (b2 === ONLY_WILDCARD_REG_EXP_STR || b2 === TAIL_WILDCARD_REG_EXP_STR) {
    return -1;
  }
  if (a2 === LABEL_REG_EXP_STR) {
    return 1;
  } else if (b2 === LABEL_REG_EXP_STR) {
    return -1;
  }
  return a2.length === b2.length ? a2 < b2 ? -1 : 1 : b2.length - a2.length;
}
var Node = class {
  index;
  varIndex;
  children = /* @__PURE__ */ Object.create(null);
  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {
    if (tokens.length === 0) {
      if (this.index !== void 0) {
        throw PATH_ERROR;
      }
      if (pathErrorCheckOnly) {
        return;
      }
      this.index = index;
      return;
    }
    const [token, ...restTokens] = tokens;
    const pattern = token === "*" ? restTokens.length === 0 ? ["", "", ONLY_WILDCARD_REG_EXP_STR] : ["", "", LABEL_REG_EXP_STR] : token === "/*" ? ["", "", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
    let node;
    if (pattern) {
      const name = pattern[1];
      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;
      if (name && pattern[2]) {
        regexpStr = regexpStr.replace(/^\((?!\?:)(?=[^)]+\)$)/, "(?:");
        if (/\((?!\?:)/.test(regexpStr)) {
          throw PATH_ERROR;
        }
      }
      node = this.children[regexpStr];
      if (!node) {
        if (Object.keys(this.children).some(
          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.children[regexpStr] = new Node();
        if (name !== "") {
          node.varIndex = context.varIndex++;
        }
      }
      if (!pathErrorCheckOnly && name !== "") {
        paramMap.push([name, node.varIndex]);
      }
    } else {
      node = this.children[token];
      if (!node) {
        if (Object.keys(this.children).some(
          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.children[token] = new Node();
      }
    }
    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);
  }
  buildRegExpStr() {
    const childKeys = Object.keys(this.children).sort(compareKey);
    const strList = childKeys.map((k) => {
      const c2 = this.children[k];
      return (typeof c2.varIndex === "number" ? `(${k})@${c2.varIndex}` : regExpMetaChars.has(k) ? `\\${k}` : k) + c2.buildRegExpStr();
    });
    if (typeof this.index === "number") {
      strList.unshift(`#${this.index}`);
    }
    if (strList.length === 0) {
      return "";
    }
    if (strList.length === 1) {
      return strList[0];
    }
    return "(?:" + strList.join("|") + ")";
  }
};

// ../../node_modules/hono/dist/router/reg-exp-router/trie.js
init_checked_fetch();
init_modules_watch_stub();
var Trie = class {
  context = { varIndex: 0 };
  root = new Node();
  insert(path, index, pathErrorCheckOnly) {
    const paramAssoc = [];
    const groups = [];
    for (let i2 = 0; ; ) {
      let replaced = false;
      path = path.replace(/\{[^}]+\}/g, (m2) => {
        const mark = `@\\${i2}`;
        groups[i2] = [mark, m2];
        i2++;
        replaced = true;
        return mark;
      });
      if (!replaced) {
        break;
      }
    }
    const tokens = path.match(/(?::[^\/]+)|(?:\/\*$)|./g) || [];
    for (let i2 = groups.length - 1; i2 >= 0; i2--) {
      const [mark] = groups[i2];
      for (let j = tokens.length - 1; j >= 0; j--) {
        if (tokens[j].indexOf(mark) !== -1) {
          tokens[j] = tokens[j].replace(mark, groups[i2][1]);
          break;
        }
      }
    }
    this.root.insert(tokens, index, paramAssoc, this.context, pathErrorCheckOnly);
    return paramAssoc;
  }
  buildRegExp() {
    let regexp = this.root.buildRegExpStr();
    if (regexp === "") {
      return [/^$/, [], []];
    }
    let captureIndex = 0;
    const indexReplacementMap = [];
    const paramReplacementMap = [];
    regexp = regexp.replace(/#(\d+)|@(\d+)|\.\*\$/g, (_, handlerIndex, paramIndex) => {
      if (typeof handlerIndex !== "undefined") {
        indexReplacementMap[++captureIndex] = Number(handlerIndex);
        return "$()";
      }
      if (typeof paramIndex !== "undefined") {
        paramReplacementMap[Number(paramIndex)] = ++captureIndex;
        return "";
      }
      return "";
    });
    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];
  }
};

// ../../node_modules/hono/dist/router/reg-exp-router/router.js
var emptyParam = [];
var nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];
var wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
function buildWildcardRegExp(path) {
  return wildcardRegExpCache[path] ??= new RegExp(
    path === "*" ? "" : `^${path.replace(
      /\/\*$|([.\\+*[^\]$()])/g,
      (_, metaChar) => metaChar ? `\\${metaChar}` : "(?:|/.*)"
    )}$`
  );
}
function clearWildcardRegExpCache() {
  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
}
function buildMatcherFromPreprocessedRoutes(routes) {
  const trie = new Trie();
  const handlerData = [];
  if (routes.length === 0) {
    return nullMatcher;
  }
  const routesWithStaticPathFlag = routes.map(
    (route) => [!/\*|\/:/.test(route[0]), ...route]
  ).sort(
    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length
  );
  const staticMap = /* @__PURE__ */ Object.create(null);
  for (let i2 = 0, j = -1, len = routesWithStaticPathFlag.length; i2 < len; i2++) {
    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i2];
    if (pathErrorCheckOnly) {
      staticMap[path] = [handlers.map(([h2]) => [h2, /* @__PURE__ */ Object.create(null)]), emptyParam];
    } else {
      j++;
    }
    let paramAssoc;
    try {
      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);
    } catch (e2) {
      throw e2 === PATH_ERROR ? new UnsupportedPathError(path) : e2;
    }
    if (pathErrorCheckOnly) {
      continue;
    }
    handlerData[j] = handlers.map(([h2, paramCount]) => {
      const paramIndexMap = /* @__PURE__ */ Object.create(null);
      paramCount -= 1;
      for (; paramCount >= 0; paramCount--) {
        const [key, value] = paramAssoc[paramCount];
        paramIndexMap[key] = value;
      }
      return [h2, paramIndexMap];
    });
  }
  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();
  for (let i2 = 0, len = handlerData.length; i2 < len; i2++) {
    for (let j = 0, len2 = handlerData[i2].length; j < len2; j++) {
      const map = handlerData[i2][j]?.[1];
      if (!map) {
        continue;
      }
      const keys = Object.keys(map);
      for (let k = 0, len3 = keys.length; k < len3; k++) {
        map[keys[k]] = paramReplacementMap[map[keys[k]]];
      }
    }
  }
  const handlerMap = [];
  for (const i2 in indexReplacementMap) {
    handlerMap[i2] = handlerData[indexReplacementMap[i2]];
  }
  return [regexp, handlerMap, staticMap];
}
function findMiddleware(middleware2, path) {
  if (!middleware2) {
    return void 0;
  }
  for (const k of Object.keys(middleware2).sort((a2, b2) => b2.length - a2.length)) {
    if (buildWildcardRegExp(k).test(path)) {
      return [...middleware2[k]];
    }
  }
  return void 0;
}
var RegExpRouter = class {
  name = "RegExpRouter";
  middleware;
  routes;
  constructor() {
    this.middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
    this.routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
  }
  add(method, path, handler) {
    const { middleware: middleware2, routes } = this;
    if (!middleware2 || !routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    if (!middleware2[method]) {
      ;
      [middleware2, routes].forEach((handlerMap) => {
        handlerMap[method] = /* @__PURE__ */ Object.create(null);
        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p2) => {
          handlerMap[method][p2] = [...handlerMap[METHOD_NAME_ALL][p2]];
        });
      });
    }
    if (path === "/*") {
      path = "*";
    }
    const paramCount = (path.match(/\/:/g) || []).length;
    if (/\*$/.test(path)) {
      const re = buildWildcardRegExp(path);
      if (method === METHOD_NAME_ALL) {
        Object.keys(middleware2).forEach((m2) => {
          middleware2[m2][path] ||= findMiddleware(middleware2[m2], path) || findMiddleware(middleware2[METHOD_NAME_ALL], path) || [];
        });
      } else {
        middleware2[method][path] ||= findMiddleware(middleware2[method], path) || findMiddleware(middleware2[METHOD_NAME_ALL], path) || [];
      }
      Object.keys(middleware2).forEach((m2) => {
        if (method === METHOD_NAME_ALL || method === m2) {
          Object.keys(middleware2[m2]).forEach((p2) => {
            re.test(p2) && middleware2[m2][p2].push([handler, paramCount]);
          });
        }
      });
      Object.keys(routes).forEach((m2) => {
        if (method === METHOD_NAME_ALL || method === m2) {
          Object.keys(routes[m2]).forEach(
            (p2) => re.test(p2) && routes[m2][p2].push([handler, paramCount])
          );
        }
      });
      return;
    }
    const paths = checkOptionalParameter(path) || [path];
    for (let i2 = 0, len = paths.length; i2 < len; i2++) {
      const path2 = paths[i2];
      Object.keys(routes).forEach((m2) => {
        if (method === METHOD_NAME_ALL || method === m2) {
          routes[m2][path2] ||= [
            ...findMiddleware(middleware2[m2], path2) || findMiddleware(middleware2[METHOD_NAME_ALL], path2) || []
          ];
          routes[m2][path2].push([handler, paramCount - len + i2 + 1]);
        }
      });
    }
  }
  match(method, path) {
    clearWildcardRegExpCache();
    const matchers = this.buildAllMatchers();
    this.match = (method2, path2) => {
      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];
      const staticMatch = matcher[2][path2];
      if (staticMatch) {
        return staticMatch;
      }
      const match = path2.match(matcher[0]);
      if (!match) {
        return [[], emptyParam];
      }
      const index = match.indexOf("", 1);
      return [matcher[1][index], match];
    };
    return this.match(method, path);
  }
  buildAllMatchers() {
    const matchers = /* @__PURE__ */ Object.create(null);
    [...Object.keys(this.routes), ...Object.keys(this.middleware)].forEach((method) => {
      matchers[method] ||= this.buildMatcher(method);
    });
    this.middleware = this.routes = void 0;
    return matchers;
  }
  buildMatcher(method) {
    const routes = [];
    let hasOwnRoute = method === METHOD_NAME_ALL;
    [this.middleware, this.routes].forEach((r) => {
      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];
      if (ownRoute.length !== 0) {
        hasOwnRoute ||= true;
        routes.push(...ownRoute);
      } else if (method !== METHOD_NAME_ALL) {
        routes.push(
          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])
        );
      }
    });
    if (!hasOwnRoute) {
      return null;
    } else {
      return buildMatcherFromPreprocessedRoutes(routes);
    }
  }
};

// ../../node_modules/hono/dist/router/smart-router/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/router/smart-router/router.js
init_checked_fetch();
init_modules_watch_stub();
var SmartRouter = class {
  name = "SmartRouter";
  routers = [];
  routes = [];
  constructor(init) {
    Object.assign(this, init);
  }
  add(method, path, handler) {
    if (!this.routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    this.routes.push([method, path, handler]);
  }
  match(method, path) {
    if (!this.routes) {
      throw new Error("Fatal error");
    }
    const { routers, routes } = this;
    const len = routers.length;
    let i2 = 0;
    let res;
    for (; i2 < len; i2++) {
      const router = routers[i2];
      try {
        routes.forEach((args) => {
          router.add(...args);
        });
        res = router.match(method, path);
      } catch (e2) {
        if (e2 instanceof UnsupportedPathError) {
          continue;
        }
        throw e2;
      }
      this.match = router.match.bind(router);
      this.routers = [router];
      this.routes = void 0;
      break;
    }
    if (i2 === len) {
      throw new Error("Fatal error");
    }
    this.name = `SmartRouter + ${this.activeRouter.name}`;
    return res;
  }
  get activeRouter() {
    if (this.routes || this.routers.length !== 1) {
      throw new Error("No active router has been determined yet.");
    }
    return this.routers[0];
  }
};

// ../../node_modules/hono/dist/router/trie-router/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/router/trie-router/router.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/router/trie-router/node.js
init_checked_fetch();
init_modules_watch_stub();
var Node2 = class {
  methods;
  children;
  patterns;
  order = 0;
  name;
  params = /* @__PURE__ */ Object.create(null);
  constructor(method, handler, children) {
    this.children = children || /* @__PURE__ */ Object.create(null);
    this.methods = [];
    this.name = "";
    if (method && handler) {
      const m2 = /* @__PURE__ */ Object.create(null);
      m2[method] = { handler, possibleKeys: [], score: 0, name: this.name };
      this.methods = [m2];
    }
    this.patterns = [];
  }
  insert(method, path, handler) {
    this.name = `${method} ${path}`;
    this.order = ++this.order;
    let curNode = this;
    const parts = splitRoutingPath(path);
    const possibleKeys = [];
    for (let i2 = 0, len = parts.length; i2 < len; i2++) {
      const p2 = parts[i2];
      if (Object.keys(curNode.children).includes(p2)) {
        curNode = curNode.children[p2];
        const pattern2 = getPattern(p2);
        if (pattern2) {
          possibleKeys.push(pattern2[1]);
        }
        continue;
      }
      curNode.children[p2] = new Node2();
      const pattern = getPattern(p2);
      if (pattern) {
        curNode.patterns.push(pattern);
        possibleKeys.push(pattern[1]);
      }
      curNode = curNode.children[p2];
    }
    if (!curNode.methods.length) {
      curNode.methods = [];
    }
    const m2 = /* @__PURE__ */ Object.create(null);
    const handlerSet = {
      handler,
      possibleKeys: possibleKeys.filter((v2, i2, a2) => a2.indexOf(v2) === i2),
      name: this.name,
      score: this.order
    };
    m2[method] = handlerSet;
    curNode.methods.push(m2);
    return curNode;
  }
  gHSets(node, method, nodeParams, params) {
    const handlerSets = [];
    for (let i2 = 0, len = node.methods.length; i2 < len; i2++) {
      const m2 = node.methods[i2];
      const handlerSet = m2[method] || m2[METHOD_NAME_ALL];
      const processedSet = /* @__PURE__ */ Object.create(null);
      if (handlerSet !== void 0) {
        handlerSet.params = /* @__PURE__ */ Object.create(null);
        handlerSet.possibleKeys.forEach((key) => {
          const processed = processedSet[handlerSet.name];
          handlerSet.params[key] = params[key] && !processed ? params[key] : nodeParams[key] ?? params[key];
          processedSet[handlerSet.name] = true;
        });
        handlerSets.push(handlerSet);
      }
    }
    return handlerSets;
  }
  search(method, path) {
    const handlerSets = [];
    this.params = /* @__PURE__ */ Object.create(null);
    const curNode = this;
    let curNodes = [curNode];
    const parts = splitPath(path);
    for (let i2 = 0, len = parts.length; i2 < len; i2++) {
      const part = parts[i2];
      const isLast = i2 === len - 1;
      const tempNodes = [];
      for (let j = 0, len2 = curNodes.length; j < len2; j++) {
        const node = curNodes[j];
        const nextNode = node.children[part];
        if (nextNode) {
          nextNode.params = node.params;
          if (isLast === true) {
            if (nextNode.children["*"]) {
              handlerSets.push(
                ...this.gHSets(nextNode.children["*"], method, node.params, /* @__PURE__ */ Object.create(null))
              );
            }
            handlerSets.push(...this.gHSets(nextNode, method, node.params, /* @__PURE__ */ Object.create(null)));
          } else {
            tempNodes.push(nextNode);
          }
        }
        for (let k = 0, len3 = node.patterns.length; k < len3; k++) {
          const pattern = node.patterns[k];
          const params = { ...node.params };
          if (pattern === "*") {
            const astNode = node.children["*"];
            if (astNode) {
              handlerSets.push(...this.gHSets(astNode, method, node.params, /* @__PURE__ */ Object.create(null)));
              tempNodes.push(astNode);
            }
            continue;
          }
          if (part === "") {
            continue;
          }
          const [key, name, matcher] = pattern;
          const child = node.children[key];
          const restPathString = parts.slice(i2).join("/");
          if (matcher instanceof RegExp && matcher.test(restPathString)) {
            params[name] = restPathString;
            handlerSets.push(...this.gHSets(child, method, node.params, params));
            continue;
          }
          if (matcher === true || matcher instanceof RegExp && matcher.test(part)) {
            if (typeof key === "string") {
              params[name] = part;
              if (isLast === true) {
                handlerSets.push(...this.gHSets(child, method, params, node.params));
                if (child.children["*"]) {
                  handlerSets.push(...this.gHSets(child.children["*"], method, params, node.params));
                }
              } else {
                child.params = params;
                tempNodes.push(child);
              }
            }
          }
        }
      }
      curNodes = tempNodes;
    }
    const results = handlerSets.sort((a2, b2) => {
      return a2.score - b2.score;
    });
    return [results.map(({ handler, params }) => [handler, params])];
  }
};

// ../../node_modules/hono/dist/router/trie-router/router.js
var TrieRouter = class {
  name = "TrieRouter";
  node;
  constructor() {
    this.node = new Node2();
  }
  add(method, path, handler) {
    const results = checkOptionalParameter(path);
    if (results) {
      for (const p2 of results) {
        this.node.insert(method, p2, handler);
      }
      return;
    }
    this.node.insert(method, path, handler);
  }
  match(method, path) {
    return this.node.search(method, path);
  }
};

// ../../node_modules/hono/dist/hono.js
var Hono2 = class extends Hono {
  constructor(options = {}) {
    super(options);
    this.router = options.router ?? new SmartRouter({
      routers: [new RegExpRouter(), new TrieRouter()]
    });
  }
};

// ../../node_modules/zod/lib/index.mjs
init_checked_fetch();
init_modules_watch_stub();
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e2) {
      return obj[e2];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i2 = 0;
          while (i2 < issue.path.length) {
            const el = issue.path[i2];
            const terminal = i2 === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i2++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s2 of results) {
      if (s2.status === "aborted")
        return INVALID;
      if (s2.status === "dirty")
        status.dirty();
      arrayValue.push(s2.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache;
var _ZodNativeEnum_cache;
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a2, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a2 = message !== null && message !== void 0 ? message : required_error) !== null && _a2 !== void 0 ? _a2 : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a2;
    const ctx = {
      common: {
        issues: [],
        async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a2) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a2, _b;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a2 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a2 !== void 0 ? _a2 : false,
      local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * @deprecated Use z.string().min(1) instead.
   * @see {@link ZodString.min}
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  var _a2;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  var _a2;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i2) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i2) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a2, _b, _c, _d;
          const defaultError = (_c = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a2, b2) {
  const aType = getParsedType(a2);
  const bType = getParsedType(b2);
  if (a2 === b2) {
    return { valid: true, data: a2 };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b2);
    const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a2, ...b2 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a2[key], b2[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a2.length !== b2.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a2.length; index++) {
      const itemA = a2[index];
      const itemB = b2[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b2) {
    return { valid: true, data: a2 };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e2) => {
          error.addIssue(makeArgsIssue(args, e2));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e2) => {
          error.addIssue(makeReturnsIssue(result, e2));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class extends ZodType {
  constructor() {
    super(...arguments);
    _ZodEnum_cache.set(this, void 0);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
_ZodEnum_cache = /* @__PURE__ */ new WeakMap();
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache.set(this, void 0);
  }
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a2, b2) {
    return new ZodPipeline({
      in: a2,
      out: b2,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function custom(check, params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a2, _b;
      if (!check(data)) {
        const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a2 = p2.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b !== void 0 ? _b : true;
        const p22 = typeof p2 === "string" ? { message: p2 } : p2;
        ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
      }
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  datetimeRegex,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// ../../node_modules/@hono/zod-openapi/dist/index.mjs
var OpenAPIHono = class _OpenAPIHono extends Hono2 {
  openAPIRegistry;
  defaultHook;
  constructor(init) {
    super(init);
    this.openAPIRegistry = new OpenAPIRegistry();
    this.defaultHook = init?.defaultHook;
  }
  /**
   *
   * @param {RouteConfig} route - The route definition which you create with `createRoute()`.
   * @param {Handler} handler - The handler. If you want to return a JSON object, you should specify the status code with `c.json()`.
   * @param {Hook} hook - Optional. The hook method defines what it should do after validation.
   * @example
   * app.openapi(
   *   route,
   *   (c) => {
   *     // ...
   *     return c.json(
   *       {
   *         age: 20,
   *         name: 'Young man',
   *       },
   *       200 // You should specify the status code even if it's 200.
   *     )
   *   },
   *  (result, c) => {
   *    if (!result.success) {
   *      return c.json(
   *        {
   *          code: 400,
   *          message: 'Custom Message',
   *        },
   *        400
   *      )
   *    }
   *  }
   *)
   */
  openapi = ({ middleware: routeMiddleware, ...route }, handler, hook = this.defaultHook) => {
    this.openAPIRegistry.registerPath(route);
    const validators3 = [];
    if (route.request?.query) {
      const validator2 = zValidator("query", route.request.query, hook);
      validators3.push(validator2);
    }
    if (route.request?.params) {
      const validator2 = zValidator("param", route.request.params, hook);
      validators3.push(validator2);
    }
    if (route.request?.headers) {
      const validator2 = zValidator("header", route.request.headers, hook);
      validators3.push(validator2);
    }
    if (route.request?.cookies) {
      const validator2 = zValidator("cookie", route.request.cookies, hook);
      validators3.push(validator2);
    }
    const bodyContent = route.request?.body?.content;
    if (bodyContent) {
      for (const mediaType of Object.keys(bodyContent)) {
        if (!bodyContent[mediaType]) {
          continue;
        }
        const schema = bodyContent[mediaType]["schema"];
        if (!(schema instanceof ZodType)) {
          continue;
        }
        if (isJSONContentType(mediaType)) {
          const validator2 = zValidator("json", schema, hook);
          if (route.request?.body?.required) {
            validators3.push(validator2);
          } else {
            const mw = async (c2, next) => {
              if (c2.req.header("content-type")) {
                if (isJSONContentType(c2.req.header("content-type"))) {
                  return await validator2(c2, next);
                }
              }
              c2.req.addValidatedData("json", {});
              await next();
            };
            validators3.push(mw);
          }
        }
        if (isFormContentType(mediaType)) {
          const validator2 = zValidator("form", schema, hook);
          if (route.request?.body?.required) {
            validators3.push(validator2);
          } else {
            const mw = async (c2, next) => {
              if (c2.req.header("content-type")) {
                if (isFormContentType(c2.req.header("content-type"))) {
                  return await validator2(c2, next);
                }
              }
              c2.req.addValidatedData("form", {});
              await next();
            };
            validators3.push(mw);
          }
        }
      }
    }
    const middleware2 = routeMiddleware ? Array.isArray(routeMiddleware) ? routeMiddleware : [routeMiddleware] : [];
    this.on(
      [route.method],
      route.path.replaceAll(/\/{(.+?)}/g, "/:$1"),
      ...middleware2,
      ...validators3,
      handler
    );
    return this;
  };
  getOpenAPIDocument = (config) => {
    const generator = new OpenApiGeneratorV3(this.openAPIRegistry.definitions);
    const document2 = generator.generateDocument(config);
    return this._basePath ? addBasePathToDocument(document2, this._basePath) : document2;
  };
  getOpenAPI31Document = (config) => {
    const generator = new OpenApiGeneratorV31(this.openAPIRegistry.definitions);
    const document2 = generator.generateDocument(config);
    return this._basePath ? addBasePathToDocument(document2, this._basePath) : document2;
  };
  doc = (path, configure) => {
    return this.get(path, (c2) => {
      const config = typeof configure === "function" ? configure(c2) : configure;
      try {
        const document2 = this.getOpenAPIDocument(config);
        return c2.json(document2);
      } catch (e2) {
        return c2.json(e2, 500);
      }
    });
  };
  doc31 = (path, configure) => {
    return this.get(path, (c2) => {
      const config = typeof configure === "function" ? configure(c2) : configure;
      try {
        const document2 = this.getOpenAPI31Document(config);
        return c2.json(document2);
      } catch (e2) {
        return c2.json(e2, 500);
      }
    });
  };
  route(path, app8) {
    const pathForOpenAPI = path.replaceAll(/:([^\/]+)/g, "{$1}");
    super.route(path, app8);
    if (!(app8 instanceof _OpenAPIHono)) {
      return this;
    }
    app8.openAPIRegistry.definitions.forEach((def) => {
      switch (def.type) {
        case "component":
          return this.openAPIRegistry.registerComponent(def.componentType, def.name, def.component);
        case "route":
          return this.openAPIRegistry.registerPath({
            ...def.route,
            path: mergePath(pathForOpenAPI, def.route.path)
          });
        case "webhook":
          return this.openAPIRegistry.registerWebhook({
            ...def.webhook,
            path: mergePath(pathForOpenAPI, def.webhook.path)
          });
        case "schema":
          return this.openAPIRegistry.register(def.schema._def.openapi._internal.refId, def.schema);
        case "parameter":
          return this.openAPIRegistry.registerParameter(
            def.schema._def.openapi._internal.refId,
            def.schema
          );
        default: {
          const errorIfNotExhaustive = def;
          throw new Error(`Unknown registry type: ${errorIfNotExhaustive}`);
        }
      }
    });
    return this;
  }
  basePath(path) {
    return new _OpenAPIHono({ ...super.basePath(path), defaultHook: this.defaultHook });
  }
};
var createRoute = (routeConfig) => {
  const route = {
    ...routeConfig,
    getRoutingPath() {
      return routeConfig.path.replaceAll(/\/{(.+?)}/g, "/:$1");
    }
  };
  return Object.defineProperty(route, "getRoutingPath", { enumerable: false });
};
extendZodWithOpenApi(z);
function addBasePathToDocument(document2, basePath) {
  const updatedPaths = {};
  Object.keys(document2.paths).forEach((path) => {
    updatedPaths[mergePath(basePath, path)] = document2.paths[path];
  });
  return {
    ...document2,
    paths: updatedPaths
  };
}
function isJSONContentType(contentType) {
  return /^application\/([a-z-\.]+\+)?json/.test(contentType);
}
function isFormContentType(contentType) {
  return contentType.startsWith("multipart/form-data") || contentType.startsWith("application/x-www-form-urlencoded");
}

// ../../node_modules/hono/dist/middleware/request-id/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/middleware/request-id/request-id.js
init_checked_fetch();
init_modules_watch_stub();
var requestId = ({
  limitLength = 255,
  headerName = "X-Request-Id",
  generator = () => crypto.randomUUID()
} = {}) => {
  return async function requestId2(c2, next) {
    let reqId = headerName ? c2.req.header(headerName) : void 0;
    if (!reqId || reqId.length > limitLength || /[^\w\-]/.test(reqId)) {
      reqId = generator(c2);
    }
    c2.set("requestId", reqId);
    if (headerName) {
      c2.header(headerName, reqId);
    }
    await next();
  };
};

// src/middleware.ts
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/helper/adapter/index.js
init_checked_fetch();
init_modules_watch_stub();
var env = (c2, runtime) => {
  const global2 = globalThis;
  const globalEnv = global2?.process?.env;
  runtime ??= getRuntimeKey();
  const runtimeEnvHandlers = {
    bun: () => globalEnv,
    node: () => globalEnv,
    "edge-light": () => globalEnv,
    deno: () => {
      return Deno.env.toObject();
    },
    workerd: () => c2.env,
    fastly: () => ({}),
    other: () => ({})
  };
  return runtimeEnvHandlers[runtime]();
};
var knownUserAgents = {
  deno: "Deno",
  bun: "Bun",
  workerd: "Cloudflare-Workers",
  node: "Node.js"
};
var getRuntimeKey = () => {
  const global2 = globalThis;
  const userAgentSupported = typeof navigator !== "undefined" && true;
  if (userAgentSupported) {
    for (const [runtimeKey, userAgent] of Object.entries(knownUserAgents)) {
      if (checkUserAgentEquals(userAgent)) {
        return runtimeKey;
      }
    }
  }
  if (typeof global2?.EdgeRuntime === "string") {
    return "edge-light";
  }
  if (global2?.fastly !== void 0) {
    return "fastly";
  }
  if (global2?.process?.release?.name === "node") {
    return "node";
  }
  return "other";
};
var checkUserAgentEquals = (platform) => {
  const userAgent = "Cloudflare-Workers";
  return userAgent.startsWith(platform);
};

// ../../node_modules/hono/dist/middleware/bearer-auth/index.js
init_checked_fetch();
init_modules_watch_stub();
var TOKEN_STRINGS = "[A-Za-z0-9._~+/-]+=*";
var PREFIX = "Bearer";
var HEADER = "Authorization";
var bearerAuth = (options) => {
  if (!("token" in options || "verifyToken" in options)) {
    throw new Error('bearer auth middleware requires options for "token"');
  }
  if (!options.realm) {
    options.realm = "";
  }
  if (options.prefix === void 0) {
    options.prefix = PREFIX;
  }
  const realm = options.realm?.replace(/"/g, '\\"');
  const prefixRegexStr = options.prefix === "" ? "" : `${options.prefix} +`;
  const regexp = new RegExp(`^${prefixRegexStr}(${TOKEN_STRINGS}) *$`);
  const wwwAuthenticatePrefix = options.prefix === "" ? "" : `${options.prefix} `;
  const throwHTTPException = async (c2, status, wwwAuthenticateHeader, messageOption) => {
    const headers = {
      "WWW-Authenticate": wwwAuthenticateHeader
    };
    const responseMessage = typeof messageOption === "function" ? await messageOption(c2) : messageOption;
    const res = typeof responseMessage === "string" ? new Response(responseMessage, { status, headers }) : new Response(JSON.stringify(responseMessage), {
      status,
      headers: {
        ...headers,
        "content-type": "application/json; charset=UTF-8"
      }
    });
    throw new HTTPException(status, { res });
  };
  return async function bearerAuth2(c2, next) {
    const headerToken = c2.req.header(options.headerName || HEADER);
    if (!headerToken) {
      await throwHTTPException(
        c2,
        401,
        `${wwwAuthenticatePrefix}realm="${realm}"`,
        options.noAuthenticationHeaderMessage || "Unauthorized"
      );
    } else {
      const match = regexp.exec(headerToken);
      if (!match) {
        await throwHTTPException(
          c2,
          400,
          `${wwwAuthenticatePrefix}error="invalid_request"`,
          options.invalidAuthenticationHeaderMessage || "Bad Request"
        );
      } else {
        let equal = false;
        if ("verifyToken" in options) {
          equal = await options.verifyToken(match[1], c2);
        } else if (typeof options.token === "string") {
          equal = await timingSafeEqual(options.token, match[1], options.hashFunction);
        } else if (Array.isArray(options.token) && options.token.length > 0) {
          for (const token of options.token) {
            if (await timingSafeEqual(token, match[1], options.hashFunction)) {
              equal = true;
              break;
            }
          }
        }
        if (!equal) {
          await throwHTTPException(
            c2,
            401,
            `${wwwAuthenticatePrefix}error="invalid_token"`,
            options.invalidTokenMessage || "Unauthorized"
          );
        }
      }
    }
    await next();
  };
};

// ../../node_modules/hono/dist/middleware/cache/index.js
init_checked_fetch();
init_modules_watch_stub();
var cache = (options) => {
  if (!globalThis.caches) {
    console.log("Cache Middleware is not enabled because caches is not defined.");
    return async (_c, next) => await next();
  }
  if (options.wait === void 0) {
    options.wait = false;
  }
  const cacheControlDirectives = options.cacheControl?.split(",").map((directive) => directive.toLowerCase());
  const varyDirectives = Array.isArray(options.vary) ? options.vary : options.vary?.split(",").map((directive) => directive.trim());
  if (options.vary?.includes("*")) {
    throw new Error(
      'Middleware vary configuration cannot include "*", as it disallows effective caching.'
    );
  }
  const addHeader = (c2) => {
    if (cacheControlDirectives) {
      const existingDirectives = c2.res.headers.get("Cache-Control")?.split(",").map((d2) => d2.trim().split("=", 1)[0]) ?? [];
      for (const directive of cacheControlDirectives) {
        let [name, value] = directive.trim().split("=", 2);
        name = name.toLowerCase();
        if (!existingDirectives.includes(name)) {
          c2.header("Cache-Control", `${name}${value ? `=${value}` : ""}`, { append: true });
        }
      }
    }
    if (varyDirectives) {
      const existingDirectives = c2.res.headers.get("Vary")?.split(",").map((d2) => d2.trim()) ?? [];
      const vary = Array.from(
        new Set(
          [...existingDirectives, ...varyDirectives].map((directive) => directive.toLowerCase())
        )
      ).sort();
      if (vary.includes("*")) {
        c2.header("Vary", "*");
      } else {
        c2.header("Vary", vary.join(", "));
      }
    }
  };
  return async function cache2(c2, next) {
    let key = c2.req.url;
    if (options.keyGenerator) {
      key = await options.keyGenerator(c2);
    }
    const cacheName = typeof options.cacheName === "function" ? await options.cacheName(c2) : options.cacheName;
    const cache3 = await caches.open(cacheName);
    const response = await cache3.match(key);
    if (response) {
      return new Response(response.body, response);
    }
    await next();
    if (!c2.res.ok) {
      return;
    }
    addHeader(c2);
    const res = c2.res.clone();
    if (options.wait) {
      await cache3.put(key, res);
    } else {
      c2.executionCtx.waitUntil(cache3.put(key, res));
    }
  };
};

// ../../node_modules/hono/dist/middleware/logger/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/color.js
init_checked_fetch();
init_modules_watch_stub();
function getColorEnabled() {
  const { process: process2, Deno: Deno2 } = globalThis;
  const isNoColor = typeof Deno2?.noColor === "boolean" ? Deno2.noColor : typeof process2 !== "undefined" ? "NO_COLOR" in process2?.env : false;
  return !isNoColor;
}

// ../../node_modules/hono/dist/middleware/logger/index.js
var humanize = (times) => {
  const [delimiter, separator] = [",", "."];
  const orderTimes = times.map((v2) => v2.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + delimiter));
  return orderTimes.join(separator);
};
var time = (start) => {
  const delta = Date.now() - start;
  return humanize([delta < 1e3 ? delta + "ms" : Math.round(delta / 1e3) + "s"]);
};
var colorStatus = (status) => {
  const colorEnabled = getColorEnabled();
  const out = {
    7: colorEnabled ? `\x1B[35m${status}\x1B[0m` : `${status}`,
    5: colorEnabled ? `\x1B[31m${status}\x1B[0m` : `${status}`,
    4: colorEnabled ? `\x1B[33m${status}\x1B[0m` : `${status}`,
    3: colorEnabled ? `\x1B[36m${status}\x1B[0m` : `${status}`,
    2: colorEnabled ? `\x1B[32m${status}\x1B[0m` : `${status}`,
    1: colorEnabled ? `\x1B[32m${status}\x1B[0m` : `${status}`,
    0: colorEnabled ? `\x1B[33m${status}\x1B[0m` : `${status}`
  };
  const calculateStatus = status / 100 | 0;
  return out[calculateStatus];
};
function log(fn, prefix, method, path, status = 0, elapsed) {
  const out = prefix === "<--" ? `${prefix} ${method} ${path}` : `${prefix} ${method} ${path} ${colorStatus(status)} ${elapsed}`;
  fn(out);
}
var logger = (fn = console.log) => {
  return async function logger22(c2, next) {
    const { method } = c2.req;
    const path = getPath(c2.req.raw);
    log(fn, "<--", method, path);
    const start = Date.now();
    await next();
    log(fn, "-->", method, path, c2.res.status, time(start));
  };
};

// ../../node_modules/hono/dist/middleware/secure-headers/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/middleware/secure-headers/secure-headers.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/utils/encode.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/hono/dist/middleware/secure-headers/secure-headers.js
var HEADERS_MAP = {
  crossOriginEmbedderPolicy: ["Cross-Origin-Embedder-Policy", "require-corp"],
  crossOriginResourcePolicy: ["Cross-Origin-Resource-Policy", "same-origin"],
  crossOriginOpenerPolicy: ["Cross-Origin-Opener-Policy", "same-origin"],
  originAgentCluster: ["Origin-Agent-Cluster", "?1"],
  referrerPolicy: ["Referrer-Policy", "no-referrer"],
  strictTransportSecurity: ["Strict-Transport-Security", "max-age=15552000; includeSubDomains"],
  xContentTypeOptions: ["X-Content-Type-Options", "nosniff"],
  xDnsPrefetchControl: ["X-DNS-Prefetch-Control", "off"],
  xDownloadOptions: ["X-Download-Options", "noopen"],
  xFrameOptions: ["X-Frame-Options", "SAMEORIGIN"],
  xPermittedCrossDomainPolicies: ["X-Permitted-Cross-Domain-Policies", "none"],
  xXssProtection: ["X-XSS-Protection", "0"]
};
var DEFAULT_OPTIONS = {
  crossOriginEmbedderPolicy: false,
  crossOriginResourcePolicy: true,
  crossOriginOpenerPolicy: true,
  originAgentCluster: true,
  referrerPolicy: true,
  strictTransportSecurity: true,
  xContentTypeOptions: true,
  xDnsPrefetchControl: true,
  xDownloadOptions: true,
  xFrameOptions: true,
  xPermittedCrossDomainPolicies: true,
  xXssProtection: true,
  removePoweredBy: true,
  permissionsPolicy: {}
};
var secureHeaders = (customOptions) => {
  const options = { ...DEFAULT_OPTIONS, ...customOptions };
  const headersToSet = getFilteredHeaders(options);
  const callbacks = [];
  if (options.contentSecurityPolicy) {
    const [callback, value] = getCSPDirectives(options.contentSecurityPolicy);
    if (callback) {
      callbacks.push(callback);
    }
    headersToSet.push(["Content-Security-Policy", value]);
  }
  if (options.contentSecurityPolicyReportOnly) {
    const [callback, value] = getCSPDirectives(options.contentSecurityPolicyReportOnly);
    if (callback) {
      callbacks.push(callback);
    }
    headersToSet.push(["Content-Security-Policy-Report-Only", value]);
  }
  if (options.permissionsPolicy && Object.keys(options.permissionsPolicy).length > 0) {
    headersToSet.push([
      "Permissions-Policy",
      getPermissionsPolicyDirectives(options.permissionsPolicy)
    ]);
  }
  if (options.reportingEndpoints) {
    headersToSet.push(["Reporting-Endpoints", getReportingEndpoints(options.reportingEndpoints)]);
  }
  if (options.reportTo) {
    headersToSet.push(["Report-To", getReportToOptions(options.reportTo)]);
  }
  return async function secureHeaders2(ctx, next) {
    const headersToSetForReq = callbacks.length === 0 ? headersToSet : callbacks.reduce((acc, cb) => cb(ctx, acc), headersToSet);
    await next();
    setHeaders2(ctx, headersToSetForReq);
    if (options?.removePoweredBy) {
      ctx.res.headers.delete("X-Powered-By");
    }
  };
};
function getFilteredHeaders(options) {
  return Object.entries(HEADERS_MAP).filter(([key]) => options[key]).map(([key, defaultValue]) => {
    const overrideValue = options[key];
    return typeof overrideValue === "string" ? [defaultValue[0], overrideValue] : defaultValue;
  });
}
function getCSPDirectives(contentSecurityPolicy) {
  const callbacks = [];
  const resultValues = [];
  for (const [directive, value] of Object.entries(contentSecurityPolicy)) {
    const valueArray = Array.isArray(value) ? value : [value];
    valueArray.forEach((value2, i2) => {
      if (typeof value2 === "function") {
        const index = i2 * 2 + 2 + resultValues.length;
        callbacks.push((ctx, values) => {
          values[index] = value2(ctx, directive);
        });
      }
    });
    resultValues.push(
      directive.replace(
        /[A-Z]+(?![a-z])|[A-Z]/g,
        (match, offset) => offset ? "-" + match.toLowerCase() : match.toLowerCase()
      ),
      ...valueArray.flatMap((value2) => [" ", value2]),
      "; "
    );
  }
  resultValues.pop();
  return callbacks.length === 0 ? [void 0, resultValues.join("")] : [
    (ctx, headersToSet) => headersToSet.map((values) => {
      if (values[0] === "Content-Security-Policy" || values[0] === "Content-Security-Policy-Report-Only") {
        const clone = values[1].slice();
        callbacks.forEach((cb) => {
          cb(ctx, clone);
        });
        return [values[0], clone.join("")];
      } else {
        return values;
      }
    }),
    resultValues
  ];
}
function getPermissionsPolicyDirectives(policy) {
  return Object.entries(policy).map(([directive, value]) => {
    const kebabDirective = camelToKebab(directive);
    if (typeof value === "boolean") {
      return `${kebabDirective}=${value ? "*" : "none"}`;
    }
    if (Array.isArray(value)) {
      if (value.length === 0) {
        return `${kebabDirective}=()`;
      }
      if (value.length === 1 && (value[0] === "*" || value[0] === "none")) {
        return `${kebabDirective}=${value[0]}`;
      }
      const allowlist = value.map((item) => ["self", "src"].includes(item) ? item : `"${item}"`);
      return `${kebabDirective}=(${allowlist.join(" ")})`;
    }
    return "";
  }).filter(Boolean).join(", ");
}
function camelToKebab(str) {
  return str.replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
}
function getReportingEndpoints(reportingEndpoints = []) {
  return reportingEndpoints.map((endpoint) => `${endpoint.name}="${endpoint.url}"`).join(", ");
}
function getReportToOptions(reportTo = []) {
  return reportTo.map((option) => JSON.stringify(option)).join(", ");
}
function setHeaders2(ctx, headersToSet) {
  headersToSet.forEach(([header, value]) => {
    ctx.res.headers.set(header, value);
  });
}

// src/utils/logger.ts
init_checked_fetch();
init_modules_watch_stub();
var logger2 = (message, ...rest) => {
  console.log(message, ...rest);
};

// src/middleware.ts
var PUBLIC_PATHS = ["/", "/openapi", "/health"];
var authMiddleware = (c2, next) => {
  if (PUBLIC_PATHS.includes(c2.req.path)) {
    return next();
  }
  const { API_SECRET_KEY } = env(c2);
  const bearer = bearerAuth({ token: API_SECRET_KEY });
  return bearer(c2, next);
};
var cacheMiddleware = (c2, next) => {
  if (true) {
    return next();
  }
  return cache({
    cacheName: "engine",
    cacheControl: "max-age=3600"
  })(c2, next);
};
var securityMiddleware = secureHeaders();
var loggingMiddleware = logger(logger2);

// src/routes/accounts/index.ts
init_checked_fetch();
init_modules_watch_stub();

// src/common/schema.ts
init_checked_fetch();
init_modules_watch_stub();
var ErrorSchema = z.object({
  code: z.string().openapi({
    example: "disconnected"
  }),
  message: z.string().openapi({
    example: "The login details of this item have changed (credentials, MFA, or required user action) and a user login is required to update this information."
  }),
  requestId: z.string().openapi({
    example: "123e4567-e89b-12d3-a456-426655440000"
  })
});
var GeneralErrorSchema = z.object({
  code: z.string().openapi({
    example: "internal_server_error"
  }),
  message: z.string().openapi({
    example: "Internal server error"
  }),
  requestId: z.string().openapi({
    example: "123e4567-e89b-12d3-a456-426655440000"
  })
});
var Providers = z.enum(["teller", "plaid", "gocardless"]);
var HeadersSchema = z.object({
  authorization: z.string().openapi({
    example: "Bearer SECRET"
  })
});

// src/providers/index.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/retry.ts
init_checked_fetch();
init_modules_watch_stub();
async function withRetry(fn, {
  maxRetries = 3,
  onError,
  delay
} = {}) {
  let retries = 0;
  let lastError;
  while (retries <= maxRetries) {
    if (delay && retries > 0) {
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
    try {
      const res = await fn(retries);
      return res;
    } catch (err) {
      lastError = err;
      if (onError) {
        const shouldRetry = onError(err, retries);
        if (!shouldRetry) {
          break;
        }
      }
      retries++;
    }
  }
  throw lastError;
}

// src/providers/gocardless/gocardless-provider.ts
init_checked_fetch();
init_modules_watch_stub();

// src/providers/gocardless/gocardless-api.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/error.ts
init_checked_fetch();
init_modules_watch_stub();
var ProviderError = class extends Error {
  code;
  constructor({ message, code }) {
    super(message);
    this.code = this.setCode(code);
  }
  setCode(code) {
    if (this.message === "The requested account is closed") {
      return "disconnected";
    }
    if (this.message.startsWith("EUA was valid for")) {
      return "disconnected";
    }
    switch (code) {
      case "enrollment.disconnected":
      case "enrollment.disconnected.user_action.mfa_required":
      case "enrollment.disconnected.account_locked":
      case "enrollment.disconnected.credentials_invalid":
      case "enrollment.disconnected.enrollment_inactive":
      case "enrollment.disconnected.user_action.contact_information_required":
      case "enrollment.disconnected.user_action.insufficient_permissions":
      case "enrollment.disconnected.user_action.captcha_required":
      case "enrollment.disconnected.user_action.web_login_required":
      case "ITEM_LOGIN_REQUIRED":
      case "ITEM_LOCKED":
      case "ITEM_CONCURRENTLY_DELETED":
      case "ACCESS_NOT_GRANTED":
      case "AccessExpiredError":
      case "AccountInactiveError":
      case "Account suspended":
        logger2("disconnected", this.message);
        return "disconnected";
      default:
        logger2("unknown", this.message);
        return "unknown";
    }
  }
};
function createErrorResponse(error, requestId2) {
  if (error instanceof ProviderError) {
    return {
      requestId: requestId2,
      message: error.message,
      code: error.code
    };
  }
  return {
    requestId: requestId2,
    message: String(error),
    code: "unknown"
  };
}

// ../../node_modules/date-fns/toDate.mjs
init_checked_fetch();
init_modules_watch_stub();
function toDate(argument) {
  const argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new argument.constructor(+argument);
  } else if (typeof argument === "number" || argStr === "[object Number]" || typeof argument === "string" || argStr === "[object String]") {
    return new Date(argument);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
}

// ../../node_modules/date-fns/constructFrom.mjs
init_checked_fetch();
init_modules_watch_stub();
function constructFrom(date, value) {
  if (date instanceof Date) {
    return new date.constructor(value);
  } else {
    return new Date(value);
  }
}

// ../../node_modules/date-fns/addMonths.mjs
init_checked_fetch();
init_modules_watch_stub();
function addMonths(date, amount) {
  const _date = toDate(date);
  if (isNaN(amount))
    return constructFrom(date, NaN);
  if (!amount) {
    return _date;
  }
  const dayOfMonth = _date.getDate();
  const endOfDesiredMonth = constructFrom(date, _date.getTime());
  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    _date.setFullYear(
      endOfDesiredMonth.getFullYear(),
      endOfDesiredMonth.getMonth(),
      dayOfMonth
    );
    return _date;
  }
}

// ../../node_modules/date-fns/_lib/addLeadingZeros.mjs
init_checked_fetch();
init_modules_watch_stub();
function addLeadingZeros(number, targetLength) {
  const sign = number < 0 ? "-" : "";
  const output = Math.abs(number).toString().padStart(targetLength, "0");
  return sign + output;
}

// ../../node_modules/date-fns/formatISO.mjs
init_checked_fetch();
init_modules_watch_stub();
function formatISO(date, options) {
  const _date = toDate(date);
  if (isNaN(_date.getTime())) {
    throw new RangeError("Invalid time value");
  }
  const format = options?.format ?? "extended";
  const representation = options?.representation ?? "complete";
  let result = "";
  let tzOffset = "";
  const dateDelimiter = format === "extended" ? "-" : "";
  const timeDelimiter = format === "extended" ? ":" : "";
  if (representation !== "time") {
    const day = addLeadingZeros(_date.getDate(), 2);
    const month = addLeadingZeros(_date.getMonth() + 1, 2);
    const year = addLeadingZeros(_date.getFullYear(), 4);
    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
  }
  if (representation !== "date") {
    const offset = _date.getTimezoneOffset();
    if (offset !== 0) {
      const absoluteOffset = Math.abs(offset);
      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);
      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);
      const sign = offset < 0 ? "+" : "-";
      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;
    } else {
      tzOffset = "Z";
    }
    const hour = addLeadingZeros(_date.getHours(), 2);
    const minute = addLeadingZeros(_date.getMinutes(), 2);
    const second = addLeadingZeros(_date.getSeconds(), 2);
    const separator = result === "" ? "" : "T";
    const time2 = [hour, minute, second].join(timeDelimiter);
    result = `${result}${separator}${time2}${tzOffset}`;
  }
  return result;
}

// ../../node_modules/date-fns/subMonths.mjs
init_checked_fetch();
init_modules_watch_stub();
function subMonths(date, amount) {
  return addMonths(date, -amount);
}

// ../../node_modules/xior/dist/index.mjs
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/xior/utils/index.mjs
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/ts-deepmerge/esm/index.js
init_checked_fetch();
init_modules_watch_stub();
var isObject = (obj) => {
  if (typeof obj === "object" && obj !== null) {
    if (typeof Object.getPrototypeOf === "function") {
      const prototype3 = Object.getPrototypeOf(obj);
      return prototype3 === Object.prototype || prototype3 === null;
    }
    return Object.prototype.toString.call(obj) === "[object Object]";
  }
  return false;
};
var merge = (...objects) => objects.reduce((result, current) => {
  if (Array.isArray(current)) {
    throw new TypeError("Arguments provided to ts-deepmerge must be objects, not arrays.");
  }
  Object.keys(current).forEach((key) => {
    if (["__proto__", "constructor", "prototype"].includes(key)) {
      return;
    }
    if (Array.isArray(result[key]) && Array.isArray(current[key])) {
      result[key] = merge.options.mergeArrays ? merge.options.uniqueArrayItems ? Array.from(new Set(result[key].concat(current[key]))) : [...result[key], ...current[key]] : current[key];
    } else if (isObject(result[key]) && isObject(current[key])) {
      result[key] = merge(result[key], current[key]);
    } else {
      result[key] = current[key] === void 0 ? merge.options.allowUndefinedOverrides ? current[key] : result[key] : current[key];
    }
  });
  return result;
}, {});
var defaultOptions = {
  allowUndefinedOverrides: true,
  mergeArrays: true,
  uniqueArrayItems: true
};
merge.options = defaultOptions;
merge.withOptions = (options, ...objects) => {
  merge.options = Object.assign(Object.assign({}, defaultOptions), options);
  const result = merge(...objects);
  merge.options = defaultOptions;
  return result;
};

// ../../node_modules/xior/utils/index.mjs
function e(e2, r) {
  let t = new globalThis.AbortController();
  function n2(e3) {
    t.abort(e3), i2();
  }
  let o2 = [];
  for (let r2 of e2) {
    if ((null == r2 ? void 0 : r2.aborted) === true) {
      n2(r2.reason);
      break;
    }
    if ((null == r2 ? void 0 : r2.addEventListener) != null) {
      let e3 = () => {
        n2(r2.reason);
      };
      o2.push(() => {
        (null == r2 ? void 0 : r2.removeEventListener) != null && r2.removeEventListener("abort", e3);
      }), r2.addEventListener("abort", e3);
    }
  }
  function i2() {
    o2.forEach((e3) => {
      e3();
    }), null == r || r();
  }
  let s2 = t.signal;
  return s2.clear = i2, s2;
}
var n = void 0;
function o(e2, r = true, t = null, i2) {
  if (e2 === n || null === e2)
    return "";
  let s2 = [], l3 = r ? encodeURIComponent : (e3) => e3, u3 = Array.isArray(e2), { arrayFormat: a2, allowDots: f2, serializeDate: c2 } = i2 || {}, d2 = (e3) => {
    if (f2 && !u3)
      return `.${e3}`;
    if (u3) {
      if ("brackets" === a2)
        return "[]";
      if ("repeat" === a2)
        return "";
    }
    return `[${e3}]`;
  };
  for (let u4 in e2)
    if (Object.prototype.hasOwnProperty.call(e2, u4)) {
      let a3 = e2[u4];
      if (a3 !== n) {
        let e3 = t ? `${t}${d2(u4)}` : u4;
        if (!isNaN(a3) && a3 instanceof Date && (a3 = c2 ? c2(a3) : a3.toISOString()), "object" == typeof a3) {
          let t2 = o(a3, r, e3, i2);
          "" !== t2 && s2.push(t2);
        } else
          s2.push(`${l3(e3)}=${l3(a3)}`);
      }
    }
  return s2.join("&");
}
function i(e2) {
  return Array.isArray(e2) ? e2.map(i) : (e2 && "object" == typeof e2 && Object.keys(e2).forEach((r) => {
    let t = e2[r];
    if (t !== n)
      return i(t);
    delete e2[r];
  }), e2);
}
function s(e2) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e2);
}
function l(e2, r) {
  return r ? (e2.endsWith("/") ? e2 : e2 + "/") + ("/" === r[0] ? r.slice(1) : r) : e2;
}
var u = class extends Error {
  constructor(e2, r, t) {
    super(e2), this.name = "XiorError", this.request = r, this.config = r, this.response = t;
  }
};
var a = class extends u {
  constructor(e2, r, t) {
    super(e2), this.name = "XiorTimeoutError", this.request = r, this.config = r, this.response = t;
  }
};

// ../../node_modules/xior/dist/index.mjs
function u2(t, e2, r, n2, i2, s2, a2) {
  try {
    var o2 = t[s2](a2), u3 = o2.value;
  } catch (t2) {
    r(t2);
    return;
  }
  o2.done ? e2(u3) : Promise.resolve(u3).then(n2, i2);
}
function l2() {
  return (l2 = Object.assign || function(t) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r = arguments[e2];
      for (var n2 in r)
        Object.prototype.hasOwnProperty.call(r, n2) && (t[n2] = r[n2]);
    }
    return t;
  }).apply(this, arguments);
}
var c = "application/";
var f = `${c}x-www-form-urlencoded`;
var h = `${c}json`;
var d = "undefined" != typeof URLSearchParams;
function p() {
  var r;
  return r = function* (r2) {
    let n2 = r2.paramsSerializer || o, i2 = false !== r2.encodeURI, s2 = r2.method ? r2.method.toUpperCase() : "GET", a2 = r2.url || "", u3 = a2, c2 = d && r2.data && r2.data instanceof URLSearchParams, p2 = c2 ? Object.fromEntries(r2.data) : r2.data, m2 = p2, y2 = (null == r2 ? void 0 : r2.headers) || {}, E2 = r2.params || {}, v2 = function(t = "GET") {
      return ["HEAD", "GET", "OPTIONS"].includes(t);
    }(s2);
    if (p2 && !(p2 instanceof FormData)) {
      let e2 = "", i3 = "content-type";
      if (null == r2 ? void 0 : r2.headers) {
        let t = Object.keys(r2.headers).find((t2) => t2.toLowerCase() === i3);
        t && (i3 = t, e2 = r2.headers[t]);
      }
      (!e2 || c2) && (e2 = v2 || c2 ? f : h, y2[i3] = e2), "object" != typeof p2 || (v2 && r2.params && (E2 = merge({}, p2 || {}, E2)), e2 === h ? m2 = JSON.stringify(i(p2)) : v2 || e2 !== f || (m2 = n2(p2)));
    }
    if (Object.keys(E2).length > 0) {
      let t = n2(E2, i2);
      a2 += a2.includes("?") ? `&${t}` : `?${t}`;
    }
    return l2({}, r2, { _data: m2, _url: a2, data: p2, url: u3, method: s2, headers: y2, isGet: v2 });
  }, (p = function() {
    var t = this, e2 = arguments;
    return new Promise(function(n2, i2) {
      var s2 = r.apply(t, e2);
      function a2(t2) {
        u2(s2, n2, i2, a2, o2, "next", t2);
      }
      function o2(t2) {
        u2(s2, n2, i2, a2, o2, "throw", t2);
      }
      a2(void 0);
    });
  }).apply(this, arguments);
}
function m(t, e2, r, n2, i2, s2, a2) {
  try {
    var o2 = t[s2](a2), u3 = o2.value;
  } catch (t2) {
    r(t2);
    return;
  }
  o2.done ? e2(u3) : Promise.resolve(u3).then(n2, i2);
}
function y(t) {
  return function() {
    var e2 = this, r = arguments;
    return new Promise(function(n2, i2) {
      var s2 = t.apply(e2, r);
      function a2(t2) {
        m(s2, n2, i2, a2, o2, "next", t2);
      }
      function o2(t2) {
        m(s2, n2, i2, a2, o2, "throw", t2);
      }
      a2(void 0);
    });
  };
}
function E() {
  return (E = Object.assign || function(t) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r = arguments[e2];
      for (var n2 in r)
        Object.prototype.hasOwnProperty.call(r, n2) && (t[n2] = r[n2]);
    }
    return t;
  }).apply(this, arguments);
}
var v = void 0;
var P = typeof AbortController != `${v}`;
function R() {
  return (R = y(function* (t, e2) {
    let r;
    if (!e2 || !t.ok || ["text", "json"].includes(e2)) {
      if ((r = yield t.text()) && "text" !== e2)
        try {
          r = JSON.parse(r);
        } catch (t2) {
        }
    } else if ("blob" === e2)
      return t.blob();
    else if ("arraybuffer" === e2)
      return t.arrayBuffer();
    return r;
  })).apply(this, arguments);
}
var b = class {
  static create(t) {
    return new b(t);
  }
  get interceptors() {
    return { request: { use: (t, e2, r) => (this.REQI.push(t), t), eject: (t) => {
      this.REQI = this.REQI.filter((e2) => e2 !== t);
    }, clear: () => {
      this.REQI = [];
    } }, response: { use: (t, e2) => (this.RESI.push({ fn: t, onRejected: e2 }), t), eject: (t) => {
      this.RESI = this.RESI.filter((e2) => e2.fn !== t);
    }, clear: () => {
      this.RESI = [];
    } } };
  }
  get plugins() {
    return { use: (t) => (this.P.push(t), t), eject: (t) => {
      this.P = this.P.filter((e2) => e2 !== t);
    }, clear: () => {
      this.P = [];
    } };
  }
  request(r) {
    var n2 = this;
    return y(function* () {
      let i2 = merge({}, n2.config || {}, n2.defaults || {}, "string" == typeof r ? { url: r } : r || {}, { headers: {}, params: {} });
      for (let t of (i2.withCredentials && !i2.credentials && (i2.credentials = "include"), i2.paramsSerializer || (i2.paramsSerializer = o), n2.REQI))
        i2 = yield t(i2);
      let s2 = n2.fetch.bind(n2);
      n2.P.forEach((t) => {
        s2 = t(s2, n2);
      });
      let a2 = s2(i2);
      if (!i2._RESIRun) {
        let t = 0, e2 = [];
        for (n2.RESI.forEach(function(t2) {
          e2.push(t2.fn, t2.onRejected);
        }); e2.length > t; )
          a2 = a2.then(e2[t++], e2[t++]);
      }
      return a2;
    })();
  }
  fetch(t) {
    return y(function* () {
      let e2;
      let o2 = yield function(t2) {
        return p.apply(this, arguments);
      }(t), { url: u3, method: l3, headers: c2, timeout: f2, signal: h2, data: d2, _data: m2, _url: b2, isGet: O2 } = o2, g = function(t2, e3) {
        if (null == t2)
          return {};
        var r, n2, i2 = {}, s2 = Object.keys(t2);
        for (n2 = 0; n2 < s2.length; n2++)
          e3.indexOf(r = s2[n2]) >= 0 || (i2[r] = t2[r]);
        return i2;
      }(o2, ["url", "method", "headers", "timeout", "signal", "data", "_data", "_url", "isGet"]);
      t._url = b2;
      let S = [], I = v;
      if (f2 && P) {
        let e3 = new AbortController();
        I = setTimeout(() => {
          e3.abort(new a(`timeout of ${f2}ms exceeded`, t));
        }, f2), S.push(e3.signal);
      }
      h2 && S.push(h2), e2 = S[0], S.length > 1 && (e2 = e(S, () => {
        clearTimeout(I);
      }));
      let j = b2 || u3;
      return t.baseURL && !s(j) && (j = l(t.baseURL, j)), fetch(j, E({ body: O2 ? v : m2 }, g, { signal: e2, method: l3, headers: c2 })).then(y(function* (e3) {
        let { responseType: r } = t, n2 = { data: yield function(t2, e4) {
          return R.apply(this, arguments);
        }(e3, r), response: e3, config: t, request: t, status: e3.status, statusText: e3.statusText, headers: e3.headers };
        return e3.ok ? n2 : Promise.reject(new u(e3.status ? `Request failed with status code ${e3.status}` : "Network error", t, n2));
      })).finally(() => {
        var t2;
        I && clearTimeout(I), null == e2 || null == (t2 = e2.clear) || t2.call(e2);
      });
    })();
  }
  cG(t) {
    return (e2, r) => this.request(r ? E({}, r, { method: t, url: e2 }) : { method: t, url: e2 });
  }
  cP(t) {
    return (e2, r, n2) => this.request(n2 ? E({}, n2, { method: t, url: e2, data: r }) : { method: t, url: e2, data: r });
  }
  get(t, e2) {
    return this.cG("GET")(t, e2);
  }
  head(t, e2) {
    return this.cG("HEAD")(t, e2);
  }
  post(t, e2, r) {
    return this.cP("POST")(t, e2, r);
  }
  put(t, e2, r) {
    return this.cP("PUT")(t, e2, r);
  }
  patch(t, e2, r) {
    return this.cP("PATCH")(t, e2, r);
  }
  delete(t, e2) {
    return this.cG("DELETE")(t, e2);
  }
  options(t, e2) {
    return this.cG("OPTIONS")(t, e2);
  }
  constructor(t) {
    this.REQI = [], this.RESI = [], this.P = [], this.config = t, this.defaults = { params: {}, headers: {} };
  }
};
b.VERSION = "0.6.1";
var O = Object.assign(b.create(), { create: b.create, VERSION: b.VERSION });

// src/providers/gocardless/utils.ts
init_checked_fetch();
init_modules_watch_stub();
function isError(error) {
  if (!error)
    return false;
  const goCardLessError = error;
  return {
    code: goCardLessError.response.data.type || goCardLessError.response.data.summary,
    message: goCardLessError.response.data.detail
  };
}
function getMaxHistoricalDays({
  transactionTotalDays,
  institutionId
}) {
  const RESTRICTED_TO_90DAYS = [
    "BRED_BREDFRPP",
    "SWEDBANK_SWEDSESS",
    "INDUSTRA_MULTLV2X",
    "MEDICINOSBANK_MDBALT22",
    "CESKA_SPORITELNA_LONG_GIBACZPX",
    "LHV_LHVBEE22",
    "BRED_BREDFRPP",
    "LABORALKUTXA_CLPEES2M",
    "BANKINTER_BKBKESMM",
    "CAIXABANK_CAIXESBB",
    "JEKYLL_JEYKLL002",
    "SANTANDER_DE_SCFBDE33",
    "BBVA_BBVAESMM",
    "BANCA_AIDEXA_AIDXITMM",
    "BANCA_PATRIMONI_SENVITT1",
    "BANCA_SELLA_SELBIT2B",
    "CARTALIS_CIMTITR1",
    "DOTS_HYEEIT22",
    "HYPE_BUSINESS_HYEEIT22",
    "HYPE_HYEEIT2",
    "ILLIMITY_ITTPIT2M",
    "SMARTIKA_SELBIT22",
    "TIM_HYEEIT22",
    "TOT_SELBIT2B",
    "OPYN_BITAITRRB2B",
    "PAYTIPPER_PAYTITM1",
    "SELLA_PERSONAL_CREDIT_SELBIT22"
    // "LUMINOR_", TODO: Fix based on country (all countries)
    // 'SEB_', (Baltics)
  ];
  const RESTRICTED_TO_180DAYS = ["COOP_EKRDEE22"];
  if (RESTRICTED_TO_90DAYS.some((str) => str.startsWith(institutionId))) {
    return 90;
  }
  if (RESTRICTED_TO_180DAYS.some((str) => str.startsWith(institutionId))) {
    return 180;
  }
  return transactionTotalDays;
}
function getAccessValidForDays({
  institutionId
}) {
  const RESTRICTED_TO_90DAYS = [
    "CUMBERLAND_CMBSGB2A",
    "NEWDAY_AMAZON_NEWDUK00X01",
    "NEWDAY_NEWPAY_NEWDUK00X15",
    "NEWDAY_BIP_NEWDUK00X05",
    "NEWDAY_ARGOS_NEWDUK00X04",
    "NEWDAY_MARBLES_NEWDUK00X13",
    "NEWDAY_WALLIS_NEWDUK00X21",
    "NEWDAY_HOUSEOFFRASER_NEWDUK00X11",
    "NEWDAY_EVANS_NEWDUK00X09",
    "NEWDAY_BURTON_NEWDUK00X06",
    "NEWDAY_AQUA_NEWDUK00X02",
    "NEWDAY_TUI_NEWDUK00X20",
    "NEWDAY_DEBENHAMS_NEWDUK00X07",
    "NEWDAY_OPUS_NEWDUK00X16",
    "NEWDAY_FLUID_NEWDUK00X10",
    "NEWDAY_PULSE_NEWDUK00X17",
    "NEWDAY_DOROTHYPERKINS_NEWDUK00X08",
    "CATER_ALLEN_CATEGB21",
    "ONEPAY_1PAYGB00",
    "BANK_OF_IRELAND_BUSINESS_ONLINE_BOFIGB2B",
    "BANK_OF_IRELAND_B365_BOFIGB2B",
    "LOMBARD_ODIER_GB_LOCYGB2L",
    "HOARES_HOABGB2L",
    "CHASE_CHASGB2L",
    "ABNAMRO_ABNAGB2L",
    "UBS_UBSWGB2L",
    "CAXTON_CAXTGB2L",
    "EBURY_EBURGB2L",
    "COUTTS_COUTGB22",
    "ALPHA_FX_APAHGB2L",
    "CYNERGY_BCYPGB2L",
    "CASHPLUS_NWBKGB2L",
    "MONZO_MONZGB2L",
    "HANDELSBANKEN_HANDGB22",
    "HANDELSBANKEN_CORPORATE_HANDGB22",
    "SAINSBURYS_SANBGB21",
    "TESCOBANK_TPFGGB2E",
    "BBVAUK_BBVAGB2L",
    "STARLING_SRLGGB3L",
    "REVOLUT_REVOGB21",
    "SANTANDER_GB_ABBYGB2L",
    "TIDE_TIDEGB00X01",
    "SVB_SVBKGB2L",
    "FIRST_DIRECT_MIDLGB22",
    "MNS_MSFEGB21",
    "HSBC_KINETIC_HBUKGB4B",
    "HSBC_BUSINESS_HBUKGB4B",
    "HSBC_HBUKGB4B",
    "HSBC_NET_HBUKGB4B",
    "ARBUTHNOT_LATHAM_ARBUGB2L",
    "CHE_CHELGB21",
    "YBS_YORBGB2V",
    "NATWEST_NWBKGB2L",
    "RBS_GB_RBSSGBKC",
    "NATWEST_CORP_NWBKGB2L",
    "ADAM_COMPANY_ACIMGB21",
    "RBS_GB_CORP_RBSSGBKC",
    "RBS_GB_CS_RBSSGBKC",
    "NATWEST_CS_NWBKGB2L",
    "ULSTER_ULSBGB2B",
    "NATWEST_INTERNATONAL_RBOSGIGI",
    "VANQUIS_VQISGB21",
    "NATIONWIDE_NAIAGB21",
    "CAPITALONE_NFBKUSF1",
    "DANSKEBANK_DABAGB2B",
    "DANSKEBANK_BUSINESS_DABAGB2B",
    "UNION_UBPGGB2X",
    "WISE_TRWIGB22",
    "TRIODOS_TRIOGB22",
    "AMERICAN_EXPRESS_AESUGB21",
    "BARCLAYS_CORPORATE_BUKBGB22",
    "BARCLAYS_BUSINESS_BUKBGB22",
    "BARCLAYCARD_COMMERCIAL_BUKBGB22",
    "BARCLAYCARD_BUKBGB22",
    "BARCLAYS_BUKBGB22",
    "BARCLAYS_WEALTH_BUKBGB22",
    "VIRGIN_NRNBGB22",
    "GLOBALREACH_GRPLGB2L",
    "COOPERATIVE_CPBKGB22",
    "UNITY_TRUST_UYTBGB22",
    "AIRWALLEX_AIPTAU32",
    "SOLDO_SOAVGB21",
    "GOHENRY_IDFEGIG1",
    "GHANA_GHIBGB2L",
    "THINKMONEY_THKMGB21",
    "METTLE_NWBKGB2L",
    "HARGREAVES_LANSDOWN_HLSVGB22",
    "MONESE_MNEEGB21",
    "TSB_GB_TSBSGB2A",
    "AIB_FTBKGB2B",
    "AIB_AIBKGB2L",
    "AIB_CORP_AIBKGB2L",
    "FINECO_UK_FEBIITM2",
    "CREDITSUISSE_CSUKGB2L",
    "SMBC_SMBCGB2L",
    "MBNA_MBNAGB22",
    "LLOYDS_COMMERCIAL_LOYDGB2L",
    "LLOYDS_BUSINESS_LOYDGB2L",
    "BANK_OF_SCOTLAND_BOFSGBS1",
    "BANK_OF_SCOTLAND_BUSINESS_BOFSGBS1",
    "LLOYDS_LOYDGB2L",
    "HALIFAX_HLFXGB22",
    "BANK_OF_SCOTLAND_COMMERCIAL_BOFSGBS1"
  ];
  if (RESTRICTED_TO_90DAYS.some((str) => str.startsWith(institutionId))) {
    return 90;
  }
  return 180;
}

// src/providers/gocardless/gocardless-api.ts
var GoCardLessApi = class {
  #baseUrl = "https://bankaccountdata.gocardless.com";
  #api = null;
  // Cache keys
  #accessTokenCacheKey = "gocardless_access_token";
  #refreshTokenCacheKey = "gocardless_refresh_token";
  #institutionsCacheKey = "gocardless_institutions";
  #kv;
  #oneHour = 3600;
  #secretKey;
  #secretId;
  constructor(params) {
    this.#kv = params.kv;
    this.#secretId = params.envs.GOCARDLESS_SECRET_ID;
    this.#secretKey = params.envs.GOCARDLESS_SECRET_KEY;
  }
  async getHealthCheck() {
    try {
      await this.#get("/api/v2/swagger.json");
      return true;
    } catch {
      return false;
    }
  }
  async #getRefreshToken(refresh) {
    const response = await this.#post(
      "/api/v2/token/refresh/",
      void 0,
      {
        refresh
      }
    );
    await this.#kv?.put(this.#accessTokenCacheKey, response.access, {
      expirationTtl: response.access_expires - this.#oneHour
    });
    return response.refresh;
  }
  async #getAccessToken() {
    const [accessToken, refreshToken] = await Promise.all([
      this.#kv?.get(this.#accessTokenCacheKey),
      this.#kv?.get(this.#refreshTokenCacheKey)
    ]);
    if (typeof accessToken === "string") {
      return accessToken;
    }
    if (typeof refreshToken === "string") {
      return this.#getRefreshToken(refreshToken);
    }
    const response = await this.#post(
      "/api/v2/token/new/",
      void 0,
      {
        secret_id: this.#secretId,
        secret_key: this.#secretKey
      }
    );
    await Promise.all([
      this.#kv?.put(this.#accessTokenCacheKey, response.access, {
        expirationTtl: response.access_expires - this.#oneHour
      }),
      this.#kv?.put(this.#refreshTokenCacheKey, response.refresh, {
        expirationTtl: response.refresh_expires - this.#oneHour
      })
    ]);
    return response.access;
  }
  async getAccountBalance(accountId) {
    const token = await this.#getAccessToken();
    try {
      const { balances } = await this.#get(
        `/api/v2/accounts/${accountId}/balances/`,
        token
      );
      const foundAccount = balances?.find(
        (account) => account.balanceType === "interimAvailable"
      );
      return foundAccount?.balanceAmount;
    } catch (error) {
      const parsedError = isError(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async getInstitutions(params) {
    const countryCode = params?.countryCode;
    const cacheKey = `${this.#institutionsCacheKey}_${countryCode}`;
    const institutions = await this.#kv?.get(cacheKey);
    if (institutions) {
      return JSON.parse(institutions);
    }
    const token = await this.#getAccessToken();
    const response = await this.#get(
      "/api/v2/institutions/",
      token,
      void 0,
      {
        params: {
          country: countryCode
        }
      }
    );
    this.#kv?.put(cacheKey, JSON.stringify(response), {
      expirationTtl: this.#oneHour
    });
    if (countryCode) {
      return response.filter(
        (institution) => institution.countries.includes(countryCode)
      );
    }
    return response;
  }
  async buildLink({
    institutionId,
    agreement,
    redirect
  }) {
    const token = await this.#getAccessToken();
    return this.#post(
      "/api/v2/requisitions/",
      token,
      {
        redirect,
        institution_id: institutionId,
        agreement
      }
    );
  }
  async createEndUserAgreement({
    institutionId,
    transactionTotalDays
  }) {
    const token = await this.#getAccessToken();
    const maxHistoricalDays = getMaxHistoricalDays({
      institutionId,
      transactionTotalDays
    });
    return this.#post(
      "/api/v2/agreements/enduser/",
      token,
      {
        institution_id: institutionId,
        access_scope: ["balances", "details", "transactions"],
        access_valid_for_days: getAccessValidForDays({ institutionId }),
        max_historical_days: maxHistoricalDays
      }
    );
  }
  async getAccountDetails(id) {
    const token = await this.#getAccessToken();
    const [account, details] = await Promise.all([
      this.#get(`/api/v2/accounts/${id}/`, token),
      this.#get(
        `/api/v2/accounts/${id}/details/`,
        token
      )
    ]);
    return {
      ...account,
      ...details
    };
  }
  async getInstitution(id) {
    const token = await this.#getAccessToken();
    return this.#get(
      `/api/v2/institutions/${id}/`,
      token
    );
  }
  async getAccounts({
    id
  }) {
    try {
      const response = await this.getRequestion(id);
      if (!response?.accounts) {
        return void 0;
      }
      return Promise.all(
        response.accounts.map(async (acountId) => {
          const [details, balance, institution] = await Promise.all([
            this.getAccountDetails(acountId),
            this.getAccountBalance(acountId),
            this.getInstitution(response.institution_id)
          ]);
          return {
            balance,
            institution,
            ...details
          };
        })
      );
    } catch (error) {
      const parsedError = isError(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async getTransactions({
    accountId,
    latest
  }) {
    const token = await this.#getAccessToken();
    try {
      const response = await this.#get(
        `/api/v2/accounts/${accountId}/transactions/`,
        token,
        latest ? {
          date_from: formatISO(subMonths(/* @__PURE__ */ new Date(), 1), {
            representation: "date"
          })
        } : void 0
      );
      return response?.transactions?.booked;
    } catch (error) {
      const parsedError = isError(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async getRequisitions() {
    const token = await this.#getAccessToken();
    return this.#get("/api/v2/requisitions/", token);
  }
  async getRequestion(id) {
    try {
      const token = await this.#getAccessToken();
      return this.#get(
        `/api/v2/requisitions/${id}/`,
        token
      );
    } catch (error) {
      const parsedError = isError(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async deleteRequisition(id) {
    const token = await this.#getAccessToken();
    return this.#_delete(
      `/api/v2/requisitions/${id}/`,
      token
    );
  }
  async #getApi(accessToken) {
    if (!this.#api) {
      this.#api = O.create({
        baseURL: this.#baseUrl,
        timeout: 3e4,
        headers: {
          Accept: "application/json",
          ...accessToken && { Authorization: `Bearer ${accessToken}` }
        }
      });
    }
    return this.#api;
  }
  async #get(path, token, params, config) {
    const api = await this.#getApi(token);
    return api.get(path, { params, ...config }).then(({ data }) => data);
  }
  async #post(path, token, body, config) {
    const api = await this.#getApi(token);
    return api.post(path, body, config).then(({ data }) => data);
  }
  async #_delete(path, token, params, config) {
    const api = await this.#getApi(token);
    return api.delete(path, { params, ...config }).then(({ data }) => data);
  }
};

// src/providers/gocardless/transform.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/logo.ts
init_checked_fetch();
init_modules_watch_stub();
function getLogoURL(id, ext) {
  return `https://cdn-engine.midday.ai/${id}.${ext || "jpg"}`;
}
function getFileExtension(url) {
  return url.split(".").pop();
}

// ../../node_modules/change-case/dist/index.js
init_checked_fetch();
init_modules_watch_stub();
var SPLIT_LOWER_UPPER_RE = /([\p{Ll}\d])(\p{Lu})/gu;
var SPLIT_UPPER_UPPER_RE = /(\p{Lu})([\p{Lu}][\p{Ll}])/gu;
var SPLIT_SEPARATE_NUMBER_RE = /(\d)\p{Ll}|(\p{L})\d/u;
var DEFAULT_STRIP_REGEXP = /[^\p{L}\d]+/giu;
var SPLIT_REPLACE_VALUE = "$1\0$2";
var DEFAULT_PREFIX_SUFFIX_CHARACTERS = "";
function split(value) {
  let result = value.trim();
  result = result.replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE).replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);
  result = result.replace(DEFAULT_STRIP_REGEXP, "\0");
  let start = 0;
  let end = result.length;
  while (result.charAt(start) === "\0")
    start++;
  if (start === end)
    return [];
  while (result.charAt(end - 1) === "\0")
    end--;
  return result.slice(start, end).split(/\0/g);
}
function splitSeparateNumbers(value) {
  const words = split(value);
  for (let i2 = 0; i2 < words.length; i2++) {
    const word = words[i2];
    const match = SPLIT_SEPARATE_NUMBER_RE.exec(word);
    if (match) {
      const offset = match.index + (match[1] ?? match[2]).length;
      words.splice(i2, 1, word.slice(0, offset), word.slice(offset));
    }
  }
  return words;
}
function capitalCase(input, options) {
  const [prefix, words, suffix] = splitPrefixSuffix(input, options);
  const lower = lowerFactory(options?.locale);
  const upper = upperFactory(options?.locale);
  return prefix + words.map(capitalCaseTransformFactory(lower, upper)).join(options?.delimiter ?? " ") + suffix;
}
function lowerFactory(locale) {
  return locale === false ? (input) => input.toLowerCase() : (input) => input.toLocaleLowerCase(locale);
}
function upperFactory(locale) {
  return locale === false ? (input) => input.toUpperCase() : (input) => input.toLocaleUpperCase(locale);
}
function capitalCaseTransformFactory(lower, upper) {
  return (word) => `${upper(word[0])}${lower(word.slice(1))}`;
}
function splitPrefixSuffix(input, options = {}) {
  const splitFn = options.split ?? (options.separateNumbers ? splitSeparateNumbers : split);
  const prefixCharacters = options.prefixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;
  const suffixCharacters = options.suffixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;
  let prefixIndex = 0;
  let suffixIndex = input.length;
  while (prefixIndex < input.length) {
    const char = input.charAt(prefixIndex);
    if (!prefixCharacters.includes(char))
      break;
    prefixIndex++;
  }
  while (suffixIndex > prefixIndex) {
    const index = suffixIndex - 1;
    const char = input.charAt(index);
    if (!suffixCharacters.includes(char))
      break;
    suffixIndex = index;
  }
  return [
    input.slice(0, prefixIndex),
    splitFn(input.slice(prefixIndex, suffixIndex)),
    input.slice(suffixIndex)
  ];
}

// src/providers/gocardless/transform.ts
var mapTransactionCategory = (transaction) => {
  if (+transaction.transactionAmount.amount > 0) {
    return "income";
  }
  if (transaction?.proprietaryBankTransactionCode === "Transfer") {
    return "transfer";
  }
  return null;
};
var mapTransactionMethod = (type) => {
  switch (type) {
    case "Payment":
    case "Bankgiro payment":
    case "Incoming foreign payment":
      return "payment";
    case "Card purchase":
    case "Card foreign purchase":
      return "card_purchase";
    case "Card ATM":
      return "card_atm";
    case "Transfer":
      return "transfer";
    default:
      return "other";
  }
};
var transformTransactionName = (transaction) => {
  if (transaction?.creditorName) {
    return capitalCase(transaction.creditorName);
  }
  if (transaction?.debtorName) {
    return capitalCase(transaction?.debtorName);
  }
  if (transaction?.additionalInformation) {
    return capitalCase(transaction.additionalInformation);
  }
  if (transaction?.remittanceInformationStructured) {
    return capitalCase(transaction.remittanceInformationStructured);
  }
  if (transaction?.remittanceInformationUnstructured) {
    return capitalCase(transaction.remittanceInformationUnstructured);
  }
  const remittanceInformation = transaction?.remittanceInformationUnstructuredArray?.at(0);
  if (remittanceInformation) {
    return capitalCase(remittanceInformation);
  }
  console.log("No transaction name", transaction);
  return "No information";
};
var transformDescription = ({
  transaction,
  name
}) => {
  if (transaction?.remittanceInformationUnstructuredArray?.length) {
    const text = transaction?.remittanceInformationUnstructuredArray.join(" ");
    const description = capitalCase(text);
    if (description !== name) {
      return description;
    }
  }
  const additionalInformation = transaction.additionalInformation && capitalCase(transaction.additionalInformation);
  if (additionalInformation !== name) {
    return additionalInformation;
  }
  return null;
};
var transformTransaction = (transaction) => {
  const method = mapTransactionMethod(
    transaction?.proprietaryBankTransactionCode
  );
  let currencyExchange;
  if (Array.isArray(transaction.currencyExchange)) {
    const rate = Number.parseFloat(
      transaction.currencyExchange.at(0)?.exchangeRate ?? ""
    );
    if (rate) {
      const currency = transaction?.currencyExchange?.at(0)?.sourceCurrency;
      if (currency) {
        currencyExchange = {
          rate,
          currency
        };
      }
    }
  }
  const name = transformTransactionName(transaction);
  const description = transformDescription({ transaction, name }) ?? null;
  const balance = transaction?.balanceAfterTransaction?.balanceAmount?.amount ? +transaction.balanceAfterTransaction.balanceAmount.amount : null;
  return {
    id: transaction.internalTransactionId,
    date: transaction.bookingDate,
    name,
    method,
    amount: +transaction.transactionAmount.amount,
    currency: transaction.transactionAmount.currency,
    category: mapTransactionCategory(transaction),
    currency_rate: currencyExchange?.rate || null,
    currency_source: currencyExchange?.currency || null,
    balance,
    description,
    status: "posted"
  };
};
var transformAccountName = (account) => {
  if (account?.name) {
    return capitalCase(account.name);
  }
  if (account?.product) {
    return account.product;
  }
  return "No name";
};
var transformAccount = ({
  id,
  account,
  balance,
  institution
}) => {
  return {
    id,
    type: "depository",
    name: transformAccountName({
      name: account.name,
      product: account.product
    }),
    currency: account.currency,
    enrollment_id: null,
    balance: transformAccountBalance(balance),
    institution: transformInstitution(institution)
  };
};
var transformAccountBalance = (account) => ({
  currency: account?.currency || "EUR",
  amount: +(account?.amount ?? 0)
});
var transformInstitution = (institution) => ({
  id: institution.id,
  name: institution.name,
  logo: getLogoURL(institution.id, getFileExtension(institution.logo)),
  provider: Providers.Enum.gocardless
});

// src/providers/gocardless/gocardless-provider.ts
var GoCardLessProvider = class {
  #api;
  constructor(params) {
    this.#api = new GoCardLessApi(params);
  }
  async getHealthCheck() {
    return this.#api.getHealthCheck();
  }
  async getTransactions({ accountId, latest }) {
    const response = await this.#api.getTransactions({
      latest,
      accountId
    });
    return (response ?? []).map(transformTransaction);
  }
  async getAccounts({ id }) {
    if (!id) {
      throw Error("Missing params");
    }
    const response = await this.#api.getAccounts({ id });
    return (response ?? []).map(transformAccount);
  }
  async getAccountBalance({ accountId }) {
    if (!accountId) {
      throw Error("Missing params");
    }
    const response = await this.#api.getAccountBalance(accountId);
    return transformAccountBalance(response);
  }
  async getInstitutions({ countryCode }) {
    if (!countryCode) {
      throw Error("Missing countryCode");
    }
    const response = await this.#api.getInstitutions({ countryCode });
    return response.map(transformInstitution);
  }
  async deleteAccounts({ accountId }) {
    if (!accountId) {
      throw Error("Missing params");
    }
    await this.#api.deleteRequisition(accountId);
  }
};

// src/providers/plaid/plaid-provider.ts
init_checked_fetch();
init_modules_watch_stub();

// src/providers/plaid/plaid-api.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/countries.ts
init_checked_fetch();
init_modules_watch_stub();
var GOCARDLESS_COUNTRIES = [
  "AT",
  "BE",
  "BG",
  "HR",
  "CY",
  "CZ",
  "DK",
  "EE",
  "FI",
  "FR",
  "DE",
  "GR",
  "HU",
  "IS",
  "IE",
  "IT",
  "LV",
  "LI",
  "LT",
  "LU",
  "MT",
  "NL",
  "NO",
  "PL",
  "PT",
  "RO",
  "SK",
  "SI",
  "ES",
  "SE",
  "GB"
];
var PLAID_COUNTRIES = ["US", "CA"];
var TELLER_COUNTRIES = ["US"];
var combinedCountries = [
  .../* @__PURE__ */ new Set([
    ...GOCARDLESS_COUNTRIES,
    ...PLAID_COUNTRIES,
    ...TELLER_COUNTRIES
  ])
];
var ALL_COUNTRIES = combinedCountries;

// src/utils/paginate.ts
init_checked_fetch();
init_modules_watch_stub();
async function paginate({
  fetchData,
  pageSize,
  delay
}) {
  const result = [];
  let offset = 0;
  let data = [];
  do {
    data = await fetchData(offset, pageSize);
    result.push(...data);
    offset += pageSize;
    if (delay && data.length >= pageSize) {
      delay.onDelay(`Waiting ${delay.milliseconds / 1e3} seconds`);
      await new Promise((resolve) => setTimeout(resolve, delay.milliseconds));
    }
  } while (data.length >= pageSize);
  return result;
}

// src/providers/plaid/plaid-api.ts
var import_plaid = __toESM(require_dist());

// src/providers/plaid/utils.ts
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/axios.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/utils.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/bind.js
init_checked_fetch();
init_modules_watch_stub();
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// ../../node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache2) => (thing) => {
  const str = toString.call(thing);
  return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString2 = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject2 = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject2(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i2;
  let l3;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i2 = 0, l3 = obj.length; i2 < l3; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i2 = 0; i2 < len; i2++) {
      key = keys[i2];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i2 = keys.length;
  let _key;
  while (i2-- > 0) {
    _key = keys[i2];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge2() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge2(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge2({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i2 = 0, l3 = arguments.length; i2 < l3; i2++) {
    arguments[i2] && forEach(arguments[i2], assignValue);
  }
  return result;
}
var extend = (a2, b2, thisArg, { allOwnKeys } = {}) => {
  forEach(b2, (val, key) => {
    if (thisArg && isFunction(val)) {
      a2[key] = bind(val, thisArg);
    } else {
      a2[key] = val;
    }
  }, { allOwnKeys });
  return a2;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i2;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i2 = props.length;
    while (i2-- > 0) {
      prop = props[i2];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i2 = thing.length;
  if (!isNumber(i2))
    return null;
  const arr = new Array(i2);
  while (i2-- > 0) {
    arr[i2] = thing[i2];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m2, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i2) => {
    if (isObject2(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i2] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i2 + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i2] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString: isString2,
  isNumber,
  isBoolean,
  isObject: isObject2,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge: merge2,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};

// ../../node_modules/axios/lib/core/Axios.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/buildURL.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/AxiosURLSearchParams.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/toFormData.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/core/AxiosError.js
init_checked_fetch();
init_modules_watch_stub();
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// ../../node_modules/axios/lib/helpers/null.js
init_checked_fetch();
init_modules_watch_stub();
var null_default = null;

// ../../node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i2) {
    token = removeBrackets(token);
    return !dots && i2 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// ../../node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// ../../node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// ../../node_modules/axios/lib/core/InterceptorManager.js
init_checked_fetch();
init_modules_watch_stub();
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h2) {
      if (h2 !== null) {
        fn(h2);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// ../../node_modules/axios/lib/core/dispatchRequest.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/core/transformData.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/defaults/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/defaults/transitional.js
init_checked_fetch();
init_modules_watch_stub();
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// ../../node_modules/axios/lib/helpers/toURLEncodedForm.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/platform/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/platform/browser/index.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
init_checked_fetch();
init_modules_watch_stub();
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// ../../node_modules/axios/lib/platform/browser/classes/FormData.js
init_checked_fetch();
init_modules_watch_stub();
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// ../../node_modules/axios/lib/platform/browser/classes/Blob.js
init_checked_fetch();
init_modules_watch_stub();
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// ../../node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// ../../node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
init_checked_fetch();
init_modules_watch_stub();
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || void 0;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// ../../node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// ../../node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// ../../node_modules/axios/lib/helpers/formDataToJSON.js
init_checked_fetch();
init_modules_watch_stub();
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i2;
  const len = keys.length;
  let key;
  for (i2 = 0; i2 < len; i2++) {
    key = keys[i2];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__")
      return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// ../../node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw AxiosError_default.from(e2, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e2;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// ../../node_modules/axios/lib/core/AxiosHeaders.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/parseHeaders.js
init_checked_fetch();
init_modules_watch_stub();
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i2;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i2 = line.indexOf(":");
    key = line.substring(0, i2).trim().toLowerCase();
    val = line.substring(i2 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// ../../node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders3 = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders3(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders3(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i2 = keys.length;
    let deleted = false;
    while (i2--) {
      const key = keys[i2];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// ../../node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// ../../node_modules/axios/lib/cancel/isCancel.js
init_checked_fetch();
init_modules_watch_stub();
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// ../../node_modules/axios/lib/cancel/CanceledError.js
init_checked_fetch();
init_modules_watch_stub();
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// ../../node_modules/axios/lib/adapters/adapters.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/adapters/xhr.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/core/settle.js
init_checked_fetch();
init_modules_watch_stub();
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// ../../node_modules/axios/lib/helpers/parseProtocol.js
init_checked_fetch();
init_modules_watch_stub();
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// ../../node_modules/axios/lib/helpers/progressEventReducer.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/speedometer.js
init_checked_fetch();
init_modules_watch_stub();
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i2 = tail;
    let bytesCount = 0;
    while (i2 !== head) {
      bytesCount += bytes[i2++];
      i2 = i2 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// ../../node_modules/axios/lib/helpers/throttle.js
init_checked_fetch();
init_modules_watch_stub();
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// ../../node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e2) => {
    const loaded = e2.loaded;
    const total = e2.lengthComputable ? e2.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e2,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// ../../node_modules/axios/lib/helpers/resolveConfig.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/isURLSameOrigin.js
init_checked_fetch();
init_modules_watch_stub();
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    const msie = platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// ../../node_modules/axios/lib/helpers/cookies.js
init_checked_fetch();
init_modules_watch_stub();
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// ../../node_modules/axios/lib/core/buildFullPath.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/isAbsoluteURL.js
init_checked_fetch();
init_modules_watch_stub();
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// ../../node_modules/axios/lib/helpers/combineURLs.js
init_checked_fetch();
init_modules_watch_stub();
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// ../../node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// ../../node_modules/axios/lib/core/mergeConfig.js
init_checked_fetch();
init_modules_watch_stub();
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a2, b2, caseless) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(a2, b2, caseless);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2, caseless);
    }
  }
  function valueFromConfig2(a2, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    }
  }
  function defaultToConfig2(a2, b2) {
    if (!utils_default.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    } else if (!utils_default.isUndefined(a2)) {
      return getMergedValue(void 0, a2);
    }
  }
  function mergeDirectKeys(a2, b2, prop) {
    if (prop in config2) {
      return getMergedValue(a2, b2);
    } else if (prop in config1) {
      return getMergedValue(void 0, a2);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a2, b2) => mergeDeepProperties(headersToObject(a2), headersToObject(b2), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge3 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge3(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// ../../node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  let contentType;
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// ../../node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// ../../node_modules/axios/lib/adapters/fetch.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/helpers/composeSignals.js
init_checked_fetch();
init_modules_watch_stub();
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// ../../node_modules/axios/lib/helpers/trackStream.js
init_checked_fetch();
init_modules_watch_stub();
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e2) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e2);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  });
};

// ../../node_modules/axios/lib/adapters/fetch.js
var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e2) {
    return false;
  }
};
var supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform_default.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
var resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
      throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
var getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils_default.isBlob(body)) {
    return body.size;
  }
  if (utils_default.isSpecCompliantForm(body)) {
    const _request = new Request(platform_default.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils_default.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils_default.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
var resolveBodyLength = async (headers, body) => {
  const length = utils_default.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetch_default = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig_default(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils_default.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : void 0
    });
    let response = await fetch(request);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders_default.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError_default.from(err, err && err.code, config, request);
  }
});

// ../../node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: fetch_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e2) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i2 = 0; i2 < length; i2++) {
      nameOrAdapter = adapters[i2];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i2] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s2,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// ../../node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// ../../node_modules/axios/lib/helpers/validator.js
init_checked_fetch();
init_modules_watch_stub();

// ../../node_modules/axios/lib/env/data.js
init_checked_fetch();
init_modules_watch_stub();
var VERSION = "1.7.7";

// ../../node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
  validators[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator2, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i2 = keys.length;
  while (i2-- > 0) {
    const opt = keys[i2];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// ../../node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;
        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e2) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i2 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i2 < len) {
        promise = promise.then(chain[i2++], chain[i2++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i2 = 0;
    while (i2 < len) {
      const onFulfilled = requestInterceptorChain[i2++];
      const onRejected = requestInterceptorChain[i2++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i2 = 0;
    len = responseInterceptorChain.length;
    while (i2 < len) {
      promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// ../../node_modules/axios/lib/cancel/CancelToken.js
init_checked_fetch();
init_modules_watch_stub();
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i2 = token._listeners.length;
      while (i2-- > 0) {
        token._listeners[i2](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// ../../node_modules/axios/lib/helpers/spread.js
init_checked_fetch();
init_modules_watch_stub();
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// ../../node_modules/axios/lib/helpers/isAxiosError.js
init_checked_fetch();
init_modules_watch_stub();
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// ../../node_modules/axios/lib/helpers/HttpStatusCode.js
init_checked_fetch();
init_modules_watch_stub();
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// ../../node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// ../../node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// src/providers/plaid/utils.ts
function isError2(error) {
  if (!error)
    return false;
  if (!axios_default.isAxiosError(error))
    return false;
  if (typeof error.response?.data !== "object")
    return false;
  const { data } = error.response;
  return {
    code: data.error_code,
    message: data.error_message
  };
}

// src/providers/plaid/plaid-api.ts
var PlaidApi = class {
  #client;
  #clientId;
  #clientSecret;
  #countryCodes = PLAID_COUNTRIES;
  constructor(params) {
    this.#clientId = params.envs.PLAID_CLIENT_ID;
    this.#clientSecret = params.envs.PLAID_SECRET;
    const configuration = new import_plaid.Configuration({
      basePath: import_plaid.PlaidEnvironments[params.envs.PLAID_ENVIRONMENT || "production"],
      baseOptions: {
        headers: {
          "PLAID-CLIENT-ID": this.#clientId,
          "PLAID-SECRET": this.#clientSecret
        }
      }
    });
    this.#client = new import_plaid.PlaidApi(configuration);
  }
  async getHealthCheck() {
    try {
      const response = await fetch(
        "https://status.plaid.com/api/v2/status.json"
      );
      const data = await response.json();
      return data.status.indicator === "none" || data.status.indicator === "maintenance";
    } catch {
      return false;
    }
  }
  async getAccountBalance({
    accessToken,
    accountId
  }) {
    try {
      const accounts = await this.#client.accountsGet({
        access_token: accessToken,
        options: {
          account_ids: [accountId]
        }
      });
      return accounts.data.accounts.at(0)?.balances;
    } catch (error) {
      const parsedError = isError2(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async getAccounts({
    accessToken,
    institutionId
  }) {
    try {
      const accounts = await this.#client.accountsGet({
        access_token: accessToken
      });
      const institution = await this.institutionsGetById(institutionId);
      return accounts.data.accounts.map((account) => ({
        ...account,
        institution: {
          id: institution.data.institution.institution_id,
          name: institution.data.institution.name
        }
      }));
    } catch (error) {
      const parsedError = isError2(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async getTransactions({
    accessToken,
    accountId,
    latest
  }) {
    let added = [];
    let cursor = void 0;
    let hasMore = true;
    try {
      if (latest) {
        const { data } = await this.#client.transactionsSync({
          access_token: accessToken,
          count: 500
        });
        added = added.concat(data.added);
      } else {
        while (hasMore) {
          const { data } = await this.#client.transactionsSync({
            access_token: accessToken,
            cursor
          });
          added = added.concat(data.added);
          hasMore = data.has_more;
          cursor = data.next_cursor;
        }
      }
      return added.filter((transaction) => transaction.account_id === accountId).filter((transaction) => !transaction.pending);
    } catch (error) {
      const parsedError = isError2(error);
      if (parsedError) {
        throw new ProviderError(parsedError);
      }
    }
  }
  async linkTokenCreate({
    userId,
    language = "en",
    accessToken
  }) {
    return this.#client.linkTokenCreate({
      client_id: this.#clientId,
      secret: this.#clientSecret,
      client_name: "Midday",
      products: [import_plaid.Products.Transactions],
      language,
      access_token: accessToken,
      country_codes: this.#countryCodes,
      transactions: {
        days_requested: 730
      },
      user: {
        client_user_id: userId
      }
    });
  }
  async institutionsGetById(institution_id) {
    return this.#client.institutionsGetById({
      institution_id,
      country_codes: this.#countryCodes,
      options: {
        include_auth_metadata: true
      }
    });
  }
  async itemPublicTokenExchange({
    publicToken
  }) {
    return this.#client.itemPublicTokenExchange({
      public_token: publicToken
    });
  }
  async deleteAccounts({ accessToken }) {
    await this.#client.itemRemove({
      access_token: accessToken
    });
  }
  async getInstitutions(params) {
    const countryCode = params?.countryCode ? [params.countryCode] : this.#countryCodes;
    return paginate({
      delay: { milliseconds: 100, onDelay: (message) => logger2(message) },
      pageSize: 500,
      fetchData: (offset, count) => withRetry(
        () => this.#client.institutionsGet({
          country_codes: countryCode,
          count,
          offset,
          options: {
            include_optional_metadata: true,
            products: [import_plaid.Products.Transactions]
          }
        }).then(({ data }) => {
          return data.institutions;
        })
      )
    });
  }
};

// src/providers/plaid/transform.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/account.ts
init_checked_fetch();
init_modules_watch_stub();
function getType(type) {
  switch (type) {
    case "depository":
      return "depository";
    case "credit":
      return "credit";
    default:
      return "other_asset";
  }
}

// src/providers/plaid/transform.ts
var mapTransactionMethod2 = (type) => {
  switch (type) {
    case "bill payment":
      return "payment";
    case "purchase":
      return "card_purchase";
    case "atm":
      return "card_atm";
    case "transfer":
      return "transfer";
    case "interest":
      return "interest";
    case "bank charge":
      return "fee";
    default:
      return "other";
  }
};
var mapTransactionCategory2 = ({
  transaction,
  amount
}) => {
  if (transaction.personal_finance_category?.primary === "INCOME") {
    return "income";
  }
  if (transaction.transaction_code === "transfer" || transaction.personal_finance_category?.primary === "TRANSFER_IN" || transaction.personal_finance_category?.primary === "TRANSFER_OUT") {
    return "transfer";
  }
  if (amount > 0) {
    return "income";
  }
  if (transaction.transaction_code === "bank charge" || transaction.personal_finance_category?.primary === "BANK_FEES") {
    return "fees";
  }
  if (transaction.personal_finance_category?.primary === "FOOD_AND_DRINK") {
    return "meals";
  }
  if (transaction.personal_finance_category?.primary === "TRANSPORTATION" || transaction.personal_finance_category?.primary === "TRAVEL") {
    return "travel";
  }
  if (transaction.personal_finance_category?.detailed === "GENERAL_SERVICES_OTHER_GENERAL_SERVICES") {
    return "software";
  }
  if (transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_GAS_AND_ELECTRICITY" || transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_SEWAGE_AND_WASTE_MANAGEMENT" || transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_WATER" || transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_OTHER_UTILITIES") {
    return "facilities-expenses";
  }
  if (transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_RENT") {
    return "rent";
  }
  if (transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_INTERNET_AND_CABLE" || transaction.personal_finance_category?.detailed === "RENT_AND_UTILITIES_TELEPHONE") {
    return "internet-and-telephone";
  }
  if (transaction.personal_finance_category?.primary === "HOME_IMPROVEMENT") {
    return "office-supplies";
  }
  if (transaction.personal_finance_category?.primary === "ENTERTAINMENT") {
    return "activity";
  }
  return null;
};
var formatAmout = (amount) => {
  return +(amount * -1);
};
var transformDescription2 = (transaction) => {
  const name = capitalCase(transaction.name);
  if (transaction?.original_description && transaction.original_description !== name) {
    return capitalCase(transaction.original_description);
  }
  if (transaction?.merchant_name && transaction?.merchant_name !== name) {
    return transaction?.merchant_name;
  }
  return null;
};
var transformTransaction2 = ({
  transaction
}) => {
  const method = mapTransactionMethod2(transaction?.transaction_code);
  const amount = formatAmout(transaction.amount);
  const description = transformDescription2(transaction) ?? null;
  return {
    id: transaction.transaction_id,
    date: transaction.date,
    name: transaction.name,
    description,
    currency_rate: null,
    currency_source: null,
    method,
    amount,
    currency: transaction.iso_currency_code || transaction.unofficial_currency_code || "USD",
    category: mapTransactionCategory2({ transaction, amount }),
    balance: null,
    status: transaction.pending ? "pending" : "posted"
  };
};
var transformAccount2 = ({
  account_id,
  name,
  balances,
  institution,
  type
}) => {
  return {
    id: account_id,
    name,
    currency: balances.iso_currency_code || balances.unofficial_currency_code || "USD",
    type: getType(type),
    enrollment_id: null,
    balance: transformAccountBalance2(balances),
    institution: {
      id: institution.id,
      name: institution.name,
      logo: getLogoURL(institution.id),
      provider: Providers.Enum.plaid
    }
  };
};
var transformAccountBalance2 = (balances) => ({
  currency: balances?.iso_currency_code || balances?.unofficial_currency_code || "USD",
  amount: balances?.available ?? 0
});
var transformInstitution2 = (institution) => ({
  id: institution.institution_id,
  name: institution.name,
  logo: getLogoURL(institution.institution_id),
  provider: Providers.Enum.plaid
});

// src/providers/plaid/plaid-provider.ts
var PlaidProvider = class {
  #api;
  constructor(params) {
    this.#api = new PlaidApi(params);
  }
  async getTransactions({
    accessToken,
    accountId,
    accountType,
    latest
  }) {
    if (!accessToken || !accountId) {
      throw Error("accessToken or accountId is missing");
    }
    const response = await this.#api.getTransactions({
      accessToken,
      accountId,
      latest
    });
    return (response ?? []).map(
      (transaction) => transformTransaction2({
        transaction,
        accountType
      })
    );
  }
  async getHealthCheck() {
    return this.#api.getHealthCheck();
  }
  async getAccounts({ accessToken, institutionId }) {
    if (!accessToken || !institutionId) {
      throw Error("accessToken or institutionId is missing");
    }
    const response = await this.#api.getAccounts({
      accessToken,
      institutionId
    });
    return (response ?? []).map(transformAccount2);
  }
  async getAccountBalance({
    accessToken,
    accountId
  }) {
    if (!accessToken || !accountId) {
      throw Error("Missing params");
    }
    const response = await this.#api.getAccountBalance({
      accessToken,
      accountId
    });
    return transformAccountBalance2(response);
  }
  async getInstitutions({ countryCode }) {
    const response = await this.#api.getInstitutions({
      countryCode
    });
    return response.map(transformInstitution2);
  }
  async deleteAccounts({ accessToken }) {
    if (!accessToken) {
      throw Error("accessToken is missing");
    }
    await this.#api.deleteAccounts({
      accessToken
    });
  }
};

// src/providers/teller/teller-provider.ts
init_checked_fetch();
init_modules_watch_stub();

// src/providers/teller/teller-api.ts
init_checked_fetch();
init_modules_watch_stub();

// src/providers/teller/utils.ts
init_checked_fetch();
init_modules_watch_stub();
function isError3(data) {
  if (typeof data !== "object" || data === null || !("error" in data)) {
    return false;
  }
  const tellerError = data;
  return {
    code: tellerError.error.code,
    message: tellerError.error.message
  };
}

// src/providers/teller/teller-api.ts
var TellerApi = class {
  #baseUrl = "https://api.teller.io";
  #fetcher;
  constructor(params) {
    this.#fetcher = params.fetcher;
  }
  async getHealthCheck() {
    try {
      await fetch(`${this.#baseUrl}/health`);
      return true;
    } catch (error) {
      return false;
    }
  }
  async getAccounts({
    accessToken
  }) {
    const accounts = await this.#get(
      "/accounts",
      accessToken
    );
    return Promise.all(
      accounts?.map(async (account) => {
        const balance = await this.getAccountBalance({
          accountId: account.id,
          accessToken
        });
        return { ...account, balance };
      })
    );
  }
  async getTransactions({
    accountId,
    accessToken,
    latest,
    count
  }) {
    const result = await this.#get(
      `/accounts/${accountId}/transactions`,
      accessToken,
      {
        count: latest ? 500 : count
      }
    );
    return result.filter((transaction) => transaction.status !== "pending");
  }
  async getAccountBalance({
    accountId,
    accessToken
  }) {
    const transactions = await this.getTransactions({
      accountId,
      accessToken,
      count: 20
    });
    const amount = transactions.find(
      (transaction) => transaction.running_balance !== null
    )?.running_balance;
    return {
      currency: "USD",
      amount: +(amount ?? 0)
    };
  }
  async getInstitutions() {
    return this.#get("/institutions");
  }
  async deleteAccounts({
    accessToken
  }) {
    await this.#fetcher.fetch(`${this.#baseUrl}/accounts`, {
      method: "delete",
      headers: new Headers({
        Authorization: `Basic ${btoa(`${accessToken}:`)}`
      })
    });
  }
  async #get(path, token, params) {
    const url = new URL(`${this.#baseUrl}/${path}`);
    if (params) {
      for (const [key, value] of Object.entries(params)) {
        if (value) {
          url.searchParams.append(key, value.toString());
        }
      }
    }
    return this.#fetcher.fetch(url.toString(), {
      headers: new Headers({
        Authorization: `Basic ${btoa(`${token}:`)}`
      })
    }).then((response) => response.json()).then((data) => {
      const error = isError3(data);
      if (error) {
        throw new ProviderError(error);
      }
      return data;
    });
  }
};

// src/providers/teller/transform.ts
init_checked_fetch();
init_modules_watch_stub();
var mapTransactionMethod3 = (type) => {
  switch (type) {
    case "payment":
    case "bill_payment":
    case "digital_payment":
      return "payment";
    case "card_payment":
      return "card_purchase";
    case "atm":
      return "card_atm";
    case "transfer":
      return "transfer";
    case "ach":
      return "ach";
    case "interest":
      return "interest";
    case "deposit":
      return "deposit";
    case "wire":
      return "wire";
    case "fee":
      return "fee";
    default:
      return "other";
  }
};
var mapTransactionCategory3 = ({
  transaction,
  amount
}) => {
  if (transaction.type === "transfer") {
    return "transfer";
  }
  if (transaction.type === "fee") {
    return "fees";
  }
  if (amount > 0) {
    return "income";
  }
  switch (transaction?.details.category) {
    case "bar":
    case "dining":
    case "groceries":
      return "meals";
    case "transport":
    case "transportation":
      return "travel";
    case "tax":
      return "taxes";
    case "office":
      return "office-supplies";
    case "phone":
      return "internet-and-telephone";
    case "software":
      return "software";
    case "entertainment":
    case "sport":
      return "activity";
    case "utilities":
    case "electronics":
      return "equipment";
    default:
      return null;
  }
};
var transformDescription3 = (transaction) => {
  const description = transaction?.details?.counterparty?.name && capitalCase(transaction.details.counterparty.name);
  if (transaction.description !== description && description) {
    return capitalCase(description);
  }
  return null;
};
var formatAmout2 = ({ amount, accountType }) => {
  if (accountType === "credit") {
    return +(amount * -1);
  }
  return +amount;
};
var transformTransaction3 = ({
  transaction,
  accountType
}) => {
  const method = mapTransactionMethod3(transaction.type);
  const description = transformDescription3(transaction);
  const amount = formatAmout2({
    amount: +transaction.amount,
    accountType
  });
  return {
    id: transaction.id,
    date: transaction.date,
    name: transaction.description && capitalCase(transaction.description),
    description: description ?? null,
    currency_rate: null,
    currency_source: null,
    method,
    amount,
    currency: "USD",
    category: mapTransactionCategory3({ transaction, amount }),
    balance: transaction?.running_balance ? +transaction.running_balance : null,
    status: transaction?.status === "posted" ? "posted" : "pending"
  };
};
var transformAccount3 = ({
  id,
  name,
  currency,
  enrollment_id,
  type,
  institution,
  balance
}) => {
  return {
    id,
    name,
    currency,
    enrollment_id,
    institution: transformInstitution3(institution),
    type: getType(type),
    balance: transformAccountBalance3(balance)
  };
};
var transformAccountBalance3 = (account) => ({
  currency: account.currency,
  amount: +account.amount
});
var transformInstitution3 = (institution) => ({
  id: institution.id,
  name: institution.name,
  logo: getLogoURL(institution.id),
  provider: Providers.Enum.teller
});

// src/providers/teller/teller-provider.ts
var TellerProvider = class {
  #api;
  constructor(params) {
    this.#api = new TellerApi(params);
  }
  async getHealthCheck() {
    return this.#api.getHealthCheck();
  }
  async getTransactions({
    accountId,
    accessToken,
    accountType,
    latest
  }) {
    if (!accessToken) {
      throw Error("accessToken missing");
    }
    const response = await this.#api.getTransactions({
      accountId,
      accessToken,
      latest
    });
    return response.map(
      (transaction) => transformTransaction3({
        transaction,
        accountType
      })
    );
  }
  async getAccounts({ accessToken }) {
    if (!accessToken) {
      throw Error("accessToken missing");
    }
    const response = await this.#api.getAccounts({ accessToken });
    return response.map(transformAccount3);
  }
  async getAccountBalance({
    accessToken,
    accountId
  }) {
    if (!accessToken || !accountId) {
      throw Error("Missing params");
    }
    return this.#api.getAccountBalance({
      accessToken,
      accountId
    });
  }
  async getInstitutions() {
    const response = await this.#api.getInstitutions();
    return response.map(transformInstitution3);
  }
  async deleteAccounts({ accessToken }) {
    if (!accessToken) {
      throw Error("accessToken is missing");
    }
    await this.#api.deleteAccounts({
      accessToken
    });
  }
};

// src/providers/index.ts
var Provider = class {
  #name;
  #provider = null;
  constructor(params) {
    this.#name = params?.provider;
    switch (params?.provider) {
      case "gocardless":
        this.#provider = new GoCardLessProvider(params);
        break;
      case "teller":
        this.#provider = new TellerProvider(params);
        break;
      case "plaid":
        this.#provider = new PlaidProvider(params);
        break;
      default:
    }
  }
  async getHealthCheck(params) {
    const teller = new TellerProvider(params);
    const plaid = new PlaidProvider(params);
    const gocardless = new GoCardLessProvider(params);
    try {
      const [isPlaidHealthy, isGocardlessHealthy, isTellerHealthy] = await Promise.all([
        plaid.getHealthCheck(),
        gocardless.getHealthCheck(),
        teller.getHealthCheck()
      ]);
      return {
        plaid: {
          healthy: isPlaidHealthy
        },
        gocardless: {
          healthy: isGocardlessHealthy
        },
        teller: {
          healthy: isTellerHealthy
        }
      };
    } catch {
      throw Error("Something went wrong");
    }
  }
  async getTransactions(params) {
    logger2(
      "getTransactions:",
      `provider: ${this.#name} id: ${params.accountId}`
    );
    const data = await withRetry(() => this.#provider?.getTransactions(params));
    if (data) {
      return data;
    }
    return [];
  }
  async getAccounts(params) {
    logger2("getAccounts:", `provider: ${this.#name}`);
    const data = await withRetry(() => this.#provider?.getAccounts(params));
    if (data) {
      return data;
    }
    return [];
  }
  async getAccountBalance(params) {
    logger2(
      "getAccountBalance:",
      `provider: ${this.#name} id: ${params.accountId}`
    );
    const data = await withRetry(
      () => this.#provider?.getAccountBalance(params)
    );
    if (data) {
      return data;
    }
    return null;
  }
  async getInstitutions(params) {
    logger2("getInstitutions:", `provider: ${this.#name}`);
    const data = await withRetry(() => this.#provider?.getInstitutions(params));
    if (data) {
      return data;
    }
    return [];
  }
  async deleteAccounts(params) {
    logger2("delete:", `provider: ${this.#name}`);
    return withRetry(() => this.#provider?.deleteAccounts(params));
  }
};

// src/routes/accounts/schema.ts
init_checked_fetch();
init_modules_watch_stub();

// src/routes/institutions/schema.ts
init_checked_fetch();
init_modules_watch_stub();
var InstitutionSchema = z.object({
  id: z.string().openapi({
    example: "9293961c-df93-4d6d-a2cc-fc3e353b2d10"
  }),
  name: z.string().openapi({
    example: "Wells Fargo Bank"
  }),
  logo: z.string().openapi({
    example: "https://cdn.midday.ai/institution/9293961c-df93-4d6d-a2cc-fc3e353b2d10.jpg"
  }).nullable(),
  available_history: z.number().optional().openapi({
    example: 365
  }).nullable(),
  provider: Providers.openapi({
    example: Providers.Enum.teller
  })
}).openapi("InstitutionSchema");
var InstitutionsSchema = z.object({
  data: z.array(InstitutionSchema)
}).openapi("InstitutionsSchema");
var UpdateUsageParamsSchema = z.object({
  id: z.string().openapi({
    param: {
      name: "id",
      in: "path"
    },
    example: "STARLING_SRLGGB3L"
  })
}).openapi("UpdateUsageParamsSchema");
var UpdateUsageSchema = z.object({
  data: InstitutionSchema
}).openapi("UpdateUsageSchema");
var InstitutionParamsSchema = z.object({
  q: z.string().optional().openapi({
    description: "Search query",
    param: {
      name: "q",
      in: "query"
    },
    example: "Swedbank"
  }),
  limit: z.string().optional().openapi({
    description: "Limit results",
    param: {
      name: "limit",
      in: "query"
    },
    example: "50"
  }),
  countryCode: z.enum(ALL_COUNTRIES).openapi({
    description: "Country code",
    param: {
      name: "countryCode",
      in: "query"
    },
    example: ALL_COUNTRIES.at(1)
  })
}).openapi("InstitutionParamsSchema");

// src/routes/accounts/schema.ts
var AccountsParamsSchema = z.object({
  id: z.string().optional().openapi({
    description: "GoCardLess reference id",
    param: {
      name: "id",
      in: "query"
    },
    example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  }),
  provider: Providers.openapi({
    example: Providers.Enum.teller
  }),
  accessToken: z.string().optional().openapi({
    description: "Teller & Plaid access token",
    param: {
      name: "accessToken",
      in: "query"
    },
    example: "test_token_ky6igyqi3qxa4"
  }),
  institutionId: z.string().optional().openapi({
    description: "Plaid institution id",
    param: {
      name: "institutionId",
      in: "query"
    },
    example: "ins_109508"
  })
});
var AccountSchema = z.object({
  id: z.string().openapi({
    example: "9293961c-df93-4d6d-a2cc-fc3e353b2d10"
  }),
  name: z.string().openapi({
    example: "Savings account"
  }),
  type: z.enum(["depository", "credit", "other_asset", "loan", "other_liability"]).openapi({
    example: "depository"
  }),
  balance: z.object({
    amount: z.number().openapi({
      example: 100
    }),
    currency: z.string().openapi({
      example: "USD"
    })
  }),
  currency: z.string().openapi({
    example: "USD"
  }),
  institution: InstitutionSchema,
  enrollment_id: z.string().openapi({
    example: "add29d44-1b36-4bcc-b317-b2cbc73ab8e7"
  }).nullable()
}).openapi("AccountSchema");
var AccountsSchema = z.object({
  data: z.array(AccountSchema)
}).openapi("AccountsSchema");
var AccountBalanceParamsSchema = z.object({
  id: z.string().openapi({
    description: "Account id",
    param: {
      name: "id",
      in: "query"
    },
    example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  }),
  provider: Providers.openapi({
    example: Providers.Enum.teller
  }),
  accessToken: z.string().optional().openapi({
    description: "Teller & Plaid access token",
    param: {
      name: "accessToken",
      in: "query"
    },
    example: "test_token_ky6igyqi3qxa4"
  })
}).openapi("AccountBalanceParamsSchema");
var AccountBalanceSchema = z.object({
  data: z.object({
    amount: z.number().openapi({
      example: 2e4
    }),
    currency: z.string().openapi({
      example: "USD"
    })
  }).nullable()
}).openapi("AccountBalanceSchema");
var DeleteAccountsParamsSchema = z.object({
  accountId: z.string().openapi({
    description: "Account id (GoCardLess)",
    param: {
      name: "accountId",
      in: "query"
    },
    example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  }),
  provider: Providers.openapi({
    example: Providers.Enum.teller
  }),
  accessToken: z.string().optional().openapi({
    description: "Teller & Plaid access token",
    param: {
      name: "accessToken",
      in: "query"
    },
    example: "test_token_ky6igyqi3qxa4"
  })
}).openapi("DeleteAccountsParamsSchema");
var DeleteSchema = z.object({
  success: z.boolean().openapi({
    example: true
  })
}).openapi("DeleteSchema");

// src/routes/accounts/index.ts
var app = new OpenAPIHono();
var indexRoute = createRoute({
  method: "get",
  path: "/",
  summary: "Get Accounts",
  request: {
    query: AccountsParamsSchema
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: AccountsSchema
        }
      },
      description: "Retrieve accounts"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var deleteRoute = createRoute({
  method: "delete",
  path: "/",
  summary: "Delete Accounts",
  request: {
    query: DeleteAccountsParamsSchema
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: DeleteSchema
        }
      },
      description: "Retrieve accounts"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var balanceRoute = createRoute({
  method: "get",
  path: "/balance",
  summary: "Get Account Balance",
  request: {
    query: AccountBalanceParamsSchema
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: AccountBalanceSchema
        }
      },
      description: "Retrieve account balance"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
app.openapi(indexRoute, async (c2) => {
  const envs = env(c2);
  const { provider, accessToken, institutionId, id } = c2.req.valid("query");
  const api = new Provider({
    provider,
    kv: c2.env.KV,
    fetcher: c2.env.TELLER_CERT,
    envs
  });
  try {
    const data = await api.getAccounts({
      id,
      accessToken,
      institutionId
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app.openapi(balanceRoute, async (c2) => {
  const envs = env(c2);
  const { provider, accessToken, id } = c2.req.valid("query");
  const api = new Provider({
    provider,
    fetcher: c2.env.TELLER_CERT,
    kv: c2.env.KV,
    envs
  });
  try {
    const data = await api.getAccountBalance({
      accessToken,
      accountId: id
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app.openapi(deleteRoute, async (c2) => {
  const envs = env(c2);
  const { provider, accountId, accessToken } = c2.req.valid("query");
  const api = new Provider({
    provider,
    fetcher: c2.env.TELLER_CERT,
    kv: c2.env.KV,
    envs
  });
  try {
    await api.deleteAccounts({
      accessToken,
      accountId
    });
    return c2.json(
      {
        success: true
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
var accounts_default = app;

// src/routes/auth/index.ts
init_checked_fetch();
init_modules_watch_stub();

// src/routes/auth/schema.ts
init_checked_fetch();
init_modules_watch_stub();
var PlaidLinkBodySchema = z.object({
  userId: z.string().optional().openapi({
    example: "9293961c-df93-4d6d-a2cc-fc3e353b2d10"
  }),
  language: z.string().optional().openapi({
    example: "en"
  }),
  accessToken: z.string().optional().openapi({
    example: "ojwmef9823f892n9h98h2efoqed9823hdodfcoj13er92hef",
    description: "Used when initiating the reconnect flow"
  })
}).openapi("PlaidLinkBodySchema");
var PlaidLinkSchema = z.object({
  data: z.object({
    link_token: z.string().openapi({
      example: "ojwmef9823f892n9h98h2efoqed9823hdodfcoj13er92hef"
    }),
    expiration: z.string().openapi({
      example: "2024-06-01"
    })
  })
}).openapi("PlaidLinkSchema");
var PlaidExchangeBodySchema = z.object({
  token: z.string().openapi({
    example: "ojwmef9823f892n9h98h2efoqed9823hdodfcoj13er92hef"
  })
}).openapi("PlaidExchangeBodySchema");
var PlaidExchangeSchema = z.object({
  data: z.object({
    access_token: z.string().openapi({
      example: "access_9293961c"
    })
  })
}).openapi("PlaidExchangeSchema");
var GoCardLessLinkBodySchema = z.object({
  institutionId: z.string().openapi({
    example: "REVOLUT_REVOGB21"
  }),
  redirect: z.string().openapi({
    example: "http://www.yourwebpage.com"
  }),
  agreement: z.string().openapi({
    example: "2dea1b84-97b0-4cb4-8805-302c227587c8"
  }).nullable()
}).openapi("GoCardLessLinkBodySchema");
var GoCardLessLinkSchema = z.object({
  data: z.object({
    link: z.string().openapi({
      example: "https://ob.gocardless.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/REVOLUT_REVOGB21"
    })
  })
}).openapi("GoCardLessLinkSchema");
var GoCardLessExchangeBodySchema = z.object({
  institutionId: z.string().openapi({
    example: "REVOLUT_REVOGB21"
  }),
  transactionTotalDays: z.number().openapi({
    example: 90
  })
}).openapi("GoCardLessExchangeBodySchema");
var GoCardLessExchangeSchema = z.object({
  data: z.object({
    id: z.string().openapi({
      example: "2dea1b84-97b0-4cb4-8805-302c227587c8"
    }),
    access_valid_for_days: z.number().openapi({
      example: 90
    }),
    max_historical_days: z.number().openapi({
      example: 90
    }),
    institution_id: z.string().openapi({
      example: "REVOLUT_REVOGB21"
    })
  })
}).openapi("GoCardLessExchangeSchema");
var GoCardLessAgreementBodySchema = z.object({
  institutionId: z.string().openapi({
    example: "REVOLUT_REVOGB21"
  }),
  transactionTotalDays: z.number().openapi({
    example: 90
  })
}).openapi("GoCardLessAgreementBodySchema");
var GoCardLessAgreementSchema = z.object({
  data: z.object({
    id: z.string().openapi({
      example: "2dea1b84-97b0-4cb4-8805-302c227587c8"
    }),
    created: z.string().openapi({
      example: "2024-01-01"
    }),
    access_valid_for_days: z.number().openapi({
      example: 90
    }),
    max_historical_days: z.number().openapi({
      example: 90
    }),
    institution_id: z.string().openapi({
      example: "REVOLUT_REVOGB21"
    }),
    accepted: z.boolean().openapi({
      example: true
    })
  })
}).openapi("GoCardLessAgreementSchema");

// src/routes/auth/index.ts
var app2 = new OpenAPIHono();
var linkPlaidRoute = createRoute({
  method: "post",
  path: "/plaid/link",
  summary: "Auth Link (Plaid)",
  request: {
    body: {
      content: {
        "application/json": {
          schema: PlaidLinkBodySchema
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: PlaidLinkSchema
        }
      },
      description: "Retrieve Link"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var exchangePlaidRoute = createRoute({
  method: "post",
  path: "/plaid/exchange",
  summary: "Exchange token (Plaid)",
  request: {
    body: {
      content: {
        "application/json": {
          schema: PlaidExchangeBodySchema
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: PlaidExchangeSchema
        }
      },
      description: "Retrieve Exchange"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var linkGoCardLessRoute = createRoute({
  method: "post",
  path: "/gocardless/link",
  summary: "Auth link (GoCardLess)",
  request: {
    body: {
      content: {
        "application/json": {
          schema: GoCardLessLinkBodySchema
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: GoCardLessLinkSchema
        }
      },
      description: "Retrieve Link"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var agreementGoCardLessRoute = createRoute({
  method: "post",
  path: "/gocardless/agreement",
  summary: "Agreement (GoCardLess)",
  request: {
    body: {
      content: {
        "application/json": {
          schema: GoCardLessAgreementBodySchema
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: GoCardLessAgreementSchema
        }
      },
      description: "Retrieve Agreement"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var exchangeGoCardLessRoute = createRoute({
  method: "post",
  path: "/gocardless/exchange",
  summary: "Exchange token (GoCardLess)",
  request: {
    body: {
      content: {
        "application/json": {
          schema: GoCardLessExchangeBodySchema
        }
      }
    }
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: GoCardLessExchangeSchema
        }
      },
      description: "Retrieve Exchange"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
app2.openapi(linkPlaidRoute, async (c2) => {
  const envs = env(c2);
  const { userId, language, accessToken } = await c2.req.json();
  const api = new PlaidApi({
    kv: c2.env.KV,
    envs
  });
  try {
    const { data } = await api.linkTokenCreate({
      userId,
      language,
      accessToken
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app2.openapi(exchangePlaidRoute, async (c2) => {
  const envs = env(c2);
  const { token } = await c2.req.json();
  const api = new PlaidApi({
    kv: c2.env.KV,
    envs
  });
  try {
    const data = await api.itemPublicTokenExchange({
      publicToken: token
    });
    return c2.json(data, 200);
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app2.openapi(linkGoCardLessRoute, async (c2) => {
  const envs = env(c2);
  const { institutionId, agreement, redirect } = await c2.req.json();
  const api = new GoCardLessApi({
    kv: c2.env.KV,
    envs
  });
  try {
    const data = await api.buildLink({
      institutionId,
      agreement,
      redirect
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app2.openapi(exchangeGoCardLessRoute, async (c2) => {
  const envs = env(c2);
  const { institutionId, transactionTotalDays } = await c2.req.json();
  const api = new GoCardLessApi({
    kv: c2.env.KV,
    envs
  });
  try {
    const data = await api.createEndUserAgreement({
      institutionId,
      transactionTotalDays
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app2.openapi(agreementGoCardLessRoute, async (c2) => {
  const envs = env(c2);
  const { institutionId, transactionTotalDays } = await c2.req.json();
  const api = new GoCardLessApi({
    kv: c2.env.KV,
    envs
  });
  try {
    const data = await api.createEndUserAgreement({
      institutionId,
      transactionTotalDays
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
var auth_default = app2;

// src/routes/health/index.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/search.ts
init_checked_fetch();
init_modules_watch_stub();
var import_typesense = __toESM(require_Typesense());
function SearchClient(envs) {
  return new import_typesense.default.Client({
    nearestNode: {
      host: envs.TYPESENSE_ENDPOINT,
      port: 443,
      protocol: "https"
    },
    nodes: [
      { host: envs.TYPESENSE_ENDPOINT_US, port: 443, protocol: "https" },
      { host: envs.TYPESENSE_ENDPOINT_EU, port: 443, protocol: "https" },
      { host: envs.TYPESENSE_ENDPOINT_AU, port: 443, protocol: "https" }
    ],
    apiKey: envs.TYPESENSE_API_KEY,
    connectionTimeoutSeconds: 2
  });
}
async function getHealthCheck(envs) {
  const typesense = SearchClient(envs);
  const searchResponse = await typesense.health.retrieve();
  return {
    healthy: typeof searchResponse === "string" && JSON.parse(searchResponse).ok
  };
}

// src/routes/health/schema.ts
init_checked_fetch();
init_modules_watch_stub();
var HealthSchema = z.object({
  data: z.object({
    plaid: z.object({
      healthy: z.boolean()
    }),
    gocardless: z.object({
      healthy: z.boolean()
    }),
    teller: z.object({
      healthy: z.boolean()
    }),
    search: z.object({
      healthy: z.boolean()
    })
  })
}).openapi("HealthSchema");

// src/routes/health/index.ts
var app3 = new OpenAPIHono();
var indexRoute2 = createRoute({
  method: "get",
  path: "/",
  summary: "Health",
  responses: {
    200: {
      content: {
        "application/json": {
          schema: HealthSchema
        }
      },
      description: "Retrieve health"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
app3.openapi(indexRoute2, async (c2) => {
  const envs = env(c2);
  const api = new Provider();
  const providers = await api.getHealthCheck({
    kv: c2.env.KV,
    fetcher: c2.env.TELLER_CERT,
    envs
  });
  const search = await getHealthCheck(envs);
  const allServices = {
    ...providers,
    search
  };
  const isHealthy = Object.values(allServices).every(
    (service) => service.healthy
  );
  if (isHealthy) {
    return c2.json(
      {
        data: allServices
      },
      200
    );
  }
  return c2.json(
    {
      requestId: c2.get("requestId"),
      message: "Service unhelthy",
      code: "bad_request"
    },
    400
  );
});
var health_default = app3;

// src/routes/institutions/index.ts
init_checked_fetch();
init_modules_watch_stub();
var app4 = new OpenAPIHono();
var indexRoute3 = createRoute({
  method: "get",
  path: "/",
  summary: "Get Institutions",
  request: {
    query: InstitutionParamsSchema
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: InstitutionsSchema
        }
      },
      description: "Retrieve institutions"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
var updateUsageRoute = createRoute({
  method: "put",
  path: "/{id}/usage",
  summary: "Update Institution Usage",
  request: {
    params: UpdateUsageParamsSchema
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: UpdateUsageSchema
        }
      },
      description: "Update institution usage"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
app4.openapi(indexRoute3, async (c2) => {
  const envs = env(c2);
  const { countryCode, q = "*", limit = "50" } = c2.req.valid("query");
  const typesense = SearchClient(envs);
  const searchParameters = {
    q,
    query_by: "name",
    filter_by: `countries:=[${countryCode}]`,
    limit: +limit
  };
  try {
    const result = await typesense.collections("institutions").documents().search(searchParameters);
    const resultString = typeof result === "string" ? result : JSON.stringify(result);
    const data = JSON.parse(resultString);
    return c2.json(
      {
        data: data.hits?.map(({ document: document2 }) => ({
          id: document2.id,
          name: document2.name,
          logo: document2.logo ?? null,
          popularity: document2.popularity,
          available_history: document2.available_history ? +document2.available_history : null,
          provider: document2.provider
        }))
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
app4.openapi(updateUsageRoute, async (c2) => {
  const envs = env(c2);
  const id = c2.req.param("id");
  const typesense = SearchClient(envs);
  try {
    const original = await typesense.collections("institutions").documents(id).retrieve();
    const originalData = typeof original === "string" && JSON.parse(original);
    const result = await typesense.collections("institutions").documents(id).update({
      popularity: originalData?.popularity + 1 || 0
    });
    const data = typeof result === "string" ? JSON.parse(result) : [];
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
var institutions_default = app4;

// src/routes/rates/index.ts
init_checked_fetch();
init_modules_watch_stub();

// src/utils/rates.ts
init_checked_fetch();
init_modules_watch_stub();

// ../../packages/location/src/currencies.ts
init_checked_fetch();
init_modules_watch_stub();
var currencies = {
  // Andorra
  AD: "EUR",
  // United Arab Emirates
  AE: "AED",
  // Afghanistan
  AF: "AFN",
  // Antigua and Barbuda
  AG: "XCD",
  // Anguilla
  AI: "XCD",
  // Albania
  AL: "ALL",
  // Armenia
  AM: "AMD",
  // Netherlands Antilles
  AN: "ANG",
  // Angola
  AO: "AOA",
  // Antarctica
  AQ: "AQD",
  // Argentina
  AR: "ARS",
  // American Samoa
  AS: "USD",
  // Austria
  AT: "EUR",
  // Australia
  AU: "AUD",
  // Aruba
  AW: "ANG",
  // Aland Islands
  AX: "EUR",
  // Azerbaijan
  AZ: "AZN",
  // Bosnia and Herzegovina
  BA: "BAM",
  // Barbados
  BB: "BBD",
  // Bangladesh
  BD: "BDT",
  // Belgium
  BE: "EUR",
  // Burkina Faso
  BF: "XOF",
  // Bulgaria
  BG: "BGN",
  // Bahrain
  BH: "BHD",
  // Burundi
  BI: "BIF",
  // Benin
  BJ: "XOF",
  // Saint Barthelemy
  BL: "EUR",
  // Bermuda
  BM: "BMD",
  // Brunei Darussalam
  BN: "BND",
  // Bolivia
  BO: "BOB",
  // Brazil
  BR: "BRL",
  // Bahamas
  BS: "BSD",
  // Bhutan
  BT: "INR",
  // Bouvet Island
  BV: "NOK",
  // Botswana
  BW: "BWP",
  // Belarus
  BY: "BYR",
  // Belize
  BZ: "BZD",
  // Canada
  CA: "CAD",
  // Cocos (Keeling) Islands
  CC: "AUD",
  // Congo
  CD: "CDF",
  // Central African Republic
  CF: "XAF",
  // Congo Republic of the Democratic
  CG: "XAF",
  // Switzerland
  CH: "CHF",
  // Ivory Coast
  CI: "XOF",
  // Cook Islands
  CK: "NZD",
  // Chile
  CL: "CLP",
  // Cameroon
  CM: "XAF",
  // China
  CN: "CNY",
  // Colombia
  CO: "COP",
  // Costa Rica
  CR: "CRC",
  // Cuba
  CU: "CUP",
  // Cape Verde
  CV: "CVE",
  // Christmas Island
  CX: "AUD",
  // Cyprus
  CY: "EUR",
  // Czech Republic
  CZ: "CZK",
  // Germany
  DE: "EUR",
  // Djibouti
  DJ: "DJF",
  // Denmark
  DK: "DKK",
  // Dominica
  DM: "XCD",
  // Dominican Republic
  DO: "DOP",
  // Algeria
  DZ: "DZD",
  // Ecuador
  EC: "USD",
  // Estonia
  EE: "EUR",
  // Egypt
  EG: "EGP",
  // Western Sahara
  EH: "MAD",
  // Eritrea
  ER: "ERN",
  // Spain
  ES: "EUR",
  // Ethiopia
  ET: "ETB",
  // Finland
  FI: "EUR",
  // Fiji
  FJ: "FJD",
  // Falkland Islands (Malvinas)
  FK: "FKP",
  // Micronesia Federated States of
  FM: "USD",
  // Faroe Islands
  FO: "DKK",
  // France
  FR: "EUR",
  // Gabon
  GA: "XAF",
  // United Kingdom
  GB: "GBP",
  // Grenada
  GD: "XCD",
  // Georgia
  GE: "GEL",
  // French Guiana
  GF: "EUR",
  // Guernsey
  GG: "GGP",
  // Ghana
  GH: "GHS",
  // Gibraltar
  GI: "GIP",
  // Greenland
  GL: "DKK",
  // Gambia
  GM: "GMD",
  // Guinea
  GN: "GNF",
  // Guadeloupe
  GP: "EUR",
  // Equatorial Guinea
  GQ: "XAF",
  // Greece
  GR: "EUR",
  // South Georgia and the South Sandwich Islands
  GS: "GBP",
  // Guatemala
  GT: "GTQ",
  // Guam
  GU: "USD",
  // Guinea-Bissau
  GW: "XOF",
  // Guyana
  GY: "GYD",
  // Hong Kong
  HK: "HKD",
  // Heard and Mc Donald Islands
  HM: "AUD",
  // Honduras
  HN: "HNL",
  // Croatia (Hrvatska)
  HR: "EUR",
  // Haiti
  HT: "HTG",
  // Hungary
  HU: "HUF",
  // Indonesia
  ID: "IDR",
  // Ireland
  IE: "EUR",
  // Israel
  IL: "ILS",
  // Isle of Man
  IM: "GBP",
  // India
  IN: "INR",
  // British Indian Ocean Territory
  IO: "USD",
  // Iraq
  IQ: "IQD",
  // Iran (Islamic Republic of)
  IR: "IRR",
  // Iceland
  IS: "ISK",
  // Italy
  IT: "EUR",
  // Jersey
  JE: "GBP",
  // Jamaica
  JM: "JMD",
  // Jordan
  JO: "JOD",
  // Japan
  JP: "JPY",
  // Kenya
  KE: "KES",
  // Kyrgyzstan
  KG: "KGS",
  // Cambodia
  KH: "KHR",
  // Kiribati
  KI: "AUD",
  // Comoros
  KM: "KMF",
  // Saint Kitts
  KN: "XCD",
  // Korea North
  KP: "KPW",
  // Korea South
  KR: "KRW",
  // Kuwait
  KW: "KWD",
  // Cayman Islands
  KY: "KYD",
  // Kazakhstan
  KZ: "KZT",
  // Laos
  LA: "LAK",
  // Lebanon
  LB: "LBP",
  // Saint Lucia
  LC: "XCD",
  // Liechtenstein
  LI: "CHF",
  // Sri Lanka
  LK: "LKR",
  // Liberia
  LR: "LRD",
  // Lesotho
  LS: "LSL",
  // Lithuania
  LT: "EUR",
  // Luxembourg
  LU: "EUR",
  // Latvia
  LV: "EUR",
  // Libyan Arab Jamahiriya
  LY: "LYD",
  // Morocco
  MA: "MAD",
  // Monaco
  MC: "EUR",
  // Moldova Republic of
  MD: "MDL",
  // Montenegro
  ME: "EUR",
  // Saint Martin (French part)
  MF: "EUR",
  // Madagascar
  MG: "MGA",
  // Marshall Islands
  MH: "USD",
  // Macedonia
  MK: "MKD",
  // Mali
  ML: "XOF",
  // Myanmar
  MM: "MMK",
  // Mongolia
  MN: "MNT",
  // Macau
  MO: "MOP",
  // Northern Mariana Islands
  MP: "USD",
  // Martinique
  MQ: "EUR",
  // Mauritania
  MR: "MRO",
  // Montserrat
  MS: "XCD",
  // Malta
  MT: "EUR",
  // Mauritius
  MU: "MUR",
  // Maldives
  MV: "MVR",
  // Malawi
  MW: "MWK",
  // Mexico
  MX: "MXN",
  // Malaysia
  MY: "MYR",
  // Mozambique
  MZ: "MZN",
  // Namibia
  NA: "NAD",
  // New Caledonia
  NC: "XPF",
  // Niger
  NE: "XOF",
  // Norfolk Island
  NF: "AUD",
  // Nigeria
  NG: "NGN",
  // Nicaragua
  NI: "NIO",
  // Netherlands
  NL: "EUR",
  // Norway
  NO: "NOK",
  // Nepal
  NP: "NPR",
  // Nauru
  NR: "AUD",
  // Niue
  NU: "NZD",
  // New Zealand
  NZ: "NZD",
  // Oman
  OM: "OMR",
  // Panama
  PA: "PAB",
  // Peru
  PE: "PEN",
  // French Polynesia
  PF: "XPF",
  // Papua New Guinea
  PG: "PGK",
  // Philippines
  PH: "PHP",
  // Pakistan
  PK: "PKR",
  // Poland
  PL: "PLN",
  // Saint Pierre and Miquelon
  PM: "EUR",
  // Pitcairn
  PN: "NZD",
  // Puerto Rico
  PR: "USD",
  // Palestinian Territory
  PS: "JOD",
  // Portugal
  PT: "EUR",
  // Palau
  PW: "USD",
  // Paraguay
  PY: "PYG",
  // Qatar
  QA: "QAR",
  // Reunion
  RE: "EUR",
  // Romania
  RO: "RON",
  // Serbia
  RS: "RSD",
  // Russian Federation
  RU: "RUB",
  // Rwanda
  RW: "RWF",
  // Saudi Arabia
  SA: "SAR",
  // Solomon Islands
  SB: "SBD",
  // Seychelles
  SC: "SCR",
  // Sudan
  SD: "SDG",
  // Sweden
  SE: "SEK",
  // Singapore
  SG: "SGD",
  // Saint Helena
  SH: "GBP",
  // Slovenia
  SI: "EUR",
  // Svalbard and Jan Mayen Islands
  SJ: "NOK",
  // Slovakia (Slovak Republic)
  SK: "EUR",
  // Sierra Leone
  SL: "SLL",
  // San Marino
  SM: "EUR",
  // Senegal
  SN: "XOF",
  // Somalia
  SO: "SOS",
  // Suriname
  SR: "SRD",
  // Sao Tome and Principe
  ST: "STD",
  // El Salvador
  SV: "USD",
  // Syrian Arab Republic
  SY: "SYP",
  // Swaziland
  SZ: "SZL",
  // Turks and Caicos Islands
  TC: "USD",
  // Chad
  TD: "XAF",
  // French Southern Territories
  TF: "EUR",
  // Togo
  TG: "XOF",
  // Thailand
  TH: "THB",
  // Tajikistan
  TJ: "TJS",
  // Tokelau
  TK: "NZD",
  // East Timor
  TL: "IDR",
  // Turkmenistan
  TM: "TMT",
  // Tunisia
  TN: "TND",
  // Tonga
  TO: "TOP",
  // Turkey
  TR: "TRY",
  // Trinidad and Tobago
  TT: "TTD",
  // Tuvalu
  TV: "AUD",
  // Taiwan
  TW: "TWD",
  // Tanzania
  TZ: "TZS",
  // Ukraine
  UA: "UAH",
  // Uganda
  UG: "UGX",
  // United States Minor Outlying Islands
  UM: "USD",
  // United States
  US: "USD",
  // Uruguay
  UY: "UYU",
  // Uzbekistan
  UZ: "UZS",
  // Vatican City State (Holy See)
  VA: "EUR",
  // Saint Vincent Grenadines
  VC: "XCD",
  // Venezuela
  VE: "VEF",
  // Virgin Islands (British)
  VG: "USD",
  // Virgin Islands (US)
  VI: "USD",
  // Vietnam
  VN: "VND",
  // Vanuatu
  VU: "VUV",
  // Wallis and Futuna Islands
  WF: "XPF",
  // Samoa
  WS: "WST",
  // Yemen
  YE: "YER",
  // Mayotte
  YT: "EUR",
  // South Africa
  ZA: "ZAR",
  // Zambia
  ZM: "ZMW",
  // Zimbabwe
  ZW: "ZWD"
};
var uniqueSet = new Set(Object.values(currencies));
var uniqueCurrencies = [...uniqueSet];

// src/utils/rates.ts
var ENDPOINT = "https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1";
async function getCurrency(currency) {
  const response = await fetch(`${ENDPOINT}/currencies/${currency}.json`);
  return response.json();
}
function transformKeysToUppercase(obj) {
  const entries = Object.entries(obj);
  const upperCaseEntries = entries.map(([key, value]) => {
    return [key.toUpperCase(), value];
  }).filter(([key]) => uniqueCurrencies.includes(key));
  const transformedObject = Object.fromEntries(upperCaseEntries);
  return transformedObject;
}
async function getRates() {
  const rates = await Promise.allSettled(
    uniqueCurrencies.map((currency) => getCurrency(currency.toLowerCase()))
  );
  return rates.filter(
    (rate) => rate.status === "fulfilled"
  ).map((rate) => rate.value).map((value) => {
    const date = Object.values(value).at(0);
    const currency = Object.keys(value).at(1);
    if (!currency) {
      return null;
    }
    const currencyData = value[currency];
    if (typeof currencyData !== "object" || currencyData === null) {
      return null;
    }
    return {
      source: currency.toUpperCase(),
      date,
      rates: transformKeysToUppercase(currencyData)
    };
  }).filter((item) => item !== null);
}

// src/routes/rates/schema.ts
init_checked_fetch();
init_modules_watch_stub();
var RatesSchema = z.object({
  data: z.array(
    z.object({
      source: z.string().openapi({
        example: "USD"
      }),
      date: z.string().openapi({
        example: "2024-02-29"
      }),
      rates: z.record(z.string(), z.number()).openapi({
        example: {
          EUR: 0.925393,
          GBP: 0.792256,
          SEK: 10,
          BDT: 200
        }
      })
    })
  )
}).openapi("RatesSchema");

// src/routes/rates/index.ts
var app5 = new OpenAPIHono();
var indexRoute4 = createRoute({
  method: "get",
  path: "/",
  summary: "Get rates",
  responses: {
    200: {
      content: {
        "application/json": {
          schema: RatesSchema
        }
      },
      description: "Retrieve rates"
    },
    400: {
      content: {
        "application/json": {
          schema: GeneralErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
app5.openapi(indexRoute4, async (c2) => {
  try {
    const data = await getRates();
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    return c2.json(
      {
        error: "Internal server error",
        message: "Internal server error",
        requestId: c2.get("requestId"),
        code: "400"
      },
      400
    );
  }
});
var rates_default = app5;

// src/routes/transactions/index.ts
init_checked_fetch();
init_modules_watch_stub();

// src/routes/transactions/schema.ts
init_checked_fetch();
init_modules_watch_stub();
var TransactionsParamsSchema = z.object({
  provider: Providers.openapi({
    param: {
      name: "provider",
      in: "query"
    },
    example: Providers.Enum.teller
  }),
  accountId: z.string().openapi({
    description: "Get transactions by accountId",
    param: {
      name: "accountId",
      in: "query"
    },
    example: "5341343-4234-4c65-815c-t234213442"
  }),
  accountType: z.enum(["credit", "depository"]).openapi({
    description: "Get transactions with the correct amount depending on credit or depository",
    param: {
      name: "accountType",
      in: "query"
    },
    example: "depository"
  }),
  accessToken: z.string().optional().openapi({
    description: "Used for Teller and Plaid",
    param: {
      name: "accessToken",
      in: "query"
    },
    example: "token-123"
  }),
  latest: z.enum(["true", "false"]).transform((value) => value === "true").optional().openapi({
    description: "Get latest transactions",
    param: {
      name: "latest",
      in: "query"
    },
    example: "true"
  })
}).openapi("TransactionsParamsSchema");
var TransactionSchema = z.object({
  id: z.string().openapi({
    example: "9293961c-df93-4d6d-a2cc-fc3e353b2d10"
  }),
  description: z.string().openapi({
    example: "Transfer to bank account"
  }).nullable(),
  method: z.string().openapi({
    example: "other"
  }).nullable(),
  amount: z.number().openapi({
    example: 100
  }),
  name: z.string().openapi({
    example: "Vercel Inc."
  }),
  date: z.string().openapi({
    example: "2024-06-12"
  }),
  currency: z.string().openapi({
    example: "USD"
  }),
  status: z.enum(["pending", "posted"]).openapi({
    example: "posted"
  }),
  category: z.string().openapi({
    example: "travel"
  }).nullable(),
  balance: z.number().openapi({
    example: 1e4
  }).nullable()
}).openapi("TransactionSchema");
var TransactionsSchema = z.object({
  data: z.array(TransactionSchema)
}).openapi("TransactionsSchema");

// src/routes/transactions/index.ts
var app6 = new OpenAPIHono();
var indexRoute5 = createRoute({
  method: "get",
  path: "/",
  summary: "Get transactions",
  request: {
    query: TransactionsParamsSchema
  },
  responses: {
    200: {
      content: {
        "application/json": {
          schema: TransactionsSchema
        }
      },
      description: "Retrieve transactions"
    },
    400: {
      content: {
        "application/json": {
          schema: ErrorSchema
        }
      },
      description: "Returns an error"
    }
  }
});
app6.openapi(indexRoute5, async (c2) => {
  const envs = env(c2);
  const { provider, accountId, accountType, latest, accessToken } = c2.req.valid("query");
  const api = new Provider({
    provider,
    fetcher: c2.env.TELLER_CERT,
    kv: c2.env.KV,
    envs
  });
  try {
    const data = await api.getTransactions({
      accountId,
      accessToken,
      accountType,
      latest
    });
    return c2.json(
      {
        data
      },
      200
    );
  } catch (error) {
    const errorResponse = createErrorResponse(error, c2.get("requestId"));
    return c2.json(errorResponse, 400);
  }
});
var transactions_default = app6;

// src/index.ts
var app7 = new OpenAPIHono({
  defaultHook: (result, c2) => {
    console.log(result);
    if (!result.success) {
      return c2.json({ success: false, errors: result.error.errors }, 422);
    }
  }
});
app7.use("*", requestId());
app7.use(authMiddleware);
app7.use(securityMiddleware);
app7.use(loggingMiddleware);
app7.get("/institutions", cacheMiddleware);
app7.get("/accounts", cacheMiddleware);
app7.get("/accounts/balance", cacheMiddleware);
app7.get("/transactions", cacheMiddleware);
app7.get("/rates", cacheMiddleware);
app7.route("/transactions", transactions_default).route("/accounts", accounts_default).route("/institutions", institutions_default).route("/rates", rates_default).route("/auth", auth_default);
app7.openAPIRegistry.registerComponent("securitySchemes", "Bearer", {
  type: "http",
  scheme: "bearer"
});
app7.get(
  "/",
  middleware({
    url: "/openapi"
  })
);
app7.doc("/openapi", {
  openapi: "3.1.0",
  info: {
    version: "1.0.0",
    title: "Midday Engine API"
  }
});
app7.route("/health", health_default);
var src_default = app7;

// ../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
init_checked_fetch();
init_modules_watch_stub();
var drainBody = async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e2) {
      console.error("Failed to drain the unused request body.", e2);
    }
  }
};
var middleware_ensure_req_body_drained_default = drainBody;

// ../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
init_checked_fetch();
init_modules_watch_stub();
function reduceError(e2) {
  return {
    name: e2?.name,
    message: e2?.message ?? String(e2),
    stack: e2?.stack,
    cause: e2?.cause === void 0 ? void 0 : reduceError(e2.cause)
  };
}
var jsonError = async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } catch (e2) {
    const error = reduceError(e2);
    return Response.json(error, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
};
var middleware_miniflare3_json_error_default = jsonError;

// .wrangler/tmp/bundle-cVVNnv/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = src_default;

// ../../node_modules/wrangler/templates/middleware/common.ts
init_checked_fetch();
init_modules_watch_stub();
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
function __facade_invokeChain__(request, env2, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env2, ctx, middlewareCtx);
}
function __facade_invoke__(request, env2, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env2, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}

// .wrangler/tmp/bundle-cVVNnv/middleware-loader.entry.ts
var __Facade_ScheduledController__ = class {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof __Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware2 of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware2);
  }
  const fetchDispatcher = function(request, env2, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env2, ctx);
  };
  return {
    ...worker,
    fetch(request, env2, ctx) {
      const dispatcher = function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env2, ctx);
        }
      };
      return __facade_invoke__(request, env2, ctx, dispatcher, fetchDispatcher);
    }
  };
}
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware2 of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware2);
  }
  return class extends klass {
    #fetchDispatcher = (request, env2, ctx) => {
      this.env = env2;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    };
    #dispatcher = (type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    };
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default as default
};
//# sourceMappingURL=index.js.map
